// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Var struct{ capnp.Struct }

// Var_TypeID is the unique identifier for the type Var.
const Var_TypeID = 0xf9f76aa770fd06d1

func NewVar(s *capnp.Segment) (Var, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Var{st}, err
}

func NewRootVar(s *capnp.Segment) (Var, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Var{st}, err
}

func ReadRootVar(msg *capnp.Message) (Var, error) {
	root, err := msg.RootPtr()
	return Var{root.Struct()}, err
}

func (s Var) String() string {
	str, _ := text.Marshal(0xf9f76aa770fd06d1, s.Struct)
	return str
}

func (s Var) State() (Var_State, error) {
	p, err := s.Struct.Ptr(0)
	return Var_State{Struct: p.Struct()}, err
}

func (s Var) HasState() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Var) SetState(v Var_State) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewState sets the state field to a newly
// allocated Var_State struct, preferring placement in s's segment.
func (s Var) NewState() (Var_State, error) {
	ss, err := NewVar_State(s.Struct.Segment())
	if err != nil {
		return Var_State{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Var_List is a list of Var.
type Var_List struct{ capnp.List }

// NewVar creates a new list of Var.
func NewVar_List(s *capnp.Segment, sz int32) (Var_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Var_List{l}, err
}

func (s Var_List) At(i int) Var { return Var{s.List.Struct(i)} }

func (s Var_List) Set(i int, v Var) error { return s.List.SetStruct(i, v.Struct) }

func (s Var_List) String() string {
	str, _ := text.MarshalList(0xf9f76aa770fd06d1, s.List)
	return str
}

// Var_Promise is a wrapper for a Var promised by a client call.
type Var_Promise struct{ *capnp.Pipeline }

func (p Var_Promise) Struct() (Var, error) {
	s, err := p.Pipeline.Struct()
	return Var{s}, err
}

func (p Var_Promise) State() Var_State_Promise {
	return Var_State_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Var_State struct{ capnp.Struct }

// Var_State_TypeID is the unique identifier for the type Var_State.
const Var_State_TypeID = 0xb1db32ec78450f53

func NewVar_State(s *capnp.Segment) (Var_State, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Var_State{st}, err
}

func NewRootVar_State(s *capnp.Segment) (Var_State, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Var_State{st}, err
}

func ReadRootVar_State(msg *capnp.Message) (Var_State, error) {
	root, err := msg.RootPtr()
	return Var_State{root.Struct()}, err
}

func (s Var_State) String() string {
	str, _ := text.Marshal(0xb1db32ec78450f53, s.Struct)
	return str
}

func (s Var_State) Type() Var_State_StateType {
	return Var_State_StateType(s.Struct.Uint16(0))
}

func (s Var_State) SetType(v Var_State_StateType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Var_State) Value() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s Var_State) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Var_State) ValuePtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Var_State) SetValue(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s Var_State) SetValuePtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Var_State_List is a list of Var_State.
type Var_State_List struct{ capnp.List }

// NewVar_State creates a new list of Var_State.
func NewVar_State_List(s *capnp.Segment, sz int32) (Var_State_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Var_State_List{l}, err
}

func (s Var_State_List) At(i int) Var_State { return Var_State{s.List.Struct(i)} }

func (s Var_State_List) Set(i int, v Var_State) error { return s.List.SetStruct(i, v.Struct) }

func (s Var_State_List) String() string {
	str, _ := text.MarshalList(0xb1db32ec78450f53, s.List)
	return str
}

// Var_State_Promise is a wrapper for a Var_State promised by a client call.
type Var_State_Promise struct{ *capnp.Pipeline }

func (p Var_State_Promise) Struct() (Var_State, error) {
	s, err := p.Pipeline.Struct()
	return Var_State{s}, err
}

func (p Var_State_Promise) Value() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type Var_State_StateType uint16

// Var_State_StateType_TypeID is the unique identifier for the type Var_State_StateType.
const Var_State_StateType_TypeID = 0xd84e5d193eb57901

// Values of Var_State_StateType.
const (
	Var_State_StateType_proc Var_State_StateType = 0
	Var_State_StateType_chan Var_State_StateType = 1
)

// String returns the enum's constant name.
func (c Var_State_StateType) String() string {
	switch c {
	case Var_State_StateType_proc:
		return "proc"
	case Var_State_StateType_chan:
		return "chan"

	default:
		return ""
	}
}

// Var_State_StateTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Var_State_StateTypeFromString(c string) Var_State_StateType {
	switch c {
	case "proc":
		return Var_State_StateType_proc
	case "chan":
		return Var_State_StateType_chan

	default:
		return 0
	}
}

type Var_State_StateType_List struct{ capnp.List }

func NewVar_State_StateType_List(s *capnp.Segment, sz int32) (Var_State_StateType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Var_State_StateType_List{l.List}, err
}

func (l Var_State_StateType_List) At(i int) Var_State_StateType {
	ul := capnp.UInt16List{List: l.List}
	return Var_State_StateType(ul.At(i))
}

func (l Var_State_StateType_List) Set(i int, v Var_State_StateType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Promise is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_SubAnchor_Promise) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

const schema_c8aa6d83e0c03a9d = "x\xda\x84TAh#U\x18\xfe\xbe\xf7&M\x84\xb4" +
	"\x93\x97\xa9\xd8n\x91\x80T\xd0\x88\xd1\xa4\x07\xd9\xa2n" +
	"\x0a\x1b\xd9\x15\x95\xbc\xa6\x94\x15\xf4\xf0\x8c\x03YM\x93" +
	"a2q\xcda\x0f\xb2\xc8\x9e\xf6\"\x14\xf5\xb0\x07\x0f" +
	"\x8b\xba\x08R\xa4\x17O\xb2\x07\xf1\xe2A\x10\x11\xbd\x88" +
	"G\x11\xf4P\xd4\x82v\xe4M\xdaL*u{\x09\xe1" +
	"\xcd7\xdf\xf7\x7f\xdf\xff\xcd{\xfc\x12\xeb\xa2\x9a)I" +
	"@/gf\xe2\xbd\x97\xfe\xba\xb40\xf7\xcc6\xd4\x02" +
	"\x81\x0c\xb3\xc0\xca\x90e\x82\xdeU\x9e\x03\xe3\x96\xdbx" +
	"\xf3\xd7\xda\x8f;\xd0\xf7\x92\xf173\xff\x04\x1f\xbe\xf6" +
	"\xe7\xbeE\x16\xe8\xdd\xe4\x0f\xde\xc7\xbc\x0f\xf0vy\x05" +
	"\xf0\x9e\x12n\xbcX\xf9\xf2\xa3w\xfe\xf8{g\x9a\xb1" +
	"*\x1e\xb0\x8cg\x85e|\xff\xf7\xcf\xe6\xdeZZ\xbe" +
	"3\x0dxQ\x9c\xb1\x00\x93\x008\xda}z\xf1\xe5\x17" +
	"\xbe\x87Z\x12\xa9>P\xe0\xca\xb6(\xd3\xbb%\xb2\x80" +
	"\xf7\x81x\x02\x8c\x1f\xbdq\xfd\xe7\xe0\xbbG~\x81^" +
	" \xe3\xf5o\xaf}->\xffd\x0f\x0d\x91\x15\xc0\xca" +
	"-Q\xa4\xb7\x9b\xc0w\xc4\xa7`\xfc\xee\xfeAk\xe9" +
	"\xbd\xcd\xdf\xc6\xda\x8e\x95\xbe(\x8b\x84\x93\xbe\xaa\x94\x8c" +
	"o\xae~\xf1\xd3\xb5\xad\xdb_\x01\xf4\xaa\xf2\x8ewV" +
	"Z\x8f\x0dy\xdd\xdb\x96Y \x8dA)\xa6\xe0\xc4\x8a" +
	"wU\xde\xf6\xdeN\xf07\xa4uc\x82\xcb\x8f\x99^" +
	"\xbb#\xfba\xa5m\x82^\xb0\xba\xd6kw\xfaa\xe5" +
	"\x8a\xe9\xbe\xbe\xbc\xee\x0f\xdca7\x1ahG:\x80C" +
	"@\xcd\xae\x02:'\xa9\xe7\x05\xcf\x99\x04K\x95\xce\x07" +
	"RM\xd1\x8a\x09\xed\xa6\x09+\xad\xc8\xc8\xc8\xd7\x0e\xa7" +
	"S\xe4z\xdc\x8aL\xe4o\x8c\x02\xd0\xd7\xb9\x89\xd2\xc3" +
	"e\xdb\x02I}^\x90\x9c\xa7=[\xab\x01\xfaII" +
	"}A\xd0\x8dF\x81O7\xa5\x02\xeaT,iGL" +
	"\x15\xc3\xbeF\x17,\xbda\xbaC\x9fE\x08\x16\xc15" +
	"\x87\x8aEn\x9e\xe2\xbfi\xc2\xac\xd9:f\xbf\x9c\xda" +
	"w\x03\x13u\x98\x87`\xfenIv\x076\xc7aW" +
	"\x1e\xcf\xf1Y@\xe7%\xf5C\x82q\xbbs\xb9\xfbj" +
	"\xe8\xf7\x00p\x0elJ\xb2\x90\x96\x07\xb4\x87'\x08\x1c" +
	"f\x1a\xf9\xe3_wc\x14\xf8MR\xe7(\x00\xa5\xca" +
	"\xc96\xee)\x03n\x10\xf6\xdbn\xbbcz\xff?f" +
	"k\xf8J\xf2\x8f\xa1\xa5\xc8O\x06mX\xc7uI\xfd" +
	"\x9c\xe0,\xe3x\xbc\x88\x8b\xf6\xf4\xbc\xa4n\x0a\xde/" +
	"\x0eb\xce'\x9a\xcf\xdbv\\\x90\xd4\x1b\xff\x89\xc7\x0d" +
	"\xfb\xfd\x083\xa77\xe6\xa4\xf8\x9a&4[\x1c\x9c\xd0" +
	"\xaa1\x06I\xa5&y%\x95:t\x03\x86:'3" +
	"\xc0\xe4\xe3\xe2\xd1\x17\xae\xaag \xd4\x83Yrr+" +
	"\xf0\xe8\xc2Q\x8be\x085\x9b\x95\xddA\x9d\xae\xedB" +
	"\x9dM\xa6S\xf2h\x02\xd7.!\x91\x9f4N\xb1V" +
	"J\xf61\xbd\xedZZ\x9b\xd2\xc0>da\xea\xf2 " +
	"\x0b\xe0\xbf\x01\x00\x00\xff\xff\xc9\xe5Y\x9c"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x95460e1858f85cf4,
		0xb1db32ec78450f53,
		0xb1fcf692a8c62e19,
		0xc2241b810eb3f099,
		0xd84e5d193eb57901,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf4acba02cd83d452,
		0xf9f76aa770fd06d1)
}
