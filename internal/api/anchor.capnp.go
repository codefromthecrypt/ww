// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

type Anchor_AnchorMap struct{ capnp.Struct }

// Anchor_AnchorMap_TypeID is the unique identifier for the type Anchor_AnchorMap.
const Anchor_AnchorMap_TypeID = 0x8be8fbbfcf6b3aa8

func NewAnchor_AnchorMap(s *capnp.Segment) (Anchor_AnchorMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_AnchorMap{st}, err
}

func NewRootAnchor_AnchorMap(s *capnp.Segment) (Anchor_AnchorMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_AnchorMap{st}, err
}

func ReadRootAnchor_AnchorMap(msg *capnp.Message) (Anchor_AnchorMap, error) {
	root, err := msg.RootPtr()
	return Anchor_AnchorMap{root.Struct()}, err
}

func (s Anchor_AnchorMap) String() string {
	str, _ := text.Marshal(0x8be8fbbfcf6b3aa8, s.Struct)
	return str
}

func (s Anchor_AnchorMap) Anchors() (Anchor_AnchorMap_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_AnchorMap_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_AnchorMap) HasAnchors() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap) SetAnchors(v Anchor_AnchorMap_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated Anchor_AnchorMap_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_AnchorMap) NewAnchors(n int32) (Anchor_AnchorMap_SubAnchor_List, error) {
	l, err := NewAnchor_AnchorMap_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_AnchorMap_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_AnchorMap_List is a list of Anchor_AnchorMap.
type Anchor_AnchorMap_List struct{ capnp.List }

// NewAnchor_AnchorMap creates a new list of Anchor_AnchorMap.
func NewAnchor_AnchorMap_List(s *capnp.Segment, sz int32) (Anchor_AnchorMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_AnchorMap_List{l}, err
}

func (s Anchor_AnchorMap_List) At(i int) Anchor_AnchorMap { return Anchor_AnchorMap{s.List.Struct(i)} }

func (s Anchor_AnchorMap_List) Set(i int, v Anchor_AnchorMap) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_AnchorMap_List) String() string {
	str, _ := text.MarshalList(0x8be8fbbfcf6b3aa8, s.List)
	return str
}

// Anchor_AnchorMap_Promise is a wrapper for a Anchor_AnchorMap promised by a client call.
type Anchor_AnchorMap_Promise struct{ *capnp.Pipeline }

func (p Anchor_AnchorMap_Promise) Struct() (Anchor_AnchorMap, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_AnchorMap{s}, err
}

type Anchor_AnchorMap_SubAnchor struct{ capnp.Struct }

// Anchor_AnchorMap_SubAnchor_TypeID is the unique identifier for the type Anchor_AnchorMap_SubAnchor.
const Anchor_AnchorMap_SubAnchor_TypeID = 0xc3ba56f053025546

func NewAnchor_AnchorMap_SubAnchor(s *capnp.Segment) (Anchor_AnchorMap_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_AnchorMap_SubAnchor{st}, err
}

func NewRootAnchor_AnchorMap_SubAnchor(s *capnp.Segment) (Anchor_AnchorMap_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_AnchorMap_SubAnchor{st}, err
}

func ReadRootAnchor_AnchorMap_SubAnchor(msg *capnp.Message) (Anchor_AnchorMap_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_AnchorMap_SubAnchor{root.Struct()}, err
}

func (s Anchor_AnchorMap_SubAnchor) String() string {
	str, _ := text.Marshal(0xc3ba56f053025546, s.Struct)
	return str
}

func (s Anchor_AnchorMap_SubAnchor) Subpath() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_AnchorMap_SubAnchor) HasSubpath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap_SubAnchor) SubpathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_AnchorMap_SubAnchor) SetSubpath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_AnchorMap_SubAnchor) Subanchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_AnchorMap_SubAnchor) HasSubanchor() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap_SubAnchor) SetSubanchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_AnchorMap_SubAnchor_List is a list of Anchor_AnchorMap_SubAnchor.
type Anchor_AnchorMap_SubAnchor_List struct{ capnp.List }

// NewAnchor_AnchorMap_SubAnchor creates a new list of Anchor_AnchorMap_SubAnchor.
func NewAnchor_AnchorMap_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_AnchorMap_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_AnchorMap_SubAnchor_List{l}, err
}

func (s Anchor_AnchorMap_SubAnchor_List) At(i int) Anchor_AnchorMap_SubAnchor {
	return Anchor_AnchorMap_SubAnchor{s.List.Struct(i)}
}

func (s Anchor_AnchorMap_SubAnchor_List) Set(i int, v Anchor_AnchorMap_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_AnchorMap_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xc3ba56f053025546, s.List)
	return str
}

// Anchor_AnchorMap_SubAnchor_Promise is a wrapper for a Anchor_AnchorMap_SubAnchor promised by a client call.
type Anchor_AnchorMap_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_AnchorMap_SubAnchor_Promise) Struct() (Anchor_AnchorMap_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_AnchorMap_SubAnchor{s}, err
}

func (p Anchor_AnchorMap_SubAnchor_Promise) Subanchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_AnchorMap, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_AnchorMap{Struct: p.Struct()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_AnchorMap) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_AnchorMap struct, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren() (Anchor_AnchorMap, error) {
	ss, err := NewAnchor_AnchorMap(s.Struct.Segment())
	if err != nil {
		return Anchor_AnchorMap{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

func (p Anchor_ls_Results_Promise) Children() Anchor_AnchorMap_Promise {
	return Anchor_AnchorMap_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

const schema_c8aa6d83e0c03a9d = "x\xda\x94\x93\xbfk\x13o\x1c\xc7?\xef\xe7\xb9|\x93" +
	"!M\xf2\xf4\x0a\xdf\xb4\xd5\xa5\xc4\xc1`\xa3\xc5E\x03" +
	"\xd2(\xd8A\x10\xf2$\xb48\xb8<\x89\x85\x0b\xbd$" +
	"\xe7]\x8f\x8eE:88)\x88vpp+\xe2\"" +
	"NvQ+\x88\x8b\xb8\xf8\x07\xb8\x08nv\xa8bP" +
	"<y.?\xee\"Tq:x\xee\xf5\xbc\x9e\xcf\xcf" +
	"\\\xaf\xc2\x16\x12]F$\x8f$\xfe\x0bv\xcak\xef" +
	"\x9e\x7f\xfft\x8bD\x1eA\xed\xfd\xd6[\xb6\xfb\xf8\x80" +
	"\x12H\x12\x9d>\x8aI\x98\xf3\xf8\x9f\xc8<\x8bEB" +
	"pp\xf5\xdb\x95|f\xe9\xae\x86i\x00\xb5P\x04\xc1" +
	"\xbc\x1e\x02\xd3\xa5\xd7;w\xbe\xfex\x12\x07ncN" +
	"\x03\xdb!\xb0\xbd\xff4sc\xb6\xb0\x17\x07\x9eaF" +
	"\x03/C`i\x99\xd5\xf7Wv_\x91\x98C\x14\\" +
	"\x82i\xf0#\x1a0{\xfa\x8e\xf9\x05\x1b\x84\xe0^\xef" +
	"g}\xf6\xfe\xca\xe7\xbe\xcd\xd0\xcc2\x9b\x04\x19Q&" +
	"B\xf0\xe0A\xf9\xc5\x87\xad\xf6\xa37D0\xcf\xb1=" +
	"\xf3\"\xd3)Iv\xd3|\xa8\xbd\x81rZ'U\xa7" +
	"i\xf1\xae[j*\xa7\xe3\x94\xcfw\x9aV\xd7-\xf5" +
	"?\x97\x15\x1ci \x1e\x1bjA\xddo\x84\xbf\x09\xae" +
	"4\xb8Ad\x80HL\\ \x92)\x0eY`\xd8T" +
	"\xe1u\x0f\x19B\x95\x03\xb9H@\xd0\x87\x87?\xbc\xa1" +
	"\xec\xb5Bm\xd5\xcb\xfa\xf6\xba\x17\xd7\x97\x07\xfa)\x86" +
	"\xc5\xbe\x1e\"J\x96\x00\xf1WmU\xb9I\xd5\x1e\xb3" +
	"\x16#k\xd6Q\xeb\x16\xd2\xc4\x90\xfe\x93\xc9\xf6tx" +
	"\xbe\xcd\xc7\xc3\xbbD$\xd3\x1c2\xcf\x104\xad\x96}" +
	"\xcd]\xed\x10\x11rQ+\x09\xc8\xc5\xcc\xc6a5w" +
	"J\xfd\x0a'\xad\xae[\x05dj\xf4\xcaq]\xe3\x02" +
	"\x87<\xc5 \x80)\xe8\xc3\xf9\x1a\x91<\xc1!\xcf0" +
	"lz~c,\x0d\xcfo\xa8A\xaf\xfe\xa5\\\xb6\xa7" +
	"\x8b\xa5\xda\xf0F\x0c\xfb\x8d\xa1p0\xa2%B-\x18" +
	"&@pd\x8a'\x88Fc\x8a\xe1\xf4\x8b\x85\x19b" +
	"\xe2X\x12\xd1\xc6`\xb8[b\xbaHLL$\xb9\xed" +
	"U\x90\xd5\x1d\xab\xa0\x0a\xfc\x0a\x00\x00\xff\xff\xa5\x1b\x0e" +
	"\xa2"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x8be8fbbfcf6b3aa8,
		0x95460e1858f85cf4,
		0xb1fcf692a8c62e19,
		0xc2241b810eb3f099,
		0xc3ba56f053025546,
		0xef56981b53fef997,
		0xf4acba02cd83d452)
}
