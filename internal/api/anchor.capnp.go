// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

type Anchor_SubAnchor struct{ capnp.Struct }

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Promise is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_SubAnchor_Promise) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Router struct{ Client capnp.Client }

// Router_TypeID is the unique identifier for the type Router.
const Router_TypeID = 0xf6cb28aacbb0b707

func (c Router) Ls(ctx context.Context, params func(Router_ls_Params) error, opts ...capnp.CallOption) Router_ls_Results_Promise {
	if c.Client == nil {
		return Router_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6cb28aacbb0b707,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Router",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Router_ls_Params{Struct: s}) }
	}
	return Router_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Router_Server interface {
	Ls(Router_ls) error
}

func Router_ServerToClient(s Router_Server) Router {
	c, _ := s.(server.Closer)
	return Router{Client: server.New(Router_Methods(nil, s), c)}
}

func Router_Methods(methods []server.Method, s Router_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6cb28aacbb0b707,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Router",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Router_ls{c, opts, Router_ls_Params{Struct: p}, Router_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Router_ls holds the arguments for a server call to Router.ls.
type Router_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Router_ls_Params
	Results Router_ls_Results
}

type Router_ls_Params struct{ capnp.Struct }

// Router_ls_Params_TypeID is the unique identifier for the type Router_ls_Params.
const Router_ls_Params_TypeID = 0x806d937098563a73

func NewRouter_ls_Params(s *capnp.Segment) (Router_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Router_ls_Params{st}, err
}

func NewRootRouter_ls_Params(s *capnp.Segment) (Router_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Router_ls_Params{st}, err
}

func ReadRootRouter_ls_Params(msg *capnp.Message) (Router_ls_Params, error) {
	root, err := msg.RootPtr()
	return Router_ls_Params{root.Struct()}, err
}

func (s Router_ls_Params) String() string {
	str, _ := text.Marshal(0x806d937098563a73, s.Struct)
	return str
}

// Router_ls_Params_List is a list of Router_ls_Params.
type Router_ls_Params_List struct{ capnp.List }

// NewRouter_ls_Params creates a new list of Router_ls_Params.
func NewRouter_ls_Params_List(s *capnp.Segment, sz int32) (Router_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Router_ls_Params_List{l}, err
}

func (s Router_ls_Params_List) At(i int) Router_ls_Params { return Router_ls_Params{s.List.Struct(i)} }

func (s Router_ls_Params_List) Set(i int, v Router_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Router_ls_Params_List) String() string {
	str, _ := text.MarshalList(0x806d937098563a73, s.List)
	return str
}

// Router_ls_Params_Promise is a wrapper for a Router_ls_Params promised by a client call.
type Router_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Router_ls_Params_Promise) Struct() (Router_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Router_ls_Params{s}, err
}

type Router_ls_Results struct{ capnp.Struct }

// Router_ls_Results_TypeID is the unique identifier for the type Router_ls_Results.
const Router_ls_Results_TypeID = 0xc28a3d408aa3f6f2

func NewRouter_ls_Results(s *capnp.Segment) (Router_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_ls_Results{st}, err
}

func NewRootRouter_ls_Results(s *capnp.Segment) (Router_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_ls_Results{st}, err
}

func ReadRootRouter_ls_Results(msg *capnp.Message) (Router_ls_Results, error) {
	root, err := msg.RootPtr()
	return Router_ls_Results{root.Struct()}, err
}

func (s Router_ls_Results) String() string {
	str, _ := text.Marshal(0xc28a3d408aa3f6f2, s.Struct)
	return str
}

func (s Router_ls_Results) View() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Router_ls_Results) HasView() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Router_ls_Results) SetView(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewView sets the view field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Router_ls_Results) NewView(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Router_ls_Results_List is a list of Router_ls_Results.
type Router_ls_Results_List struct{ capnp.List }

// NewRouter_ls_Results creates a new list of Router_ls_Results.
func NewRouter_ls_Results_List(s *capnp.Segment, sz int32) (Router_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Router_ls_Results_List{l}, err
}

func (s Router_ls_Results_List) At(i int) Router_ls_Results {
	return Router_ls_Results{s.List.Struct(i)}
}

func (s Router_ls_Results_List) Set(i int, v Router_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Router_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc28a3d408aa3f6f2, s.List)
	return str
}

// Router_ls_Results_Promise is a wrapper for a Router_ls_Results promised by a client call.
type Router_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Router_ls_Results_Promise) Struct() (Router_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Router_ls_Results{s}, err
}

const schema_c8aa6d83e0c03a9d = "x\xda\x9c\x93Mh\x13_\x14\xc5\xefyo\xe6\x9f." +
	"\xd2\xe4\xff:\x05\xfb\xb1\x90\xca\x081\x92\xd8\xa0\xab\x80" +
	"4n\x14\\\xcd\xa4P\\\xe8b\x8c\x81\x04'\xc98" +
	"\x93\x18\xdc)\xa5\x14\x0b\xdd(b]\xb8r#EA" +
	"\x11\x11\x04A\x03\x8aP\xdc\xa9kqW7~P\x82" +
	"\x828\xf2&L>j\x88\xe0nx\xef7\xe7\x9e{" +
	"\xee\xbb\xf3s\xc8\xb1\x8c\xba\x97\x13\x99\xba\xfa\x9f\xefe" +
	"\x976\x9c\xeb\x95\xcb$\xa6@\xa4D\x88\x0e70\x01" +
	"R\xfc\x9d\xd3\xdfOM\xc5\x8e\xdf\xe8\xdc\xa8\x90Wg" +
	"\x90\x04A+b\x81\xe0O\xa7_\xdd\xbd\xd6\xfe\xf9\xb0" +
	"\x1fX\xc1>\x09\xac\x07\xc0\xad/\x8fbWf\xf5V" +
	"?p\x1f3\x12x\x1c\x00\xdf\xdaw\xd6rG\xd7\x06" +
	"\x80\xed\x0e\xf05\x00R\xeb\xab\x1f\x9d\xf7\x07?I\xc0" +
	"\xcf\xbf]~\xc3\x9e\xde\xdb!\x95Ip\x8eM@\xcb" +
	"\xc8O-\xc5\x9a\x04\xff\xe6\x8f_\x8b\xb3\x1bK\x9f\xfb" +
	"Z\xb9\xca\x82V\xba\x7f\x0a\xc1\xfd\xdb\xd9\xe7\x1f\x96+" +
	"\x9b\xaf\x89\xa0]`-\xed\x12\xdbC\xa4\xad\xb0U\xed" +
	"\x9d\x14\xf3#O\x1elm&\xb6\xda\x7f\xc0\xcfXK" +
	"{\x19\xd4{\xc1Nh\xdb\x01l9\xe5CV\xb5P" +
	"\xe257]\xb0\x9c\xaa\x93\xcd\xd7\x1a\xf5\xa2\x9b\xb6=" +
	"\xdd\xb0\\\xab\x02o\x08s\xacZ(\xd5\xdct\xd3\xb2" +
	"\xcf\xeb\xf9\xa2\x17o\xd8u\xcfT\xb8B\xa4\x80H\x8c" +
	"g\x89\xcc1\x0es\x92a\xc1\x0aX\x88^\x13\x04\x08" +
	"\xc2_d\x0d\xcb\x8dX\x95\x01\xd5dO5\xeeX\xf5" +
	"\x12\xa2\xc4\x10\x1d\xa5d{\xd2^\xc3\xe6\x83\xf6N\x12" +
	"\x99Q\x0e3\xc1\xe0\x17Je\xfb\x9c[\xac\x12\x11b" +
	"\x04\x83\x03\xff\xf7\xc6F\x90\x87#S\x1aV t\xaa" +
	"3\xc4/\x96\x8b\xcdPY\x1a\x8e\x8d2\xbc\xd88\x1b" +
	"|\xc15\x00s\xac\xabx@*\xea\x1c\xe6<\x83\x00" +
	"&!\x0fS2\xe6\x04\x87ydW \xff\x90\xf9\x90" +
	"q\xb3]\x0c\x99\x0a\xfa_4\xf2~h\x97\xe0\x9ac" +
	"\\%\xea\xbea\x84\xbb#23\xc4\xc4\xfe\x08z\xfb" +
	"\x86p3\xc5t\x92\x98\x18\x8fp\xdb\xcb!.\xc7\x9e" +
	"\x83\x01\x0cq\xd0\x89\x9bd(JP'\\{\x84+" +
	"(\x84\xac\xa3v\xb4\x0c\xe0w\x00\x00\x00\xff\xff\xb79" +
	"'\x9f"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806d937098563a73,
		0x95460e1858f85cf4,
		0xb1fcf692a8c62e19,
		0xc2241b810eb3f099,
		0xc28a3d408aa3f6f2,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf4acba02cd83d452,
		0xf6cb28aacbb0b707)
}
