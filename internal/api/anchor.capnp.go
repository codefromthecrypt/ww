// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

type Anchor_AnchorMap struct{ capnp.Struct }

// Anchor_AnchorMap_TypeID is the unique identifier for the type Anchor_AnchorMap.
const Anchor_AnchorMap_TypeID = 0x8be8fbbfcf6b3aa8

func NewAnchor_AnchorMap(s *capnp.Segment) (Anchor_AnchorMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_AnchorMap{st}, err
}

func NewRootAnchor_AnchorMap(s *capnp.Segment) (Anchor_AnchorMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_AnchorMap{st}, err
}

func ReadRootAnchor_AnchorMap(msg *capnp.Message) (Anchor_AnchorMap, error) {
	root, err := msg.RootPtr()
	return Anchor_AnchorMap{root.Struct()}, err
}

func (s Anchor_AnchorMap) String() string {
	str, _ := text.Marshal(0x8be8fbbfcf6b3aa8, s.Struct)
	return str
}

func (s Anchor_AnchorMap) SubAnchors() (Anchor_AnchorMap_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_AnchorMap_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_AnchorMap) HasSubAnchors() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap) SetSubAnchors(v Anchor_AnchorMap_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSubAnchors sets the subAnchors field to a newly
// allocated Anchor_AnchorMap_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_AnchorMap) NewSubAnchors(n int32) (Anchor_AnchorMap_SubAnchor_List, error) {
	l, err := NewAnchor_AnchorMap_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_AnchorMap_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_AnchorMap_List is a list of Anchor_AnchorMap.
type Anchor_AnchorMap_List struct{ capnp.List }

// NewAnchor_AnchorMap creates a new list of Anchor_AnchorMap.
func NewAnchor_AnchorMap_List(s *capnp.Segment, sz int32) (Anchor_AnchorMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_AnchorMap_List{l}, err
}

func (s Anchor_AnchorMap_List) At(i int) Anchor_AnchorMap { return Anchor_AnchorMap{s.List.Struct(i)} }

func (s Anchor_AnchorMap_List) Set(i int, v Anchor_AnchorMap) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_AnchorMap_List) String() string {
	str, _ := text.MarshalList(0x8be8fbbfcf6b3aa8, s.List)
	return str
}

// Anchor_AnchorMap_Promise is a wrapper for a Anchor_AnchorMap promised by a client call.
type Anchor_AnchorMap_Promise struct{ *capnp.Pipeline }

func (p Anchor_AnchorMap_Promise) Struct() (Anchor_AnchorMap, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_AnchorMap{s}, err
}

type Anchor_AnchorMap_SubAnchor struct{ capnp.Struct }

// Anchor_AnchorMap_SubAnchor_TypeID is the unique identifier for the type Anchor_AnchorMap_SubAnchor.
const Anchor_AnchorMap_SubAnchor_TypeID = 0xc3ba56f053025546

func NewAnchor_AnchorMap_SubAnchor(s *capnp.Segment) (Anchor_AnchorMap_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_AnchorMap_SubAnchor{st}, err
}

func NewRootAnchor_AnchorMap_SubAnchor(s *capnp.Segment) (Anchor_AnchorMap_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_AnchorMap_SubAnchor{st}, err
}

func ReadRootAnchor_AnchorMap_SubAnchor(msg *capnp.Message) (Anchor_AnchorMap_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_AnchorMap_SubAnchor{root.Struct()}, err
}

func (s Anchor_AnchorMap_SubAnchor) String() string {
	str, _ := text.Marshal(0xc3ba56f053025546, s.Struct)
	return str
}

func (s Anchor_AnchorMap_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_AnchorMap_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_AnchorMap_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_AnchorMap_SubAnchor) Child() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_AnchorMap_SubAnchor) HasChild() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_AnchorMap_SubAnchor) SetChild(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_AnchorMap_SubAnchor_List is a list of Anchor_AnchorMap_SubAnchor.
type Anchor_AnchorMap_SubAnchor_List struct{ capnp.List }

// NewAnchor_AnchorMap_SubAnchor creates a new list of Anchor_AnchorMap_SubAnchor.
func NewAnchor_AnchorMap_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_AnchorMap_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_AnchorMap_SubAnchor_List{l}, err
}

func (s Anchor_AnchorMap_SubAnchor_List) At(i int) Anchor_AnchorMap_SubAnchor {
	return Anchor_AnchorMap_SubAnchor{s.List.Struct(i)}
}

func (s Anchor_AnchorMap_SubAnchor_List) Set(i int, v Anchor_AnchorMap_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_AnchorMap_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xc3ba56f053025546, s.List)
	return str
}

// Anchor_AnchorMap_SubAnchor_Promise is a wrapper for a Anchor_AnchorMap_SubAnchor promised by a client call.
type Anchor_AnchorMap_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_AnchorMap_SubAnchor_Promise) Struct() (Anchor_AnchorMap_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_AnchorMap_SubAnchor{s}, err
}

func (p Anchor_AnchorMap_SubAnchor_Promise) Child() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_AnchorMap, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_AnchorMap{Struct: p.Struct()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_AnchorMap) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_AnchorMap struct, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren() (Anchor_AnchorMap, error) {
	ss, err := NewAnchor_AnchorMap(s.Struct.Segment())
	if err != nil {
		return Anchor_AnchorMap{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

func (p Anchor_ls_Results_Promise) Children() Anchor_AnchorMap_Promise {
	return Anchor_AnchorMap_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

const schema_c8aa6d83e0c03a9d = "x\xda\x94\x93Ok\x13Q\x14\xc5\xcfyob\xbah" +
	"\x9b\xbcN\xc1\xb4U\x84\x12\xa1\x06\x1a\xad\xba1 \x8d" +
	"\x0b\xbb\x10\x84\xbc\x84\x16\x117\xd3XH\xe9$\x19f" +
	"\x1a\xba\x96.\\\xb8\x13\x8a\xba\xe8\xc2]\x117\xe2\xae" +
	" JEq#n\xfc\x00.ue\x17E\x0c\xfe\x19" +
	"y\x93&\x93\x16\xaa\xb8\x1ax\xf3{\xe7\x9e{\xde\xbd" +
	"\xe9vQ\xcc$\x9a\x02\xd0'\x12\xc7\xc2\xad\xc2\xca\x87" +
	"\x97?>\xdf\x83\xca0,\x7f\\\x7f/\xb6\x9f\xee!" +
	"\xc1$p\xe1$GhO\xf38`_\xe2,\x18\xee" +
	"\xdd\xfa~#3<\xb7a`\xecCu\xe6\x08\xda\xad" +
	"\x08\x18\xcb\xbf\xdd\xba\xff\xed\xe7\xb3~`\x83\x93\x06\xd8" +
	"\x8c\x80G\xbb\xcf\x87\xefLdw\xfa\x81\x17\x1c7\xc0" +
	"\x9b\x08\x98\x9b\x17\x95\xdd\x85\xed\xd7P\x93\x8c\xcd%\x84" +
	"\x01\xbfp\x91\xf6/s\xc7ns\x0d\x0c\x1f\xb4\x7fW" +
	"&\x1e.|\xed\xa8Y\x86\x99\x17#\x84\x15w\xa2\x94" +
	"\x0c7\x0b\xaf>\xad\xd7\x9f\xbc\x03h_\x16;\xf6U" +
	"aZ\xd2\xe2\xae\xfd\xd8\xe8\x86\x8e\xb7|\xd6iTk" +
	"\xb2\xe9\xe7\xab\x8e\xd7\xf0\x0aW\x1a\xd5Z\xd3\xcfw>" +
	"\xd7\x1dz\xdab\xbf7\x96\xc3Jk1\xfa\x0d\xfa\xda" +
	"\x92\x16`\x11PC7\x01=(\xa9\xa7\x04\xc3\xa0\x8b" +
	"H?\xe00X\x92d:V\x01\xcd\xe1\xd1\xd5\xd7\x1c" +
	"w%[^\x0aR-w5\xe8\xafQ\x00\xf4\x80\xa4" +
	"\x1e\x15\x9cu\"\x96*\xee\x18\xa4\xfa\xa7l\xc9\xf1\x93" +
	"N\xfd\x80j.VMy\xcej\x8d\x83\x10\x1c\xfc\x9b" +
	"\x92\x1b\x18{-W\x1e\xb4wm?\x82\x8c`X\xad" +
	"-\xbb\xb7\xfd\xa5\x06\x00\xa6\xe3\xf7\x04\x99\xeeS\xb6\x8e" +
	"\x0a\xde\xcbwbN\xd6\x9a~\x89\xd4\x03\xbd*g\x8c" +
	"\xdd\xac\xa4>'\xa8\xc8Q\x9a\xc3\xe9\xf3\x80\x9e\x92\xd4" +
	"\x17\x0f\xf5p*\xf2\xf1?)\xb9\x81\xc9\xc8\xa93\xe8" +
	"1\xe2\x10\x83h(\xe2\x05b9\xec\xfa\x06== " +
	"\x13@oD\xd9\x9d|53\x0e\xa1N'\x19o\x0b" +
	"\xbb{\xa5\xc6r\x10j()\xdd\xa0\xc8\x94y\xa8\"" +
	"K\xe4\x9f\x00\x00\x00\xff\xff\x86>\x0b\xf7"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x8be8fbbfcf6b3aa8,
		0x95460e1858f85cf4,
		0xb1fcf692a8c62e19,
		0xc2241b810eb3f099,
		0xc3ba56f053025546,
		0xef56981b53fef997,
		0xf4acba02cd83d452)
}
