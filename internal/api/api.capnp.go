// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Any struct{ capnp.Struct }
type Any_Which uint16

const (
	Any_Which_nil       Any_Which = 0
	Any_Which_bool      Any_Which = 1
	Any_Which_i64       Any_Which = 2
	Any_Which_bigInt    Any_Which = 3
	Any_Which_f64       Any_Which = 4
	Any_Which_bigFloat  Any_Which = 5
	Any_Which_frac      Any_Which = 6
	Any_Which_char      Any_Which = 7
	Any_Which_str       Any_Which = 8
	Any_Which_keyword   Any_Which = 9
	Any_Which_symbol    Any_Which = 10
	Any_Which_path      Any_Which = 11
	Any_Which_list      Any_Which = 12
	Any_Which_vector    Any_Which = 13
	Any_Which_vectorSeq Any_Which = 14
	Any_Which_fn        Any_Which = 15
	Any_Which_proc      Any_Which = 16
)

func (w Any_Which) String() string {
	const s = "nilbooli64bigIntf64bigFloatfraccharstrkeywordsymbolpathlistvectorvectorSeqfnproc"
	switch w {
	case Any_Which_nil:
		return s[0:3]
	case Any_Which_bool:
		return s[3:7]
	case Any_Which_i64:
		return s[7:10]
	case Any_Which_bigInt:
		return s[10:16]
	case Any_Which_f64:
		return s[16:19]
	case Any_Which_bigFloat:
		return s[19:27]
	case Any_Which_frac:
		return s[27:31]
	case Any_Which_char:
		return s[31:35]
	case Any_Which_str:
		return s[35:38]
	case Any_Which_keyword:
		return s[38:45]
	case Any_Which_symbol:
		return s[45:51]
	case Any_Which_path:
		return s[51:55]
	case Any_Which_list:
		return s[55:59]
	case Any_Which_vector:
		return s[59:65]
	case Any_Which_vectorSeq:
		return s[65:74]
	case Any_Which_fn:
		return s[74:76]
	case Any_Which_proc:
		return s[76:80]

	}
	return "Any_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Any_TypeID is the unique identifier for the type Any.
const Any_TypeID = 0xa177c8866f029c3c

func NewAny(s *capnp.Segment) (Any, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Any{st}, err
}

func NewRootAny(s *capnp.Segment) (Any, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Any{st}, err
}

func ReadRootAny(msg *capnp.Message) (Any, error) {
	root, err := msg.Root()
	return Any{root.Struct()}, err
}

func (s Any) String() string {
	str, _ := text.Marshal(0xa177c8866f029c3c, s.Struct)
	return str
}

func (s Any) Which() Any_Which {
	return Any_Which(s.Struct.Uint16(0))
}
func (s Any) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Any) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Any) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Any) I64() int64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != i64")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Any) SetI64(v int64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Any) BigInt() ([]byte, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != bigInt")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Any) HasBigInt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetBigInt(v []byte) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetData(0, v)
}

func (s Any) F64() float64 {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != f64")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Any) SetF64(v float64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Any) BigFloat() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != bigFloat")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Any) HasBigFloat() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) BigFloatBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Any) SetBigFloat(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Any) Frac() (Frac, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != frac")
	}
	p, err := s.Struct.Ptr(0)
	return Frac{Struct: p.Struct()}, err
}

func (s Any) HasFrac() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetFrac(v Frac) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrac sets the frac field to a newly
// allocated Frac struct, preferring placement in s's segment.
func (s Any) NewFrac() (Frac, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewFrac(s.Struct.Segment())
	if err != nil {
		return Frac{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Any) Char() int32 {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(8))
}

func (s Any) SetChar(v int32) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Any) Str() (string, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Any) HasStr() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Any) SetStr(v string) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetText(0, v)
}

func (s Any) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Any) HasKeyword() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Any) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetText(0, v)
}

func (s Any) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Any) HasSymbol() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Any) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetText(0, v)
}

func (s Any) Path() (string, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Any) HasPath() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Any) SetPath(v string) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetText(0, v)
}

func (s Any) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Any) HasList() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Any) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Any) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Any) HasVector() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Any) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Any) VectorSeq() (VectorSeq, error) {
	if s.Struct.Uint16(0) != 14 {
		panic("Which() != vectorSeq")
	}
	p, err := s.Struct.Ptr(0)
	return VectorSeq{Struct: p.Struct()}, err
}

func (s Any) HasVectorSeq() bool {
	if s.Struct.Uint16(0) != 14 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetVectorSeq(v VectorSeq) error {
	s.Struct.SetUint16(0, 14)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVectorSeq sets the vectorSeq field to a newly
// allocated VectorSeq struct, preferring placement in s's segment.
func (s Any) NewVectorSeq() (VectorSeq, error) {
	s.Struct.SetUint16(0, 14)
	ss, err := NewVectorSeq(s.Struct.Segment())
	if err != nil {
		return VectorSeq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Any) Fn() (Fn, error) {
	if s.Struct.Uint16(0) != 15 {
		panic("Which() != fn")
	}
	p, err := s.Struct.Ptr(0)
	return Fn{Struct: p.Struct()}, err
}

func (s Any) HasFn() bool {
	if s.Struct.Uint16(0) != 15 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetFn(v Fn) error {
	s.Struct.SetUint16(0, 15)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFn sets the fn field to a newly
// allocated Fn struct, preferring placement in s's segment.
func (s Any) NewFn() (Fn, error) {
	s.Struct.SetUint16(0, 15)
	ss, err := NewFn(s.Struct.Segment())
	if err != nil {
		return Fn{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Any) Proc() Proc {
	if s.Struct.Uint16(0) != 16 {
		panic("Which() != proc")
	}
	p, _ := s.Struct.Ptr(0)
	return Proc{Client: p.Interface().Client()}
}

func (s Any) HasProc() bool {
	if s.Struct.Uint16(0) != 16 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Any) SetProc(v Proc) error {
	s.Struct.SetUint16(0, 16)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Any_List is a list of Any.
type Any_List struct{ capnp.List }

// NewAny creates a new list of Any.
func NewAny_List(s *capnp.Segment, sz int32) (Any_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Any_List{l}, err
}

func (s Any_List) At(i int) Any { return Any{s.List.Struct(i)} }

func (s Any_List) Set(i int, v Any) error { return s.List.SetStruct(i, v.Struct) }

func (s Any_List) String() string {
	str, _ := text.MarshalList(0xa177c8866f029c3c, s.List)
	return str
}

// Any_Future is a wrapper for a Any promised by a client call.
type Any_Future struct{ *capnp.Future }

func (p Any_Future) Struct() (Any, error) {
	s, err := p.Future.Struct()
	return Any{s}, err
}

func (p Any_Future) Frac() Frac_Future {
	return Frac_Future{Future: p.Future.Field(0, nil)}
}

func (p Any_Future) List() LinkedList_Future {
	return LinkedList_Future{Future: p.Future.Field(0, nil)}
}

func (p Any_Future) Vector() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

func (p Any_Future) VectorSeq() VectorSeq_Future {
	return VectorSeq_Future{Future: p.Future.Field(0, nil)}
}

func (p Any_Future) Fn() Fn_Future {
	return Fn_Future{Future: p.Future.Field(0, nil)}
}

func (p Any_Future) Proc() Proc {
	return Proc{Client: p.Future.Field(0, nil).Client()}
}

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Load(ctx context.Context, params func(Anchor_load_Params) error) (Anchor_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_load_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Store(ctx context.Context, params func(Anchor_store_Params) error) (Anchor_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_store_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Go(ctx context.Context, params func(Anchor_go_Params) error) (Anchor_go_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_go_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_go_Results_Future{Future: ans.Future()}, release
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error

	Load(context.Context, Anchor_load) error

	Store(context.Context, Anchor_store) error

	Go(context.Context, Anchor_go) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Anchor_load{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Anchor_store{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Go(ctx, Anchor_go{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

// Anchor_load holds the state for a server call to Anchor.load.
// See server.Call for documentation.
type Anchor_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_load) Args() Anchor_load_Params {
	return Anchor_load_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_load) AllocResults() (Anchor_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{Struct: r}, err
}

// Anchor_store holds the state for a server call to Anchor.store.
// See server.Call for documentation.
type Anchor_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_store) Args() Anchor_store_Params {
	return Anchor_store_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_store) AllocResults() (Anchor_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{Struct: r}, err
}

// Anchor_go holds the state for a server call to Anchor.go.
// See server.Call for documentation.
type Anchor_go struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_go) Args() Anchor_go_Params {
	return Anchor_go_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_go) AllocResults() (Anchor_go_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{Struct: r}, err
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.Root()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Future is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Future struct{ *capnp.Future }

func (p Anchor_SubAnchor_Future) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Future.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Anchor_load_Params struct{ capnp.Struct }

// Anchor_load_Params_TypeID is the unique identifier for the type Anchor_load_Params.
const Anchor_load_Params_TypeID = 0xa94cf75566fcc440

func NewAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func NewRootAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func ReadRootAnchor_load_Params(msg *capnp.Message) (Anchor_load_Params, error) {
	root, err := msg.Root()
	return Anchor_load_Params{root.Struct()}, err
}

func (s Anchor_load_Params) String() string {
	str, _ := text.Marshal(0xa94cf75566fcc440, s.Struct)
	return str
}

// Anchor_load_Params_List is a list of Anchor_load_Params.
type Anchor_load_Params_List struct{ capnp.List }

// NewAnchor_load_Params creates a new list of Anchor_load_Params.
func NewAnchor_load_Params_List(s *capnp.Segment, sz int32) (Anchor_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_load_Params_List{l}, err
}

func (s Anchor_load_Params_List) At(i int) Anchor_load_Params {
	return Anchor_load_Params{s.List.Struct(i)}
}

func (s Anchor_load_Params_List) Set(i int, v Anchor_load_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Params_List) String() string {
	str, _ := text.MarshalList(0xa94cf75566fcc440, s.List)
	return str
}

// Anchor_load_Params_Future is a wrapper for a Anchor_load_Params promised by a client call.
type Anchor_load_Params_Future struct{ *capnp.Future }

func (p Anchor_load_Params_Future) Struct() (Anchor_load_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_load_Params{s}, err
}

type Anchor_load_Results struct{ capnp.Struct }

// Anchor_load_Results_TypeID is the unique identifier for the type Anchor_load_Results.
const Anchor_load_Results_TypeID = 0xb3012e36a35e0fb0

func NewAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func NewRootAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func ReadRootAnchor_load_Results(msg *capnp.Message) (Anchor_load_Results, error) {
	root, err := msg.Root()
	return Anchor_load_Results{root.Struct()}, err
}

func (s Anchor_load_Results) String() string {
	str, _ := text.Marshal(0xb3012e36a35e0fb0, s.Struct)
	return str
}

func (s Anchor_load_Results) Value() (Any, error) {
	p, err := s.Struct.Ptr(0)
	return Any{Struct: p.Struct()}, err
}

func (s Anchor_load_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_load_Results) SetValue(v Any) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Any struct, preferring placement in s's segment.
func (s Anchor_load_Results) NewValue() (Any, error) {
	ss, err := NewAny(s.Struct.Segment())
	if err != nil {
		return Any{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_load_Results_List is a list of Anchor_load_Results.
type Anchor_load_Results_List struct{ capnp.List }

// NewAnchor_load_Results creates a new list of Anchor_load_Results.
func NewAnchor_load_Results_List(s *capnp.Segment, sz int32) (Anchor_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_load_Results_List{l}, err
}

func (s Anchor_load_Results_List) At(i int) Anchor_load_Results {
	return Anchor_load_Results{s.List.Struct(i)}
}

func (s Anchor_load_Results_List) Set(i int, v Anchor_load_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Results_List) String() string {
	str, _ := text.MarshalList(0xb3012e36a35e0fb0, s.List)
	return str
}

// Anchor_load_Results_Future is a wrapper for a Anchor_load_Results promised by a client call.
type Anchor_load_Results_Future struct{ *capnp.Future }

func (p Anchor_load_Results_Future) Struct() (Anchor_load_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_load_Results{s}, err
}

func (p Anchor_load_Results_Future) Value() Any_Future {
	return Any_Future{Future: p.Future.Field(0, nil)}
}

type Anchor_store_Params struct{ capnp.Struct }

// Anchor_store_Params_TypeID is the unique identifier for the type Anchor_store_Params.
const Anchor_store_Params_TypeID = 0x8ef1ac844ec73672

func NewAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func NewRootAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func ReadRootAnchor_store_Params(msg *capnp.Message) (Anchor_store_Params, error) {
	root, err := msg.Root()
	return Anchor_store_Params{root.Struct()}, err
}

func (s Anchor_store_Params) String() string {
	str, _ := text.Marshal(0x8ef1ac844ec73672, s.Struct)
	return str
}

func (s Anchor_store_Params) Value() (Any, error) {
	p, err := s.Struct.Ptr(0)
	return Any{Struct: p.Struct()}, err
}

func (s Anchor_store_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_store_Params) SetValue(v Any) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Any struct, preferring placement in s's segment.
func (s Anchor_store_Params) NewValue() (Any, error) {
	ss, err := NewAny(s.Struct.Segment())
	if err != nil {
		return Any{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_store_Params_List is a list of Anchor_store_Params.
type Anchor_store_Params_List struct{ capnp.List }

// NewAnchor_store_Params creates a new list of Anchor_store_Params.
func NewAnchor_store_Params_List(s *capnp.Segment, sz int32) (Anchor_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_store_Params_List{l}, err
}

func (s Anchor_store_Params_List) At(i int) Anchor_store_Params {
	return Anchor_store_Params{s.List.Struct(i)}
}

func (s Anchor_store_Params_List) Set(i int, v Anchor_store_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Params_List) String() string {
	str, _ := text.MarshalList(0x8ef1ac844ec73672, s.List)
	return str
}

// Anchor_store_Params_Future is a wrapper for a Anchor_store_Params promised by a client call.
type Anchor_store_Params_Future struct{ *capnp.Future }

func (p Anchor_store_Params_Future) Struct() (Anchor_store_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_store_Params{s}, err
}

func (p Anchor_store_Params_Future) Value() Any_Future {
	return Any_Future{Future: p.Future.Field(0, nil)}
}

type Anchor_store_Results struct{ capnp.Struct }

// Anchor_store_Results_TypeID is the unique identifier for the type Anchor_store_Results.
const Anchor_store_Results_TypeID = 0xc54940df263f58ae

func NewAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func NewRootAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func ReadRootAnchor_store_Results(msg *capnp.Message) (Anchor_store_Results, error) {
	root, err := msg.Root()
	return Anchor_store_Results{root.Struct()}, err
}

func (s Anchor_store_Results) String() string {
	str, _ := text.Marshal(0xc54940df263f58ae, s.Struct)
	return str
}

// Anchor_store_Results_List is a list of Anchor_store_Results.
type Anchor_store_Results_List struct{ capnp.List }

// NewAnchor_store_Results creates a new list of Anchor_store_Results.
func NewAnchor_store_Results_List(s *capnp.Segment, sz int32) (Anchor_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_store_Results_List{l}, err
}

func (s Anchor_store_Results_List) At(i int) Anchor_store_Results {
	return Anchor_store_Results{s.List.Struct(i)}
}

func (s Anchor_store_Results_List) Set(i int, v Anchor_store_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Results_List) String() string {
	str, _ := text.MarshalList(0xc54940df263f58ae, s.List)
	return str
}

// Anchor_store_Results_Future is a wrapper for a Anchor_store_Results promised by a client call.
type Anchor_store_Results_Future struct{ *capnp.Future }

func (p Anchor_store_Results_Future) Struct() (Anchor_store_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_store_Results{s}, err
}

type Anchor_go_Params struct{ capnp.Struct }

// Anchor_go_Params_TypeID is the unique identifier for the type Anchor_go_Params.
const Anchor_go_Params_TypeID = 0xd3451f471503cf21

func NewAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func NewRootAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func ReadRootAnchor_go_Params(msg *capnp.Message) (Anchor_go_Params, error) {
	root, err := msg.Root()
	return Anchor_go_Params{root.Struct()}, err
}

func (s Anchor_go_Params) String() string {
	str, _ := text.Marshal(0xd3451f471503cf21, s.Struct)
	return str
}

func (s Anchor_go_Params) Args() (Any_List, error) {
	p, err := s.Struct.Ptr(0)
	return Any_List{List: p.List()}, err
}

func (s Anchor_go_Params) HasArgs() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_go_Params) SetArgs(v Any_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Any_List, preferring placement in s's segment.
func (s Anchor_go_Params) NewArgs(n int32) (Any_List, error) {
	l, err := NewAny_List(s.Struct.Segment(), n)
	if err != nil {
		return Any_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_go_Params_List is a list of Anchor_go_Params.
type Anchor_go_Params_List struct{ capnp.List }

// NewAnchor_go_Params creates a new list of Anchor_go_Params.
func NewAnchor_go_Params_List(s *capnp.Segment, sz int32) (Anchor_go_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_go_Params_List{l}, err
}

func (s Anchor_go_Params_List) At(i int) Anchor_go_Params { return Anchor_go_Params{s.List.Struct(i)} }

func (s Anchor_go_Params_List) Set(i int, v Anchor_go_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Params_List) String() string {
	str, _ := text.MarshalList(0xd3451f471503cf21, s.List)
	return str
}

// Anchor_go_Params_Future is a wrapper for a Anchor_go_Params promised by a client call.
type Anchor_go_Params_Future struct{ *capnp.Future }

func (p Anchor_go_Params_Future) Struct() (Anchor_go_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_go_Params{s}, err
}

type Anchor_go_Results struct{ capnp.Struct }

// Anchor_go_Results_TypeID is the unique identifier for the type Anchor_go_Results.
const Anchor_go_Results_TypeID = 0x9fb80cccef72e8de

func NewAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{st}, err
}

func NewRootAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{st}, err
}

func ReadRootAnchor_go_Results(msg *capnp.Message) (Anchor_go_Results, error) {
	root, err := msg.Root()
	return Anchor_go_Results{root.Struct()}, err
}

func (s Anchor_go_Results) String() string {
	str, _ := text.Marshal(0x9fb80cccef72e8de, s.Struct)
	return str
}

func (s Anchor_go_Results) Proc() Proc {
	p, _ := s.Struct.Ptr(0)
	return Proc{Client: p.Interface().Client()}
}

func (s Anchor_go_Results) HasProc() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_go_Results) SetProc(v Proc) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_go_Results_List is a list of Anchor_go_Results.
type Anchor_go_Results_List struct{ capnp.List }

// NewAnchor_go_Results creates a new list of Anchor_go_Results.
func NewAnchor_go_Results_List(s *capnp.Segment, sz int32) (Anchor_go_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_go_Results_List{l}, err
}

func (s Anchor_go_Results_List) At(i int) Anchor_go_Results {
	return Anchor_go_Results{s.List.Struct(i)}
}

func (s Anchor_go_Results_List) Set(i int, v Anchor_go_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Results_List) String() string {
	str, _ := text.MarshalList(0x9fb80cccef72e8de, s.List)
	return str
}

// Anchor_go_Results_Future is a wrapper for a Anchor_go_Results promised by a client call.
type Anchor_go_Results_Future struct{ *capnp.Future }

func (p Anchor_go_Results_Future) Struct() (Anchor_go_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_go_Results{s}, err
}

func (p Anchor_go_Results_Future) Proc() Proc {
	return Proc{Client: p.Future.Field(0, nil).Client()}
}

type Fn struct{ capnp.Struct }
type Fn_Which uint16

const (
	Fn_Which_lambda Fn_Which = 0
	Fn_Which_name   Fn_Which = 1
)

func (w Fn_Which) String() string {
	const s = "lambdaname"
	switch w {
	case Fn_Which_lambda:
		return s[0:6]
	case Fn_Which_name:
		return s[6:10]

	}
	return "Fn_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fn_TypeID is the unique identifier for the type Fn.
const Fn_TypeID = 0xf3f0dc8fd7fc3207

func NewFn(s *capnp.Segment) (Fn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn{st}, err
}

func NewRootFn(s *capnp.Segment) (Fn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn{st}, err
}

func ReadRootFn(msg *capnp.Message) (Fn, error) {
	root, err := msg.Root()
	return Fn{root.Struct()}, err
}

func (s Fn) String() string {
	str, _ := text.Marshal(0xf3f0dc8fd7fc3207, s.Struct)
	return str
}

func (s Fn) Which() Fn_Which {
	return Fn_Which(s.Struct.Uint16(2))
}
func (s Fn) Macro() bool {
	return s.Struct.Bit(0)
}

func (s Fn) SetMacro(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Fn) SetLambda() {
	s.Struct.SetUint16(2, 0)

}

func (s Fn) Name() (string, error) {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != name")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Fn) HasName() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Fn) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Fn) SetName(v string) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetText(0, v)
}

func (s Fn) Funcs() (Fn_Func_List, error) {
	p, err := s.Struct.Ptr(1)
	return Fn_Func_List{List: p.List()}, err
}

func (s Fn) HasFuncs() bool {
	return s.Struct.HasPtr(1)
}

func (s Fn) SetFuncs(v Fn_Func_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewFuncs sets the funcs field to a newly
// allocated Fn_Func_List, preferring placement in s's segment.
func (s Fn) NewFuncs(n int32) (Fn_Func_List, error) {
	l, err := NewFn_Func_List(s.Struct.Segment(), n)
	if err != nil {
		return Fn_Func_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Fn_List is a list of Fn.
type Fn_List struct{ capnp.List }

// NewFn creates a new list of Fn.
func NewFn_List(s *capnp.Segment, sz int32) (Fn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Fn_List{l}, err
}

func (s Fn_List) At(i int) Fn { return Fn{s.List.Struct(i)} }

func (s Fn_List) Set(i int, v Fn) error { return s.List.SetStruct(i, v.Struct) }

func (s Fn_List) String() string {
	str, _ := text.MarshalList(0xf3f0dc8fd7fc3207, s.List)
	return str
}

// Fn_Future is a wrapper for a Fn promised by a client call.
type Fn_Future struct{ *capnp.Future }

func (p Fn_Future) Struct() (Fn, error) {
	s, err := p.Future.Struct()
	return Fn{s}, err
}

type Fn_Func struct{ capnp.Struct }
type Fn_Func_Which uint16

const (
	Fn_Func_Which_nilary Fn_Func_Which = 0
	Fn_Func_Which_params Fn_Func_Which = 1
)

func (w Fn_Func_Which) String() string {
	const s = "nilaryparams"
	switch w {
	case Fn_Func_Which_nilary:
		return s[0:6]
	case Fn_Func_Which_params:
		return s[6:12]

	}
	return "Fn_Func_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fn_Func_TypeID is the unique identifier for the type Fn_Func.
const Fn_Func_TypeID = 0xf242e13f19c3d8a2

func NewFn_Func(s *capnp.Segment) (Fn_Func, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn_Func{st}, err
}

func NewRootFn_Func(s *capnp.Segment) (Fn_Func, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn_Func{st}, err
}

func ReadRootFn_Func(msg *capnp.Message) (Fn_Func, error) {
	root, err := msg.Root()
	return Fn_Func{root.Struct()}, err
}

func (s Fn_Func) String() string {
	str, _ := text.Marshal(0xf242e13f19c3d8a2, s.Struct)
	return str
}

func (s Fn_Func) Which() Fn_Func_Which {
	return Fn_Func_Which(s.Struct.Uint16(0))
}
func (s Fn_Func) SetNilary() {
	s.Struct.SetUint16(0, 0)

}

func (s Fn_Func) Params() (capnp.TextList, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != params")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Fn_Func) HasParams() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Fn_Func) SetParams(v capnp.TextList) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Fn_Func) NewParams(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(0, 1)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fn_Func) Variadic() bool {
	return s.Struct.Bit(16)
}

func (s Fn_Func) SetVariadic(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Fn_Func) Body() (Any_List, error) {
	p, err := s.Struct.Ptr(1)
	return Any_List{List: p.List()}, err
}

func (s Fn_Func) HasBody() bool {
	return s.Struct.HasPtr(1)
}

func (s Fn_Func) SetBody(v Any_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBody sets the body field to a newly
// allocated Any_List, preferring placement in s's segment.
func (s Fn_Func) NewBody(n int32) (Any_List, error) {
	l, err := NewAny_List(s.Struct.Segment(), n)
	if err != nil {
		return Any_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Fn_Func_List is a list of Fn_Func.
type Fn_Func_List struct{ capnp.List }

// NewFn_Func creates a new list of Fn_Func.
func NewFn_Func_List(s *capnp.Segment, sz int32) (Fn_Func_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Fn_Func_List{l}, err
}

func (s Fn_Func_List) At(i int) Fn_Func { return Fn_Func{s.List.Struct(i)} }

func (s Fn_Func_List) Set(i int, v Fn_Func) error { return s.List.SetStruct(i, v.Struct) }

func (s Fn_Func_List) String() string {
	str, _ := text.MarshalList(0xf242e13f19c3d8a2, s.List)
	return str
}

// Fn_Func_Future is a wrapper for a Fn_Func promised by a client call.
type Fn_Func_Future struct{ *capnp.Future }

func (p Fn_Func_Future) Struct() (Fn_Func, error) {
	s, err := p.Future.Struct()
	return Fn_Func{s}, err
}

type Proc struct{ Client *capnp.Client }

// Proc_TypeID is the unique identifier for the type Proc.
const Proc_TypeID = 0xb561ad669b43cc65

func (c Proc) Wait(ctx context.Context, params func(Proc_wait_Params) error) (Proc_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb561ad669b43cc65,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Proc",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Proc_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Proc_wait_Results_Future{Future: ans.Future()}, release
}

// A Proc_Server is a Proc with a local implementation.
type Proc_Server interface {
	Wait(context.Context, Proc_wait) error
}

// Proc_NewServer creates a new Server from an implementation of Proc_Server.
func Proc_NewServer(s Proc_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Proc_Methods(nil, s), s, c, policy)
}

// Proc_ServerToClient creates a new Client from an implementation of Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Proc_ServerToClient(s Proc_Server, policy *server.Policy) Proc {
	return Proc{Client: capnp.NewClient(Proc_NewServer(s, policy))}
}

// Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Proc_Methods(methods []server.Method, s Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb561ad669b43cc65,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Proc",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Proc_wait{call})
		},
	})

	return methods
}

// Proc_wait holds the state for a server call to Proc.wait.
// See server.Call for documentation.
type Proc_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Proc_wait) Args() Proc_wait_Params {
	return Proc_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Proc_wait) AllocResults() (Proc_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{Struct: r}, err
}

type Proc_wait_Params struct{ capnp.Struct }

// Proc_wait_Params_TypeID is the unique identifier for the type Proc_wait_Params.
const Proc_wait_Params_TypeID = 0xd805d12cefe22b70

func NewProc_wait_Params(s *capnp.Segment) (Proc_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Params{st}, err
}

func NewRootProc_wait_Params(s *capnp.Segment) (Proc_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Params{st}, err
}

func ReadRootProc_wait_Params(msg *capnp.Message) (Proc_wait_Params, error) {
	root, err := msg.Root()
	return Proc_wait_Params{root.Struct()}, err
}

func (s Proc_wait_Params) String() string {
	str, _ := text.Marshal(0xd805d12cefe22b70, s.Struct)
	return str
}

// Proc_wait_Params_List is a list of Proc_wait_Params.
type Proc_wait_Params_List struct{ capnp.List }

// NewProc_wait_Params creates a new list of Proc_wait_Params.
func NewProc_wait_Params_List(s *capnp.Segment, sz int32) (Proc_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Proc_wait_Params_List{l}, err
}

func (s Proc_wait_Params_List) At(i int) Proc_wait_Params { return Proc_wait_Params{s.List.Struct(i)} }

func (s Proc_wait_Params_List) Set(i int, v Proc_wait_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Proc_wait_Params_List) String() string {
	str, _ := text.MarshalList(0xd805d12cefe22b70, s.List)
	return str
}

// Proc_wait_Params_Future is a wrapper for a Proc_wait_Params promised by a client call.
type Proc_wait_Params_Future struct{ *capnp.Future }

func (p Proc_wait_Params_Future) Struct() (Proc_wait_Params, error) {
	s, err := p.Future.Struct()
	return Proc_wait_Params{s}, err
}

type Proc_wait_Results struct{ capnp.Struct }

// Proc_wait_Results_TypeID is the unique identifier for the type Proc_wait_Results.
const Proc_wait_Results_TypeID = 0xcf49dc7714f7eebd

func NewProc_wait_Results(s *capnp.Segment) (Proc_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{st}, err
}

func NewRootProc_wait_Results(s *capnp.Segment) (Proc_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{st}, err
}

func ReadRootProc_wait_Results(msg *capnp.Message) (Proc_wait_Results, error) {
	root, err := msg.Root()
	return Proc_wait_Results{root.Struct()}, err
}

func (s Proc_wait_Results) String() string {
	str, _ := text.Marshal(0xcf49dc7714f7eebd, s.Struct)
	return str
}

// Proc_wait_Results_List is a list of Proc_wait_Results.
type Proc_wait_Results_List struct{ capnp.List }

// NewProc_wait_Results creates a new list of Proc_wait_Results.
func NewProc_wait_Results_List(s *capnp.Segment, sz int32) (Proc_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Proc_wait_Results_List{l}, err
}

func (s Proc_wait_Results_List) At(i int) Proc_wait_Results {
	return Proc_wait_Results{s.List.Struct(i)}
}

func (s Proc_wait_Results_List) Set(i int, v Proc_wait_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Proc_wait_Results_List) String() string {
	str, _ := text.MarshalList(0xcf49dc7714f7eebd, s.List)
	return str
}

// Proc_wait_Results_Future is a wrapper for a Proc_wait_Results promised by a client call.
type Proc_wait_Results_Future struct{ *capnp.Future }

func (p Proc_wait_Results_Future) Struct() (Proc_wait_Results, error) {
	s, err := p.Future.Struct()
	return Proc_wait_Results{s}, err
}

type Frac struct{ capnp.Struct }

// Frac_TypeID is the unique identifier for the type Frac.
const Frac_TypeID = 0xf84b0bdc2ebe874f

func NewFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func NewRootFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func ReadRootFrac(msg *capnp.Message) (Frac, error) {
	root, err := msg.Root()
	return Frac{root.Struct()}, err
}

func (s Frac) String() string {
	str, _ := text.Marshal(0xf84b0bdc2ebe874f, s.Struct)
	return str
}

func (s Frac) Numer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Frac) HasNumer() bool {
	return s.Struct.HasPtr(0)
}

func (s Frac) SetNumer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Frac) Denom() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Frac) HasDenom() bool {
	return s.Struct.HasPtr(1)
}

func (s Frac) SetDenom(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Frac_List is a list of Frac.
type Frac_List struct{ capnp.List }

// NewFrac creates a new list of Frac.
func NewFrac_List(s *capnp.Segment, sz int32) (Frac_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Frac_List{l}, err
}

func (s Frac_List) At(i int) Frac { return Frac{s.List.Struct(i)} }

func (s Frac_List) Set(i int, v Frac) error { return s.List.SetStruct(i, v.Struct) }

func (s Frac_List) String() string {
	str, _ := text.MarshalList(0xf84b0bdc2ebe874f, s.List)
	return str
}

// Frac_Future is a wrapper for a Frac promised by a client call.
type Frac_Future struct{ *capnp.Future }

func (p Frac_Future) Struct() (Frac, error) {
	s, err := p.Future.Struct()
	return Frac{s}, err
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xa683121d7d12cdc6

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.Root()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xa683121d7d12cdc6, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Any, error) {
	p, err := s.Struct.Ptr(0)
	return Any{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LinkedList) SetHead(v Any) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Any struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Any, error) {
	ss, err := NewAny(s.Struct.Segment())
	if err != nil {
		return Any{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Any, error) {
	p, err := s.Struct.Ptr(1)
	return Any{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LinkedList) SetTail(v Any) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Any struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Any, error) {
	ss, err := NewAny(s.Struct.Segment())
	if err != nil {
		return Any{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xa683121d7d12cdc6, s.List)
	return str
}

// LinkedList_Future is a wrapper for a LinkedList promised by a client call.
type LinkedList_Future struct{ *capnp.Future }

func (p LinkedList_Future) Struct() (LinkedList, error) {
	s, err := p.Future.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Future) Head() Any_Future {
	return Any_Future{Future: p.Future.Field(0, nil)}
}

func (p LinkedList_Future) Tail() Any_Future {
	return Any_Future{Future: p.Future.Field(1, nil)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xfbc39fed30ae733e

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.Root()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xfbc39fed30ae733e, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Any_List, error) {
	p, err := s.Struct.Ptr(1)
	return Any_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s Vector) SetTail(v Any_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Any_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Any_List, error) {
	l, err := NewAny_List(s.Struct.Segment(), n)
	if err != nil {
		return Any_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xfbc39fed30ae733e, s.List)
	return str
}

// Vector_Future is a wrapper for a Vector promised by a client call.
type Vector_Future struct{ *capnp.Future }

func (p Vector_Future) Struct() (Vector, error) {
	s, err := p.Future.Struct()
	return Vector{s}, err
}

func (p Vector_Future) Root() Vector_Node_Future {
	return Vector_Node_Future{Future: p.Future.Field(0, nil)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x806044540cfc08ec

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.Root()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x806044540cfc08ec, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Any_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Any_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Vector_Node) SetValues(v Any_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Any_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Any_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewAny_List(s.Struct.Segment(), n)
	if err != nil {
		return Any_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x806044540cfc08ec, s.List)
	return str
}

// Vector_Node_Future is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Future struct{ *capnp.Future }

func (p Vector_Node_Future) Struct() (Vector_Node, error) {
	s, err := p.Future.Struct()
	return Vector_Node{s}, err
}

type VectorSeq struct{ capnp.Struct }

// VectorSeq_TypeID is the unique identifier for the type VectorSeq.
const VectorSeq_TypeID = 0x9027d60a509d467c

func NewVectorSeq(s *capnp.Segment) (VectorSeq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VectorSeq{st}, err
}

func NewRootVectorSeq(s *capnp.Segment) (VectorSeq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VectorSeq{st}, err
}

func ReadRootVectorSeq(msg *capnp.Message) (VectorSeq, error) {
	root, err := msg.Root()
	return VectorSeq{root.Struct()}, err
}

func (s VectorSeq) String() string {
	str, _ := text.Marshal(0x9027d60a509d467c, s.Struct)
	return str
}

func (s VectorSeq) Offset() uint8 {
	return s.Struct.Uint8(0)
}

func (s VectorSeq) SetOffset(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s VectorSeq) Vector() (Vector, error) {
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s VectorSeq) HasVector() bool {
	return s.Struct.HasPtr(0)
}

func (s VectorSeq) SetVector(v Vector) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s VectorSeq) NewVector() (Vector, error) {
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VectorSeq) Index() uint32 {
	return s.Struct.Uint32(4)
}

func (s VectorSeq) SetIndex(v uint32) {
	s.Struct.SetUint32(4, v)
}

// VectorSeq_List is a list of VectorSeq.
type VectorSeq_List struct{ capnp.List }

// NewVectorSeq creates a new list of VectorSeq.
func NewVectorSeq_List(s *capnp.Segment, sz int32) (VectorSeq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VectorSeq_List{l}, err
}

func (s VectorSeq_List) At(i int) VectorSeq { return VectorSeq{s.List.Struct(i)} }

func (s VectorSeq_List) Set(i int, v VectorSeq) error { return s.List.SetStruct(i, v.Struct) }

func (s VectorSeq_List) String() string {
	str, _ := text.MarshalList(0x9027d60a509d467c, s.List)
	return str
}

// VectorSeq_Future is a wrapper for a VectorSeq promised by a client call.
type VectorSeq_Future struct{ *capnp.Future }

func (p VectorSeq_Future) Struct() (VectorSeq, error) {
	s, err := p.Future.Struct()
	return VectorSeq{s}, err
}

func (p VectorSeq_Future) Vector() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

const schema_c8aa6d83e0c03a9d = "x\xda\x94W}\x8cTW\xf9~\x9fs\xe7c\x99\xef" +
	"\xcb\x99M\x0b\xfdm&\xfd\x05\xb4le\xa5\x0b\xe5\x8f" +
	"M\xeb,\x95\x05\xb7\"\xdd\xbbS\x08&\x8d\xe9\xdd\x99" +
	"\xbb\xbb\x13f\xe6N\xef\xcc\xb2\xdd\x04\xa3\x0d\xd5&&" +
	"\xf8\xd1\x84X\xaa\xa4Y\x8d\xc6\x92Z\xc5\xc6\xc4\x9a\xf8" +
	"\xd1V+\x1aH\xadb\xa5\x09*4M\xda\x1a\x90\xa5" +
	"\xdd\x96\x85.\\\xf3\xde\x99{\xef\xec\xb0\x0b\xf5\xbf\x99" +
	"\xfb\xbc\xe79\xcf\xfb\x9e\xf7\xe3\x9cu3\x81~qG" +
	"\xf0\xbeeDZ)\x18\xb2\xcfv\xcc\xc7\xee\xdf\xfc\xe0" +
	"\x97I\xeb\x04\xecO\xd5\x9e]w\xee\xa9\x97>\xa4\x01" +
	"\x84\x05\x91\xdc\x1f\xf8\x8b<\x18\x08\x13\xc9\x03\x81I\x82" +
	"mm\xfc\xc3\xf6G\x9f\xb9\xf0uR;A\x14D\x98" +
	"h}gp9\x08\xb2+\x98%\xd8{\xb7\x1c\x1a\x8a" +
	"\xbc\xf6\xf1o\x92\x96\x00\xecC}\xbf=\xbd\xaf|\xf8" +
	"h\xc3R\xde\x1d|Q\x0e\x04\xf9\xd7\xa6\xe0O\x08\xf6" +
	"\xec\x03s\xbbnNl9\xd0\xca\xf6z\x83\xed\x8c\xc3" +
	"\xf6\xcf\xb7\xad\xf3\xc7b\xbfx\xaa\xd5\x00!\xc1\x06\xc1" +
	"\x10\x1b\xdc\xf5]a~\xf5\xe8\xe44o'\xfc\xed\x06" +
	"\x10V\x89\xe4\xea\xd0\xe3rm\x88\x17\xad\x09\xfdF!" +
	"\xd8/\x1f_\xfe\xc5\xae\xe5\xfb~\xd8\xaeN\xb0&5" +
	"\xf2'\xd9\x15\xe1_+\"\xac\xae\xffw\xf3\xa3;." +
	"n{\xba\xb19\x07a\xfd\x91H\x04\x14\xb0W\xf4\xbc" +
	"\xfc\xa3\xc7?\x98?\xd2*\xeb C\x90\xd3\x11\x96\xf5" +
	"\xd3\xe4\x17\xbe\xbf\xb1\x07\xcf\xb5\x1a\xbc\x10q\x1c\xfb\xa3" +
	"c`\x1c\xfb\xf4wF\x7f\xac\xff\x9c\xd4\x84\xe2\xeb " +
	"\xc8w\"O\xca\x0b\x8e\x88s\x91\xad\xb23\x1a&\xb2" +
	"\x0f\xce<\x97x\xe4\x96U/\xb6\xb2]\x898Q@" +
	"\x94\xd9\x9e\xdd\x95\xfd\xd8\xbf\xfa\x07\x7f\xdf\xa2\xf4\xce\xe8" +
	"JV\xfa\xab\xff\\LO\x9e\x1a|\x85T\xe9\"]" +
	"Q\xc1\xc8\xad\xaf(\x9d[3\x03\x7fm!\x95\x88^" +
	"\xe6\xc8:\x9c\xd5\xdb\xdf8\xff\x89W\x83'\xfd\x95\xf2" +
	"\xce\xe8e\x0a\xd8k\xf7?\xf6F\xf5\xb5\xdb\xff\xddH" +
	"\x98\xe1\x13\xfb\x8e\x8b_>3K\x03\xc2I\x98\x15\xd1" +
	"\xcbr5\xab\x96\xb7F9\x88\xdf\xbet5w\xcb\x13" +
	";\xcf\xfb\xd2\xe4\xf3\x0e\xcd\xf7N\xbe\xb4\"{\xe6\x9e" +
	"wIS\x01;\xdc;\xff\xf7o\x9c\x9ay\xcf\xa59" +
	"\x14\xfd\x99\xfc\x81C3\x1d}\x8bZ\xf0\x85\x07\xc7\xd6" +
	"\x80<\x18\xfb\x9a\x9c\x8e\xddD$\x9f\x8e\xb1\xb5'\xaa" +
	"=\xba\xfb\xe3\x87\xe5\x81\xf8MD\xeb\xa7\xe3[!\x8b" +
	"\x09\x0e\xef}\x8f\xfd\xba\xe7T\xf4\xb3s\xa4&\xae\xc9" +
	"\x09-\xf1\xa4\xfc<[\xc9\x1d\x09\xce\x7f\xaf>\x16K" +
	"\xa0#\x89\xc3\xf2\xf9\x04\xcbx!\xf1\x16\xad\xb5\xf5j" +
	"\xf1\x93z\xb5\xd8#\xf2z\xb5R\xed\xdbi\xe4\xeb\xa6" +
	"\xd5\xb3\xdd,\xc0\x18\x02\xb4\x0e%\x10\xb3\xed\x00\x88\xd4" +
	"5\xf7\x12i\xb7)\xd06\x0b\xc4q\xd5N\x83\xbfn" +
	"\xea#\xd2\xeeR\xa0\xed\x12\xb0G,\xbd\x92\x1f7j" +
	"D\x84\x04aH\x01R~\xf1\x12\xf8cv\x8f^\x9a" +
	"0j>\xee\x95G\x03\xf7\x14)\x0dE\x9b*\xf9q" +
	"\xd3\xea\xa9\xd5M\xcbX5\xa4[z\x195-\xa0\x04" +
	"\x88\x1cU\xf1^\"\xadC\x81\x96\x16\xc88\xd4m\x94" +
	"\xa9\x16\xca\x05N\xe6\x8c\x87\x88]\x8cy\\\x03\xecK" +
	"\xbf\x02m\x9b\x00\xd0\xf0o\x90\xbfmV\xa0\x0d\x09\xa8" +
	"\x02i\x08\"\xf5s\xbc\xe9g\x14h\xf7\x0bd\xcd\xd1" +
	"\xd1\x9aQG\x88\x04B\xec\x9eC\x8e\x94\x7f\x0c\x0d\x11" +
	"\x99b\xa5`<\x8c\x0e\x12\xe8X\xd2\xcbI\xbd\xb4{" +
	"\xd5\xb0Q\x9b(\xd5\x17z\xd9\xe7{\x99\xd5\x1d[\xa8" +
	"~\x0a\x11\xa0.\xc99f6\x19k\xd4\xca\xd8\xed3" +
	"&\xab\x96\x99\x87\xea\x17|\x1b\x1f\\>Lq\xc06" +
	"{9!\x8f\xe3\xff\x89rG\xa1 w\x02\x02]\xb8" +
	"j\xa7\x9c\xb8\xc9W\xd1M\x94;\xc6\xc8IF\xc4\x15" +
	"\xbb\x11<\xf97g\xcd\x9f\x199\x05\x81\xb82o\xa7" +
	"\xa1\x10\xc9\xd7\xd1G\x94;\xc1\xc0i^\x12\xf8\x90\x97" +
	"\x04\x88\xe4?\x9c%'\x19y\x93\x97\x04/\xdbi\x04" +
	"\x89\xe4\x19\xdcK\x94;\xcd\xc0Y\x06B\x97\xec4B" +
	"D\xf2\x1dg\xfb7\x19\x98a\xae\xf0\x9c-\xd2N\xff" +
	"8\xe7 o32\xcbK:.\xdait\x10\xc9\x0b" +
	"\xce&g\x19\x98c`\xd9\x07v\x1a\xcb\x88\xe4\xfb\xb8" +
	"\x87(7\xc3\xc0<\x03\x91\xf7\xed4\"D\xf2\x92#" +
	"x\x16\x0a\x86\x85@<:k\xa7\x11%\x92W\x9c-" +
	"\xe6xA\x80\x81\xd8{v\x1a1\xee]\x82\x81y\x06" +
	":\x18\x88\xbfk\xa7\x11'\x92A\xd1G4,\x14\xe4" +
	"b\xfc=q\xc1N#A$\x97\x89a\xa2\\\x07\x03" +
	"i\x06\x923v\x1aI\x9e\x03b%Q.\xc6\xc0\xcd" +
	"\x0c\xa4\xce\xdbi\xa4\x88d\xa7\xb3E\x8a\x81\xff\x13\x02" +
	"\xe1J\xb1D\xa1\xe4\x88i\x96\x00\x12\x00!\\\xdc\xb8" +
	"\x01A\x12\x08\x12\xb2#\xc5\xb1\xc1J\x1dq\x12\x88\x13" +
	"\xc2\xa3\x1b7 J\x02Q\x82=R\x1c\xdbR2\xf5" +
	":\x17s\x8c\x04b\x84\xe4\xa8\xa5\xe7\x91\xf2\xbbQ#" +
	"\xb5\x93\xf9q\xddB\x80\x04\x02\x84p\xadn\xb9\xf6_" +
	"\xdamLM\x9aV\xc1\xfd\x9f\xadM\x95G\xcc\x92G" +
	"W\xd5\xeb\xe3\xde\x9fR\xb1VG\xca\x1f\x7f\x0d\xee%" +
	"\xeb\xc9\xde\xd3\xacb\xc2CH\xf93\xbd\x81*\xa3\x15" +
	"\xa4\xfc\x8e\xdc\xd4y\x83<o\xb6\x87m\xc5\xcan\xa3" +
	"\xb0\xadX\xabS{\x83\xe8]\xa4At/\xd6 \xba" +
	"\xfd\x06\x91\xc9\x9b\x13\x95\xba[\xf8\xc9qC/\\\xdb" +
	"\xa2\x92u\xbdX\xbaN\xe7ZX\xd2%S/4z" +
	"a\x8d\xe8z\xad\xc4\xb5Y\xb2\xf0[\x0e\xe0z{-" +
	"\xd6\x92\xfe\x97\xc6\xdb\xec C\x96b\xe69\xa4\x01%" +
	"H\xe4\x8do\xb87\x00U\xed&\xa1\x06\xc3\xc9I\xbd" +
	"X\xef\xc7\x10\x96\x14U[\xb4\xa7\xf1\x84\x8a)\xd0n" +
	"\x13\xb0\xf3\xe3\xc5R\xc12*\x0bf\x91w/\xf8\x08" +
	"\xb3\xc6\xd9@\xa9\xd7<\xa3\x90\xeb\x84\x99\xefa\x81\x9e" +
	"\x04\xd7\xa0\xbd\xedf\x1b\xe1_,\xf8\xab\x04\x92\xba5" +
	"\xf6\x11\xc6\xa0h\xdf\xb5\xc9\xdan\xd0\xdc671\x92" +
	"m\xfclK\xddn?u\xe3\xb0\xedk\x93\xb7K\\" +
	"\xb5\xdd\xf4\xed\xf3\xd3wa\x91Z\xa6Y\xa7\xd0\x8dG" +
	"\x90h?\xaev\xd5\xcd\x8c\xd8R\xc9\xf4l\x99\xa88" +
	"I\x91\xf2\xef\x1a:\x0bx@\x816\xdez\xd70\xf8" +
	"\xeb\x83\x0a\xb4\xbd\\j\xa9\x86\xd6)>\xf4\x87\x15h" +
	"\x8f\x0a\xa8\x0a\x9cQ\xa2>\xc2~\xedU\xa0=!\x90" +
	"\xad\x14K\xba5E\xa1l\xd5\x91\xe0\x86\x9c]\xe2@" +
	"\xef\xd1\xad\xa2^(\xe69Q\x9a-29b\x16\xa6" +
	"n|4\x9e\x0f\\`\x80\x7f]T\xd1\x9dd\xaf\xd8" +
	"\xa5f\xfc\xf5\xdeV\x8f\xecv\x8fJ\x02q\xc1~\xb2" +
	"KEV_P\xa0U[\\*3\xc1x\xc3\xcfL" +
	"Y\xcf[\xa6\xab6[\xd2\xcb#\x05\x9dB\xc9\x8a^" +
	"6\xdc\xa3\xca\x8cNT\xf2-\xf9\xe5\x89[\xdc\x89M" +
	"\x95$\x1f\x95\xe3\x87W%*\x86\xed\xdc\xc4\x88s\x8a" +
	"\x04KK;e\xeb^\x97\xe1\xde\xf9\xd5o\xad$\xa1" +
	"~%\x0cx\xaf\x0e\xb8\xcf&u\x8aK\xba\x1c\x86\xf0" +
	"\xde*p_\x1e\xaa\xce\xd8\x8e0\x14\xef\xcd\x06\xf7\x99" +
	"\xa0\x0e\xf6\x92P\xef\x0e\xc3\x7f\x05\xc0}i\xa9w\xf0" +
	"~\xab\xc3J\xa9\xd6\x8f$7\xba~$\xb9O\xf5#" +
	"\xe3\xd4n?\x941sa\xffp\xcf\xcaR\xf4|\xf3" +
	"b\xdb<\x995\x1c\xd8U\x0a\xb4u\x02\xaa\xdb\xd5\xd7" +
	"\xf66/\xbb\x1b\x042\x95\x89\xb2a\xb932S0" +
	"*f\xd9\xfd\xd7\xce\xbf\xd3H\xf2Tr\xc2\xe8]|" +
	"9\x1d\xb6\x9b\x05c\x89tP\x11hfC\xaf\x9f\x0d" +
	"\x10\xd7\xcb\x85\xee\x96\\X0^2\xb5\xf1\xe2\xa8w" +
	"\x19u\xca\xb5\xed\x0a\xee\x0d\x9b\xa5\xd2\xfb\xbf\x01\x00\x00" +
	"\xff\xff\xb0\xcc\xe5\x84"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806044540cfc08ec,
		0x8ef1ac844ec73672,
		0x9027d60a509d467c,
		0x95460e1858f85cf4,
		0x9fb80cccef72e8de,
		0xa177c8866f029c3c,
		0xa683121d7d12cdc6,
		0xa94cf75566fcc440,
		0xb1fcf692a8c62e19,
		0xb3012e36a35e0fb0,
		0xb561ad669b43cc65,
		0xc2241b810eb3f099,
		0xc54940df263f58ae,
		0xcf49dc7714f7eebd,
		0xd3451f471503cf21,
		0xd805d12cefe22b70,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf242e13f19c3d8a2,
		0xf3f0dc8fd7fc3207,
		0xf4acba02cd83d452,
		0xf84b0bdc2ebe874f,
		0xfbc39fed30ae733e)
}
