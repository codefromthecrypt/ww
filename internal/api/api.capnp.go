// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil     Value_Which = 0
	Value_Which_bool    Value_Which = 1
	Value_Which_char    Value_Which = 2
	Value_Which_str     Value_Which = 3
	Value_Which_keyword Value_Which = 4
	Value_Which_symbol  Value_Which = 5
	Value_Which_path    Value_Which = 6
	Value_Which_list    Value_Which = 7
	Value_Which_vector  Value_Which = 8
)

func (w Value_Which) String() string {
	const s = "nilboolcharstrkeywordsymbolpathlistvector"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_bool:
		return s[3:7]
	case Value_Which_char:
		return s[7:11]
	case Value_Which_str:
		return s[11:14]
	case Value_Which_keyword:
		return s[14:21]
	case Value_Which_symbol:
		return s[21:27]
	case Value_Which_path:
		return s[27:31]
	case Value_Which_list:
		return s[31:35]
	case Value_Which_vector:
		return s[35:41]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xba39aaea7d7bcba2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.RootPtr()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xba39aaea7d7bcba2, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Value) Char() int32 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(4))
}

func (s Value) SetChar(v int32) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint32(4, uint32(v))
}

func (s Value) Str() (string, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasStr() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetStr(v string) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetText(0, v)
}

func (s Value) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasKeyword() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetText(0, v)
}

func (s Value) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasSymbol() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Value) Path() (string, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasPath() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetPath(v string) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetText(0, v)
}

func (s Value) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Value) HasList() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Value) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Value) HasVector() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Value) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List struct{ capnp.List }

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Value_List{l}, err
}

func (s Value_List) At(i int) Value { return Value{s.List.Struct(i)} }

func (s Value_List) Set(i int, v Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Value_List) String() string {
	str, _ := text.MarshalList(0xba39aaea7d7bcba2, s.List)
	return str
}

// Value_Promise is a wrapper for a Value promised by a client call.
type Value_Promise struct{ *capnp.Pipeline }

func (p Value_Promise) Struct() (Value, error) {
	s, err := p.Pipeline.Struct()
	return Value{s}, err
}

func (p Value_Promise) List() LinkedList_Promise {
	return LinkedList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) Vector() Vector_Promise {
	return Vector_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Promise is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_SubAnchor_Promise) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xa683121d7d12cdc6

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.RootPtr()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xa683121d7d12cdc6, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetHead(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Value, error) {
	p, err := s.Struct.Ptr(1)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetTail(v Value) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xa683121d7d12cdc6, s.List)
	return str
}

// LinkedList_Promise is a wrapper for a LinkedList promised by a client call.
type LinkedList_Promise struct{ *capnp.Pipeline }

func (p LinkedList_Promise) Struct() (LinkedList, error) {
	s, err := p.Pipeline.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Promise) Head() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p LinkedList_Promise) Tail() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xfbc39fed30ae733e

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.RootPtr()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xfbc39fed30ae733e, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vector) SetTail(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xfbc39fed30ae733e, s.List)
	return str
}

// Vector_Promise is a wrapper for a Vector promised by a client call.
type Vector_Promise struct{ *capnp.Pipeline }

func (p Vector_Promise) Struct() (Vector, error) {
	s, err := p.Pipeline.Struct()
	return Vector{s}, err
}

func (p Vector_Promise) Root() Vector_Node_Promise {
	return Vector_Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x806044540cfc08ec

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.RootPtr()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x806044540cfc08ec, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Value_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetValues(v Value_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Value_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x806044540cfc08ec, s.List)
	return str
}

// Vector_Node_Promise is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Promise struct{ *capnp.Pipeline }

func (p Vector_Node_Promise) Struct() (Vector_Node, error) {
	s, err := p.Pipeline.Struct()
	return Vector_Node{s}, err
}

const schema_c8aa6d83e0c03a9d = "x\xda\x8cU]h\x1cU\x14>\xdf\xb93\xb3[\xd9" +
	"\xcd\xeet\xb6h-K\xa9\xa4\xd0\xae46\x8a\x0f\x06" +
	"\xed&\x92\x88JZr\xb3\xb5Th\xa1\x93\xdd\x91]" +
	"2\xd9Yvv\x1b\x8a\x14\x95\x08}\xf2E\x10\xf5A" +
	"\xc4>\x88\x06\x7f\x10\xdf\xfa$\x0aE\x94\xbe\x88\x08\xbe" +
	"\xa9/Ji\xb0\x85T\x934\xcd\x95\xbb\x93\xddI6" +
	"Z|\xdb9g\xee7\xf7\xfb\xce\xf9\xbe=z\x8cG" +
	"y\xd8\x9c\x17D\xf2\x90i\xa9\x1b\xc9\xf5\xd4\xc9\xf1s" +
	"\xaf\x92\xdc\x03\xa8c\xe1gG\x97\xde\xff\xe6\x0eM " +
	"\xc1D\xce\x07\xf8\xc1\xf9\x14\x09\"\xe7c\xcc\x13\xd4\xf2" +
	"\x99\x95\xd3\x0f\x0c<\xf3\x16\xd9{@d\xea\xcec\x87" +
	"y7\x08\xce0\x17\x09\xea\xea\xb5\xdd\x17\xf3\xbb\x17>" +
	"$9\x00\xa8\xf7F\xbe\xfaean\xf1[2Yc" +
	"H\xfe\xce9\xdb\xf9\xf5\"\x7fNP{\x87\xae~\xf4" +
	"\xe6_\xeb_lE\xbb\xc5\xf7i\xb4\xd5\x0e\xda\xe5\xef" +
	"_\xbex}\xf1\x89+}h\x13H\xec\"r\xf6\x8a" +
	"\xcb\xce\x01\xa1\x0f\xe5\x85\x02A\xbd{\xf3\xcb\x81\xd7\xf6" +
	"\x0d~\xbd\x15/o\xb2\xc6;`j\xbc#o\\\xfa" +
	"\xad\xf1\xd3\xc3\xd7#\xb2\xd3?.\\\xe3+\x9f,\xd3" +
	"\x04w\xc8\xbe`\xae9\xae\xa9\xafw\xd6\xd4\xd7{{" +
	"u\xa3\xb4\xef\x9dS\x7fFp\x86n\xdc6\xd7\xc8\x88" +
	"\x0f\xda\x03\"\xbe\x15\xc1\xf9\xd9\\t~5\xef'r" +
	"\x96\xccK\xceSV\x82(\x96\xf4\xdf\x149h-:" +
	"G,}\xe0q\xebw\x82r\x1b\xb5G\xdcFm\x88" +
	"\xcbn\xa3\xde\x189\xe5\x95[As\xe8DP\x817" +
	"\x05\xc8\xa40RJ\x19 \xb2\x0f?\xaf\x07( \xc7" +
	"\x19il\xa8\x1ctul\x84H>) O3\xd4" +
	"L\xd3\xad\x97\xab^HD\x18 L\x09 \x1b\xcf\x9b" +
	"\xa0\x8b\xc5\xf3\xae\xdf\xf6\xc2\xb8\xdf\x93<\xea\xf7n$" +
	"\xa2\x1b\x8d\xd5\xcb\xd5\xa094\xef\xfa\xb3\x83\xd3^\xd8" +
	"\xf6[\x08\xa5!\x0c\xa2\xce\xad\xd2\xfa\xfbI\x01\x99c" +
	"\x14\xdd\xce\xbb\xb0c\xbd\x08\xb0w\xb2\x9c\xac\xd5g\xbd" +
	"\xcad-l\x11i\x96\xa9\x1e\xdc\xc4\xa3DrT@" +
	"N2\x80\x88\xe2s\x05\"9. \xa7\x186#\x07" +
	"&\xb2\x8f\xeb\xe2\xb3\x02\xf2$c\x7f9h\xd7[H" +
	"\x12#I\xc8T=\xb7\xd2\xc7+K\xc8\xb4\xdc\x9a\xbf" +
	"\xb3|/\xbaSn\xd3\x9d\x0b\x89\xb6\xd2-\xc4t3" +
	"\x0d\xb7UE\x8a\x18\xa9-8\xd8\x1c\xa4\x9b\xf0\xdb\x9d" +
	"\x11\x0e\xc6#\\z\x88H\xfe! \x97\x19yl\xa8" +
	"lD\xf0\x96\x06\xbd! W\x18y\xbe\xab6)\xde" +
	"\xd6\xe5\x9b\x02r\x9d\x91\x16\xeb*\x07Ad\xafj\x8c" +
	"e\x81i0\xd2\xc6\x1d\x95\x83Ad\xdf}\x9aH\xae" +
	"\x08\x94\x0c]6\xd7T\x0e&\x91\x03\xe8\xf1\xac\x0b\x94" +
	"\x92\xban\xad\xaa\x1c,\"\xc7D\x81h\x1a\x02\xa5\x94" +
	"\xae'VT\xae\xe3\xf9]\xba^2t#\xab\x1b\xc9" +
	"\xbfU\x0eI\"'\xad\x81JI\xdd\xc8\x81\x91\xa8\xd7" +
	"|\xb223A\xe0\x03\xc4\x00!S\xae\xbaM\x18\xc4" +
	"0\x08\x89\xb0\xd5\xec*\xf3\xca\xacwa>hV\xba" +
	"\xcf\xc5\xf0\xc2\xdcL\xe0w\x1f\xb7\xa9\x98\xf1ka\x0b" +
	"\xd98T\xa2!\x15\xcfwl\x81l\xec\xad{N\xcf" +
	"\x0f7W5\xdc6;m\xa0\x94\x80<\xc4P\xe5j" +
	"\xcd\xaf4\xbd\xfa6\xab\xf4\xd2\xa2\xcf\x0a\xbc\x0d\xbd\xd4" +
	"\x9e)F?\xfbv\xb7\x10\xefn\x1aJ\xed\xdc\xde<" +
	"ot\x87{|$\xde\xdf\xed\x124\x83\xa0E\xd6\xff" +
	"\xf6RL\xb9\x18\xedk\xff&\x8e\xd53\xfa\x0di`" +
	"K\x1c\xda\x98V\xa5\xf6L\xe70\xa1)\x93\xc2$\xea" +
	"\xe5\x1f\xba\xb9j\x0f?Hl\x1fL \x8ent\xff" +
	"\x11\xec\xbd\x05b;\x9d\x10~8\x8a\x8c6\xcc(\xa6" +
	"\xb0\xd3\x08^F\xcf\xae\xf3\xf9^\x14\xd9(dN\x04" +
	"\x15Of{\xea\xb9\xda\xf9g\x04d\x95a\xc3\x88\xc4" +
	"\xf3t\xf1\x9c\x80\xf4\x19\xe0H\xb9\x9a\x16\xb4\" \x1b" +
	"\x0c[ r\xc5\x9c.V\x05\xe4\xeb\xfdq\xb0?\xac" +
	"\xd6^j\xc1\"\x86\xb5\xa9n_(\xf6\xc2\xe1\xbf\"" +
	"\xf1\x9f\x00\x00\x00\xff\xff-\xef\xd5\xd8"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806044540cfc08ec,
		0x95460e1858f85cf4,
		0xa683121d7d12cdc6,
		0xb1fcf692a8c62e19,
		0xba39aaea7d7bcba2,
		0xc2241b810eb3f099,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf4acba02cd83d452,
		0xfbc39fed30ae733e)
}
