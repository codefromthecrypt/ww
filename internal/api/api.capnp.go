// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil      Value_Which = 0
	Value_Which_bool     Value_Which = 1
	Value_Which_i64      Value_Which = 2
	Value_Which_bigInt   Value_Which = 3
	Value_Which_f64      Value_Which = 4
	Value_Which_bigFloat Value_Which = 5
	Value_Which_frac     Value_Which = 6
	Value_Which_char     Value_Which = 7
	Value_Which_str      Value_Which = 8
	Value_Which_keyword  Value_Which = 9
	Value_Which_symbol   Value_Which = 10
	Value_Which_path     Value_Which = 11
	Value_Which_list     Value_Which = 12
	Value_Which_vector   Value_Which = 13
)

func (w Value_Which) String() string {
	const s = "nilbooli64bigIntf64bigFloatfraccharstrkeywordsymbolpathlistvector"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_bool:
		return s[3:7]
	case Value_Which_i64:
		return s[7:10]
	case Value_Which_bigInt:
		return s[10:16]
	case Value_Which_f64:
		return s[16:19]
	case Value_Which_bigFloat:
		return s[19:27]
	case Value_Which_frac:
		return s[27:31]
	case Value_Which_char:
		return s[31:35]
	case Value_Which_str:
		return s[35:38]
	case Value_Which_keyword:
		return s[38:45]
	case Value_Which_symbol:
		return s[45:51]
	case Value_Which_path:
		return s[51:55]
	case Value_Which_list:
		return s[55:59]
	case Value_Which_vector:
		return s[59:65]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xba39aaea7d7bcba2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.RootPtr()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xba39aaea7d7bcba2, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Value) I64() int64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != i64")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Value) SetI64(v int64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Value) BigInt() ([]byte, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != bigInt")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Value) HasBigInt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetBigInt(v []byte) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetData(0, v)
}

func (s Value) F64() float64 {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != f64")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Value) SetF64(v float64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Value) BigFloat() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != bigFloat")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasBigFloat() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) BigFloatBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetBigFloat(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Value) Frac() (Frac, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != frac")
	}
	p, err := s.Struct.Ptr(0)
	return Frac{Struct: p.Struct()}, err
}

func (s Value) HasFrac() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetFrac(v Frac) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrac sets the frac field to a newly
// allocated Frac struct, preferring placement in s's segment.
func (s Value) NewFrac() (Frac, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewFrac(s.Struct.Segment())
	if err != nil {
		return Frac{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Char() int32 {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(8))
}

func (s Value) SetChar(v int32) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Value) Str() (string, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasStr() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetStr(v string) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetText(0, v)
}

func (s Value) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasKeyword() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetText(0, v)
}

func (s Value) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasSymbol() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetText(0, v)
}

func (s Value) Path() (string, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasPath() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetPath(v string) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetText(0, v)
}

func (s Value) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Value) HasList() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Value) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Value) HasVector() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Value) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List struct{ capnp.List }

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Value_List{l}, err
}

func (s Value_List) At(i int) Value { return Value{s.List.Struct(i)} }

func (s Value_List) Set(i int, v Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Value_List) String() string {
	str, _ := text.MarshalList(0xba39aaea7d7bcba2, s.List)
	return str
}

// Value_Promise is a wrapper for a Value promised by a client call.
type Value_Promise struct{ *capnp.Pipeline }

func (p Value_Promise) Struct() (Value, error) {
	s, err := p.Pipeline.Struct()
	return Value{s}, err
}

func (p Value_Promise) Frac() Frac_Promise {
	return Frac_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) List() LinkedList_Promise {
	return LinkedList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) Vector() Vector_Promise {
	return Vector_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Load(ctx context.Context, params func(Anchor_load_Params) error, opts ...capnp.CallOption) Anchor_load_Results_Promise {
	if c.Client == nil {
		return Anchor_load_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_load_Params{Struct: s}) }
	}
	return Anchor_load_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Store(ctx context.Context, params func(Anchor_store_Params) error, opts ...capnp.CallOption) Anchor_store_Results_Promise {
	if c.Client == nil {
		return Anchor_store_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_store_Params{Struct: s}) }
	}
	return Anchor_store_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error

	Load(Anchor_load) error

	Store(Anchor_store) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_load{c, opts, Anchor_load_Params{Struct: p}, Anchor_load_Results{Struct: r}}
			return s.Load(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_store{c, opts, Anchor_store_Params{Struct: p}, Anchor_store_Results{Struct: r}}
			return s.Store(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

// Anchor_load holds the arguments for a server call to Anchor.load.
type Anchor_load struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_load_Params
	Results Anchor_load_Results
}

// Anchor_store holds the arguments for a server call to Anchor.store.
type Anchor_store struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_store_Params
	Results Anchor_store_Results
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Promise is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_SubAnchor_Promise) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Anchor_load_Params struct{ capnp.Struct }

// Anchor_load_Params_TypeID is the unique identifier for the type Anchor_load_Params.
const Anchor_load_Params_TypeID = 0xa94cf75566fcc440

func NewAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func NewRootAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func ReadRootAnchor_load_Params(msg *capnp.Message) (Anchor_load_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_load_Params{root.Struct()}, err
}

func (s Anchor_load_Params) String() string {
	str, _ := text.Marshal(0xa94cf75566fcc440, s.Struct)
	return str
}

// Anchor_load_Params_List is a list of Anchor_load_Params.
type Anchor_load_Params_List struct{ capnp.List }

// NewAnchor_load_Params creates a new list of Anchor_load_Params.
func NewAnchor_load_Params_List(s *capnp.Segment, sz int32) (Anchor_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_load_Params_List{l}, err
}

func (s Anchor_load_Params_List) At(i int) Anchor_load_Params {
	return Anchor_load_Params{s.List.Struct(i)}
}

func (s Anchor_load_Params_List) Set(i int, v Anchor_load_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Params_List) String() string {
	str, _ := text.MarshalList(0xa94cf75566fcc440, s.List)
	return str
}

// Anchor_load_Params_Promise is a wrapper for a Anchor_load_Params promised by a client call.
type Anchor_load_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_load_Params_Promise) Struct() (Anchor_load_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_load_Params{s}, err
}

type Anchor_load_Results struct{ capnp.Struct }

// Anchor_load_Results_TypeID is the unique identifier for the type Anchor_load_Results.
const Anchor_load_Results_TypeID = 0xb3012e36a35e0fb0

func NewAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func NewRootAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func ReadRootAnchor_load_Results(msg *capnp.Message) (Anchor_load_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_load_Results{root.Struct()}, err
}

func (s Anchor_load_Results) String() string {
	str, _ := text.Marshal(0xb3012e36a35e0fb0, s.Struct)
	return str
}

func (s Anchor_load_Results) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_load_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_load_Results) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_load_Results) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_load_Results_List is a list of Anchor_load_Results.
type Anchor_load_Results_List struct{ capnp.List }

// NewAnchor_load_Results creates a new list of Anchor_load_Results.
func NewAnchor_load_Results_List(s *capnp.Segment, sz int32) (Anchor_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_load_Results_List{l}, err
}

func (s Anchor_load_Results_List) At(i int) Anchor_load_Results {
	return Anchor_load_Results{s.List.Struct(i)}
}

func (s Anchor_load_Results_List) Set(i int, v Anchor_load_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Results_List) String() string {
	str, _ := text.MarshalList(0xb3012e36a35e0fb0, s.List)
	return str
}

// Anchor_load_Results_Promise is a wrapper for a Anchor_load_Results promised by a client call.
type Anchor_load_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_load_Results_Promise) Struct() (Anchor_load_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_load_Results{s}, err
}

func (p Anchor_load_Results_Promise) Value() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_store_Params struct{ capnp.Struct }

// Anchor_store_Params_TypeID is the unique identifier for the type Anchor_store_Params.
const Anchor_store_Params_TypeID = 0x8ef1ac844ec73672

func NewAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func NewRootAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func ReadRootAnchor_store_Params(msg *capnp.Message) (Anchor_store_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_store_Params{root.Struct()}, err
}

func (s Anchor_store_Params) String() string {
	str, _ := text.Marshal(0x8ef1ac844ec73672, s.Struct)
	return str
}

func (s Anchor_store_Params) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_store_Params) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_store_Params) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_store_Params) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_store_Params_List is a list of Anchor_store_Params.
type Anchor_store_Params_List struct{ capnp.List }

// NewAnchor_store_Params creates a new list of Anchor_store_Params.
func NewAnchor_store_Params_List(s *capnp.Segment, sz int32) (Anchor_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_store_Params_List{l}, err
}

func (s Anchor_store_Params_List) At(i int) Anchor_store_Params {
	return Anchor_store_Params{s.List.Struct(i)}
}

func (s Anchor_store_Params_List) Set(i int, v Anchor_store_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Params_List) String() string {
	str, _ := text.MarshalList(0x8ef1ac844ec73672, s.List)
	return str
}

// Anchor_store_Params_Promise is a wrapper for a Anchor_store_Params promised by a client call.
type Anchor_store_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_store_Params_Promise) Struct() (Anchor_store_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_store_Params{s}, err
}

func (p Anchor_store_Params_Promise) Value() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_store_Results struct{ capnp.Struct }

// Anchor_store_Results_TypeID is the unique identifier for the type Anchor_store_Results.
const Anchor_store_Results_TypeID = 0xc54940df263f58ae

func NewAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func NewRootAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func ReadRootAnchor_store_Results(msg *capnp.Message) (Anchor_store_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_store_Results{root.Struct()}, err
}

func (s Anchor_store_Results) String() string {
	str, _ := text.Marshal(0xc54940df263f58ae, s.Struct)
	return str
}

// Anchor_store_Results_List is a list of Anchor_store_Results.
type Anchor_store_Results_List struct{ capnp.List }

// NewAnchor_store_Results creates a new list of Anchor_store_Results.
func NewAnchor_store_Results_List(s *capnp.Segment, sz int32) (Anchor_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_store_Results_List{l}, err
}

func (s Anchor_store_Results_List) At(i int) Anchor_store_Results {
	return Anchor_store_Results{s.List.Struct(i)}
}

func (s Anchor_store_Results_List) Set(i int, v Anchor_store_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Results_List) String() string {
	str, _ := text.MarshalList(0xc54940df263f58ae, s.List)
	return str
}

// Anchor_store_Results_Promise is a wrapper for a Anchor_store_Results promised by a client call.
type Anchor_store_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_store_Results_Promise) Struct() (Anchor_store_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_store_Results{s}, err
}

type Frac struct{ capnp.Struct }

// Frac_TypeID is the unique identifier for the type Frac.
const Frac_TypeID = 0xf84b0bdc2ebe874f

func NewFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func NewRootFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func ReadRootFrac(msg *capnp.Message) (Frac, error) {
	root, err := msg.RootPtr()
	return Frac{root.Struct()}, err
}

func (s Frac) String() string {
	str, _ := text.Marshal(0xf84b0bdc2ebe874f, s.Struct)
	return str
}

func (s Frac) Numer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Frac) HasNumer() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Frac) SetNumer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Frac) Denom() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Frac) HasDenom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Frac) SetDenom(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Frac_List is a list of Frac.
type Frac_List struct{ capnp.List }

// NewFrac creates a new list of Frac.
func NewFrac_List(s *capnp.Segment, sz int32) (Frac_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Frac_List{l}, err
}

func (s Frac_List) At(i int) Frac { return Frac{s.List.Struct(i)} }

func (s Frac_List) Set(i int, v Frac) error { return s.List.SetStruct(i, v.Struct) }

func (s Frac_List) String() string {
	str, _ := text.MarshalList(0xf84b0bdc2ebe874f, s.List)
	return str
}

// Frac_Promise is a wrapper for a Frac promised by a client call.
type Frac_Promise struct{ *capnp.Pipeline }

func (p Frac_Promise) Struct() (Frac, error) {
	s, err := p.Pipeline.Struct()
	return Frac{s}, err
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xa683121d7d12cdc6

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.RootPtr()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xa683121d7d12cdc6, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetHead(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Value, error) {
	p, err := s.Struct.Ptr(1)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetTail(v Value) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xa683121d7d12cdc6, s.List)
	return str
}

// LinkedList_Promise is a wrapper for a LinkedList promised by a client call.
type LinkedList_Promise struct{ *capnp.Pipeline }

func (p LinkedList_Promise) Struct() (LinkedList, error) {
	s, err := p.Pipeline.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Promise) Head() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p LinkedList_Promise) Tail() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xfbc39fed30ae733e

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.RootPtr()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xfbc39fed30ae733e, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vector) SetTail(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xfbc39fed30ae733e, s.List)
	return str
}

// Vector_Promise is a wrapper for a Vector promised by a client call.
type Vector_Promise struct{ *capnp.Pipeline }

func (p Vector_Promise) Struct() (Vector, error) {
	s, err := p.Pipeline.Struct()
	return Vector{s}, err
}

func (p Vector_Promise) Root() Vector_Node_Promise {
	return Vector_Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x806044540cfc08ec

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.RootPtr()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x806044540cfc08ec, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Value_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetValues(v Value_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Value_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x806044540cfc08ec, s.List)
	return str
}

// Vector_Node_Promise is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Promise struct{ *capnp.Pipeline }

func (p Vector_Node_Promise) Struct() (Vector_Node, error) {
	s, err := p.Pipeline.Struct()
	return Vector_Node{s}, err
}

const schema_c8aa6d83e0c03a9d = "x\xda\x94VmhTW\x1a~\x9fs\xee\xe4N\xcc" +
	"Lf\xaew\xc4U\x09a\x97\xb0hv\x13\xbf\xc3n" +
	"Xv&\x8b\x91\xd5\x8dn\xae\xa3\xe2\x82\xbbx3s" +
	"\xe3\x0cNf\xb2s'ZiC\x15S\xac\xa0EJ" +
	"\xa5Z\x94Zk\x8b\x86\xd4*\xf6G\xeb\x8fR\xfaa" +
	"K\x8b\x7fJ\xe9\xaf\x96\x96B)HK\xbf\xfc6\xcd" +
	")\xef\x9d\x8f\x9b\x0f\x15\xfbo\xe6<\xefy\xde\xf7<" +
	"\xe7=\xcf{\x97\xfcY&\xc4\xd2\xc0\xe2\x00\x91\xf5\xb7" +
	"@\x9d\xfa68\x1e\xda\xb8j\xdb\x1e\xb2\xe6\x00\xea\xef" +
	"\xee\xb9%\xdf=\xff\xce]\xea\x86.\x88\xcca\xf1\xb1" +
	"y@\xe8D\xe6\x13b\x17A\x15;\xde_?2\xf6" +
	"\xe3Sd\xcc\x01Q\x00:\xd1\xf2\x80\x9c\x0d\x82\x19\x96" +
	"q\x82\xba\xb6\xf5\xd6\x96\xdf5\xae>29\xa0\xad\x1c" +
	"\xb0\xd2\x0b\xb8|e\xf6p\xd3\xec}/\x93\xd5\x08\xa8" +
	"\x13\x9do}\xb9o`\xf4\x03\x0axI6\xc9\x0fM" +
	"[\xf2\xaf\xff\xcaW\x09*\xf1\xeex\xff\xa6\x9b=g" +
	"\xcbl\x1a\x93]\x97\xb3@\x9a\x9a\xd7~\xf9\xcc\xd37" +
	"\xc6/L\xce\xf39C0\xbf\xf6\xf2\x9c\x8f\xfc\xef\xc5" +
	"\x8ev\\\x9cR\xa9V\xaeT\xe3\x80S\x1f=:|" +
	"u\xf4\xaf\x97\xb8\x10\xe1\x17\xd2\x0d\xbd\x91\xc8l\xd3N" +
	"\x99+\xbd\x84K\xb5\xb9\x92\xa0\x8e\xfdp\xb1q\xef\x82" +
	"\x96\xb7'\xf3\xd9\xba`>Gg\xbes[\xe2\x7f\xfc" +
	"\"\xb1\xe6\xbdI\xb5\x1e\xd3\xe7s\xadm\x87\xf6\x7f5" +
	"\xf8\xe9\x9f\xae\x96%\xde\xf0\xc9\xbe+\xe2\xd2\xd85\xea" +
	"\x16\x9e\xc4{\xf5;\xe6!\x9d\xcf|@\xe73?{" +
	"{\"\xb9\xe0\xe8\xe6\xef}\x1e\xf3\xf7\xc1;\xa4\xf9\x1b" +
	"\x8dF\xe9\xd7K0\x03\xc1Q3\x1c\x9cK\xb4|^" +
	"P\x87\xf9FP'R\xff\xde\xfff\xfbg\x0d\xff\xba" +
	"EF\xe3\x0c\x99_\x08>g\x9e\xe5(\xf3\xa5 \xdf" +
	"j\xed\xd6\xefu'\xa8\x1f5\xeb\xeb\xe7\x12\x99F\xfd" +
	"7\x04e\x0ff\x17\xdb\x83\xd9v\x91\xb2\x07\xf3\x83\x9d" +
	"\x9b\x9dT\xa9Pl__H\xc3\xe9\x05\xac\xa0\xd4B" +
	"Ji 2\x16\xad%\xb2\x16JX\xab\x04\xc2\x98P" +
	"1\xf0jW'w\x9e\x84\xb5E@\xf5\x15\xed|*" +
	"\xe3\xb8D\x84FB\xaf\x04\xa2~K\x12x1\xbe\xd3" +
	"\xce\x0d9\xae\x8f\xd7n\xae\x8c\xd7*\x92\xe5\x8a\xba\xf2" +
	"\xa9L\xa1\xd8\xee\x96\x0aE\xa7\xa5\xd7.\xda\x03p-" +
	"MjD^U\xe1eDVP\xc2\x8a\x094{\xd4" +
	"\xd3(\xa3\xf7\xa5\xdce\xe7v\xb4lp\xdc\xa1\\i" +
	"*e\xa7O\x19\xb7\xbdX\x18\xfe}\x11`\xcc\x14\xae" +
	"'\x9b\xdf\xe1\xa4{\xb2n\x89\x88\x85\x0b\xd5\xe8\xba\xb9" +
	"\xc2\x84\x84\xd5#\x00\x94U[\xd3Jd\xad\x92\xb0z" +
	"\x05\x0c\x81\x18\x04\x91\xb1\x8e\x17\xff)am\x14hN" +
	"\x15\x86\xf2%\x04I H\x88d\x1c;=\xf3\\\x91" +
	"\x92\x9d\xcd=\xf4qs\x05;]\x16\xd0%z\x90$" +
	"\xd5\x98\xc9\x92\xb4\xfa\x92D\x06\xedR\x06!\x12\x08=" +
	"8\xd7\xbd\xa4\xfd-\xb7\x85JK\xdazn\xc8k\xc6" +
	"\xbf\xd4\x9a\xd1\xdc\x8d?\x10%K\x90H\xee\x81@\x13" +
	"&T\xd4\x93\xd6\x1cF+Q\xf2\x11FF\x18\x11\xbf" +
	"\xa8\xb2\xbe\xe6^o\xcfc\x8c<\x09\x81\xb0\x1cW1" +
	"H6Ct\x12%\xf70p\x90\xb7hwy\x8b\xc6" +
	"o\xd8\xdb2\xc2\xc8a\xde\x12\xb8\xa3b\x08\x10\x99\x87" +
	"\xb0\x96(y\x90\x81\xa3\x0c\xd4\xddV1\xd4\x11\x99G" +
	"\xbc\xf4\x87\x198\xce\\\xfa-%bl/\xe61\x0f" +
	"y\x86\x91\x93\xbc%xS\xc5\x10$2OxI\x8e" +
	"2p\x9a\x81\xfa\x1b*\x86z~\xd8\xf8\x07Q\xf28" +
	"\x03g\x18\x98u]\xc50\x8b\xdf\xb9W\xf0I\x06\xc6" +
	"\x18h\xb8\xa6bh 2\xcfz9N3p\x9e\x81" +
	"\xd0\xcf*\x86\x10\x91\xf9\x8a\x07\x9ca\xe05\x06\xc2?" +
	"\xa9\x18\xc2D\xe6\x05\x8fj\x8c\x81\xd7!\xa0\xe7\xb39" +
	"\xaa\x8b\xf4\x15\x0a9\x80\x04@\xd0\xb3\x1d+\x10 \x81" +
	"\x00!\xde\x97\xdd\xbe&_B\x98\x04\xc2\x04\xbd\xbfc" +
	"\x05\x1aH\xa0\x81\xa0\xfa\xb2\xdbW\xe7\x0av\x89\x1f\x7f" +
	"\xa5;\"\xfdE;\x85\xa8\xef^\x95\xbeMe\xec\"" +
	"4\x12\xd0\x08\xba[*V\xe3\x1f\xdf\xe1\xec\xdeU(" +
	"\xa6\xab\xff\xe3\xee\xee\x81\xbeB\xaeF7\xb9\xf3\"\xb9" +
	"\xac[B\xd4\x9f@e\xee\xf8N\xcf\xc1\x10\xf5m\xf0" +
	"\xc1\xaf\xc2\xad\xf4\xa9;\xa5\xdf\xd9\xebB\x12\xd6B\x01" +
	"\x95\xcads\xe9\xa2\x93\x9f\xe2j\xb5)\xf0\x10\xae\xe5" +
	"%\x90%w\xbagT\x82\x92C}\xf1\xf2\xcfi\xc6" +
	"\xd1\xea\x1bG\x18J\xcd\xb4\x8e&1\xa1\xaa\xe6\xd1\xe9" +
	"\x9b\xc7T\x9d\x8a\x85B\x89\xea\x1e\xda\xc8|]\xe2e" +
	"#\x98\xfe\x1e\xbb\xf2\x11\x8e\xb04\xc0W\xc1\xc0\x06\x95" +
	"\x1c\xea\xf36\x13\x8aVT\x06\x88j\xc3\x0f\xd5qk" +
	"\xfc\x7f>\x09\xc3\xd1\x81\xda\xc8G\xf5\x1b\xc3\xf8O+" +
	"\x09c\x9d\x0eQ\xfbP@u\xec\x1b]\x8c\xad\xd4!" +
	"k\xdf,\xa8Nhc\xd12\x12F\x93.sn\x02" +
	"\x11v\xb0\x04\"l@\x094{\xfa'\xd0\x8b\x19\xae" +
	"\xb2\xba(\xedTe\xc2U\xf4^\xc4\xe6\xd4\"a-" +
	"\x110\xaaN\xdd\xb6\xac2\xf5V\x084\xe7\x87\x06\x9c" +
	"b\xb5\xf9\x9b\xd3N\xbe0P\xfd7\xc3\xb5\x9c\x08\xf7" +
	"\xa1\xa7Rm\x02\x1ah\x8d\xac/\xa4\x1d+ZKj" +
	"3\xffV\x09+\xc3I\xb5rR\x87\x17\xb7IX9" +
	"\x01\x88\xf2\x05g\xf9\xde\xd3\x12\xd6\xa0\x80!\xe19\x97" +
	"1\xc0\x8b\x19\x09kd\xfa\xc8hv3\xd9\xfe\x12\xea" +
	"H\xa0\xae\xd2\x04\xd3fqm\x80\xdco\x12\xff\x1a\x00" +
	"\x00\xff\xff\xe5\xea\x94<"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806044540cfc08ec,
		0x8ef1ac844ec73672,
		0x95460e1858f85cf4,
		0xa683121d7d12cdc6,
		0xa94cf75566fcc440,
		0xb1fcf692a8c62e19,
		0xb3012e36a35e0fb0,
		0xba39aaea7d7bcba2,
		0xc2241b810eb3f099,
		0xc54940df263f58ae,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf4acba02cd83d452,
		0xf84b0bdc2ebe874f,
		0xfbc39fed30ae733e)
}
