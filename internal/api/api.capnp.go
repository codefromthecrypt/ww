// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil       Value_Which = 0
	Value_Which_bool      Value_Which = 1
	Value_Which_i64       Value_Which = 2
	Value_Which_bigInt    Value_Which = 3
	Value_Which_f64       Value_Which = 4
	Value_Which_bigFloat  Value_Which = 5
	Value_Which_frac      Value_Which = 6
	Value_Which_char      Value_Which = 7
	Value_Which_str       Value_Which = 8
	Value_Which_keyword   Value_Which = 9
	Value_Which_symbol    Value_Which = 10
	Value_Which_path      Value_Which = 11
	Value_Which_list      Value_Which = 12
	Value_Which_vector    Value_Which = 13
	Value_Which_vectorSeq Value_Which = 14
	Value_Which_fn        Value_Which = 15
	Value_Which_proc      Value_Which = 16
)

func (w Value_Which) String() string {
	const s = "nilbooli64bigIntf64bigFloatfraccharstrkeywordsymbolpathlistvectorvectorSeqfnproc"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_bool:
		return s[3:7]
	case Value_Which_i64:
		return s[7:10]
	case Value_Which_bigInt:
		return s[10:16]
	case Value_Which_f64:
		return s[16:19]
	case Value_Which_bigFloat:
		return s[19:27]
	case Value_Which_frac:
		return s[27:31]
	case Value_Which_char:
		return s[31:35]
	case Value_Which_str:
		return s[35:38]
	case Value_Which_keyword:
		return s[38:45]
	case Value_Which_symbol:
		return s[45:51]
	case Value_Which_path:
		return s[51:55]
	case Value_Which_list:
		return s[55:59]
	case Value_Which_vector:
		return s[59:65]
	case Value_Which_vectorSeq:
		return s[65:74]
	case Value_Which_fn:
		return s[74:76]
	case Value_Which_proc:
		return s[76:80]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xba39aaea7d7bcba2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xba39aaea7d7bcba2, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Value) I64() int64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != i64")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Value) SetI64(v int64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Value) BigInt() ([]byte, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != bigInt")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Value) HasBigInt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetBigInt(v []byte) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetData(0, v)
}

func (s Value) F64() float64 {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != f64")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Value) SetF64(v float64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Value) BigFloat() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != bigFloat")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasBigFloat() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) BigFloatBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetBigFloat(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Value) Frac() (Frac, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != frac")
	}
	p, err := s.Struct.Ptr(0)
	return Frac{Struct: p.Struct()}, err
}

func (s Value) HasFrac() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetFrac(v Frac) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrac sets the frac field to a newly
// allocated Frac struct, preferring placement in s's segment.
func (s Value) NewFrac() (Frac, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewFrac(s.Struct.Segment())
	if err != nil {
		return Frac{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Char() int32 {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(8))
}

func (s Value) SetChar(v int32) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Value) Str() (string, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasStr() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetStr(v string) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetText(0, v)
}

func (s Value) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasKeyword() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetText(0, v)
}

func (s Value) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasSymbol() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetText(0, v)
}

func (s Value) Path() (string, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasPath() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetPath(v string) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetText(0, v)
}

func (s Value) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Value) HasList() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Value) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Value) HasVector() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Value) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) VectorSeq() (VectorSeq, error) {
	if s.Struct.Uint16(0) != 14 {
		panic("Which() != vectorSeq")
	}
	p, err := s.Struct.Ptr(0)
	return VectorSeq{Struct: p.Struct()}, err
}

func (s Value) HasVectorSeq() bool {
	if s.Struct.Uint16(0) != 14 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetVectorSeq(v VectorSeq) error {
	s.Struct.SetUint16(0, 14)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVectorSeq sets the vectorSeq field to a newly
// allocated VectorSeq struct, preferring placement in s's segment.
func (s Value) NewVectorSeq() (VectorSeq, error) {
	s.Struct.SetUint16(0, 14)
	ss, err := NewVectorSeq(s.Struct.Segment())
	if err != nil {
		return VectorSeq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Fn() (Fn, error) {
	if s.Struct.Uint16(0) != 15 {
		panic("Which() != fn")
	}
	p, err := s.Struct.Ptr(0)
	return Fn{Struct: p.Struct()}, err
}

func (s Value) HasFn() bool {
	if s.Struct.Uint16(0) != 15 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetFn(v Fn) error {
	s.Struct.SetUint16(0, 15)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFn sets the fn field to a newly
// allocated Fn struct, preferring placement in s's segment.
func (s Value) NewFn() (Fn, error) {
	s.Struct.SetUint16(0, 15)
	ss, err := NewFn(s.Struct.Segment())
	if err != nil {
		return Fn{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Proc() Proc {
	if s.Struct.Uint16(0) != 16 {
		panic("Which() != proc")
	}
	p, _ := s.Struct.Ptr(0)
	return Proc{Client: p.Interface().Client()}
}

func (s Value) HasProc() bool {
	if s.Struct.Uint16(0) != 16 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetProc(v Proc) error {
	s.Struct.SetUint16(0, 16)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Value_List is a list of Value.
type Value_List struct{ capnp.List }

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Value_List{l}, err
}

func (s Value_List) At(i int) Value { return Value{s.List.Struct(i)} }

func (s Value_List) Set(i int, v Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Value_List) String() string {
	str, _ := text.MarshalList(0xba39aaea7d7bcba2, s.List)
	return str
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (p Value_Future) Struct() (Value, error) {
	s, err := p.Future.Struct()
	return Value{s}, err
}

func (p Value_Future) Frac() Frac_Future {
	return Frac_Future{Future: p.Future.Field(0, nil)}
}

func (p Value_Future) List() LinkedList_Future {
	return LinkedList_Future{Future: p.Future.Field(0, nil)}
}

func (p Value_Future) Vector() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

func (p Value_Future) VectorSeq() VectorSeq_Future {
	return VectorSeq_Future{Future: p.Future.Field(0, nil)}
}

func (p Value_Future) Fn() Fn_Future {
	return Fn_Future{Future: p.Future.Field(0, nil)}
}

func (p Value_Future) Proc() Proc {
	return Proc{Client: p.Future.Field(0, nil).Client()}
}

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Load(ctx context.Context, params func(Anchor_load_Params) error) (Anchor_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_load_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Store(ctx context.Context, params func(Anchor_store_Params) error) (Anchor_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_store_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Go(ctx context.Context, params func(Anchor_go_Params) error) (Anchor_go_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_go_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_go_Results_Future{Future: ans.Future()}, release
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error

	Load(context.Context, Anchor_load) error

	Store(context.Context, Anchor_store) error

	Go(context.Context, Anchor_go) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Anchor_load{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Anchor_store{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Go(ctx, Anchor_go{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

// Anchor_load holds the state for a server call to Anchor.load.
// See server.Call for documentation.
type Anchor_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_load) Args() Anchor_load_Params {
	return Anchor_load_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_load) AllocResults() (Anchor_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{Struct: r}, err
}

// Anchor_store holds the state for a server call to Anchor.store.
// See server.Call for documentation.
type Anchor_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_store) Args() Anchor_store_Params {
	return Anchor_store_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_store) AllocResults() (Anchor_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{Struct: r}, err
}

// Anchor_go holds the state for a server call to Anchor.go.
// See server.Call for documentation.
type Anchor_go struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_go) Args() Anchor_go_Params {
	return Anchor_go_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_go) AllocResults() (Anchor_go_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{Struct: r}, err
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.Root()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Future is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Future struct{ *capnp.Future }

func (p Anchor_SubAnchor_Future) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Future.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Anchor_load_Params struct{ capnp.Struct }

// Anchor_load_Params_TypeID is the unique identifier for the type Anchor_load_Params.
const Anchor_load_Params_TypeID = 0xa94cf75566fcc440

func NewAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func NewRootAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func ReadRootAnchor_load_Params(msg *capnp.Message) (Anchor_load_Params, error) {
	root, err := msg.Root()
	return Anchor_load_Params{root.Struct()}, err
}

func (s Anchor_load_Params) String() string {
	str, _ := text.Marshal(0xa94cf75566fcc440, s.Struct)
	return str
}

// Anchor_load_Params_List is a list of Anchor_load_Params.
type Anchor_load_Params_List struct{ capnp.List }

// NewAnchor_load_Params creates a new list of Anchor_load_Params.
func NewAnchor_load_Params_List(s *capnp.Segment, sz int32) (Anchor_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_load_Params_List{l}, err
}

func (s Anchor_load_Params_List) At(i int) Anchor_load_Params {
	return Anchor_load_Params{s.List.Struct(i)}
}

func (s Anchor_load_Params_List) Set(i int, v Anchor_load_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Params_List) String() string {
	str, _ := text.MarshalList(0xa94cf75566fcc440, s.List)
	return str
}

// Anchor_load_Params_Future is a wrapper for a Anchor_load_Params promised by a client call.
type Anchor_load_Params_Future struct{ *capnp.Future }

func (p Anchor_load_Params_Future) Struct() (Anchor_load_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_load_Params{s}, err
}

type Anchor_load_Results struct{ capnp.Struct }

// Anchor_load_Results_TypeID is the unique identifier for the type Anchor_load_Results.
const Anchor_load_Results_TypeID = 0xb3012e36a35e0fb0

func NewAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func NewRootAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func ReadRootAnchor_load_Results(msg *capnp.Message) (Anchor_load_Results, error) {
	root, err := msg.Root()
	return Anchor_load_Results{root.Struct()}, err
}

func (s Anchor_load_Results) String() string {
	str, _ := text.Marshal(0xb3012e36a35e0fb0, s.Struct)
	return str
}

func (s Anchor_load_Results) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_load_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_load_Results) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_load_Results) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_load_Results_List is a list of Anchor_load_Results.
type Anchor_load_Results_List struct{ capnp.List }

// NewAnchor_load_Results creates a new list of Anchor_load_Results.
func NewAnchor_load_Results_List(s *capnp.Segment, sz int32) (Anchor_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_load_Results_List{l}, err
}

func (s Anchor_load_Results_List) At(i int) Anchor_load_Results {
	return Anchor_load_Results{s.List.Struct(i)}
}

func (s Anchor_load_Results_List) Set(i int, v Anchor_load_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Results_List) String() string {
	str, _ := text.MarshalList(0xb3012e36a35e0fb0, s.List)
	return str
}

// Anchor_load_Results_Future is a wrapper for a Anchor_load_Results promised by a client call.
type Anchor_load_Results_Future struct{ *capnp.Future }

func (p Anchor_load_Results_Future) Struct() (Anchor_load_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_load_Results{s}, err
}

func (p Anchor_load_Results_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Anchor_store_Params struct{ capnp.Struct }

// Anchor_store_Params_TypeID is the unique identifier for the type Anchor_store_Params.
const Anchor_store_Params_TypeID = 0x8ef1ac844ec73672

func NewAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func NewRootAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func ReadRootAnchor_store_Params(msg *capnp.Message) (Anchor_store_Params, error) {
	root, err := msg.Root()
	return Anchor_store_Params{root.Struct()}, err
}

func (s Anchor_store_Params) String() string {
	str, _ := text.Marshal(0x8ef1ac844ec73672, s.Struct)
	return str
}

func (s Anchor_store_Params) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_store_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_store_Params) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_store_Params) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_store_Params_List is a list of Anchor_store_Params.
type Anchor_store_Params_List struct{ capnp.List }

// NewAnchor_store_Params creates a new list of Anchor_store_Params.
func NewAnchor_store_Params_List(s *capnp.Segment, sz int32) (Anchor_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_store_Params_List{l}, err
}

func (s Anchor_store_Params_List) At(i int) Anchor_store_Params {
	return Anchor_store_Params{s.List.Struct(i)}
}

func (s Anchor_store_Params_List) Set(i int, v Anchor_store_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Params_List) String() string {
	str, _ := text.MarshalList(0x8ef1ac844ec73672, s.List)
	return str
}

// Anchor_store_Params_Future is a wrapper for a Anchor_store_Params promised by a client call.
type Anchor_store_Params_Future struct{ *capnp.Future }

func (p Anchor_store_Params_Future) Struct() (Anchor_store_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_store_Params{s}, err
}

func (p Anchor_store_Params_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Anchor_store_Results struct{ capnp.Struct }

// Anchor_store_Results_TypeID is the unique identifier for the type Anchor_store_Results.
const Anchor_store_Results_TypeID = 0xc54940df263f58ae

func NewAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func NewRootAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func ReadRootAnchor_store_Results(msg *capnp.Message) (Anchor_store_Results, error) {
	root, err := msg.Root()
	return Anchor_store_Results{root.Struct()}, err
}

func (s Anchor_store_Results) String() string {
	str, _ := text.Marshal(0xc54940df263f58ae, s.Struct)
	return str
}

// Anchor_store_Results_List is a list of Anchor_store_Results.
type Anchor_store_Results_List struct{ capnp.List }

// NewAnchor_store_Results creates a new list of Anchor_store_Results.
func NewAnchor_store_Results_List(s *capnp.Segment, sz int32) (Anchor_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_store_Results_List{l}, err
}

func (s Anchor_store_Results_List) At(i int) Anchor_store_Results {
	return Anchor_store_Results{s.List.Struct(i)}
}

func (s Anchor_store_Results_List) Set(i int, v Anchor_store_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Results_List) String() string {
	str, _ := text.MarshalList(0xc54940df263f58ae, s.List)
	return str
}

// Anchor_store_Results_Future is a wrapper for a Anchor_store_Results promised by a client call.
type Anchor_store_Results_Future struct{ *capnp.Future }

func (p Anchor_store_Results_Future) Struct() (Anchor_store_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_store_Results{s}, err
}

type Anchor_go_Params struct{ capnp.Struct }

// Anchor_go_Params_TypeID is the unique identifier for the type Anchor_go_Params.
const Anchor_go_Params_TypeID = 0xd3451f471503cf21

func NewAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func NewRootAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func ReadRootAnchor_go_Params(msg *capnp.Message) (Anchor_go_Params, error) {
	root, err := msg.Root()
	return Anchor_go_Params{root.Struct()}, err
}

func (s Anchor_go_Params) String() string {
	str, _ := text.Marshal(0xd3451f471503cf21, s.Struct)
	return str
}

func (s Anchor_go_Params) Args() (Value_List, error) {
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Anchor_go_Params) HasArgs() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_go_Params) SetArgs(v Value_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Anchor_go_Params) NewArgs(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_go_Params_List is a list of Anchor_go_Params.
type Anchor_go_Params_List struct{ capnp.List }

// NewAnchor_go_Params creates a new list of Anchor_go_Params.
func NewAnchor_go_Params_List(s *capnp.Segment, sz int32) (Anchor_go_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_go_Params_List{l}, err
}

func (s Anchor_go_Params_List) At(i int) Anchor_go_Params { return Anchor_go_Params{s.List.Struct(i)} }

func (s Anchor_go_Params_List) Set(i int, v Anchor_go_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Params_List) String() string {
	str, _ := text.MarshalList(0xd3451f471503cf21, s.List)
	return str
}

// Anchor_go_Params_Future is a wrapper for a Anchor_go_Params promised by a client call.
type Anchor_go_Params_Future struct{ *capnp.Future }

func (p Anchor_go_Params_Future) Struct() (Anchor_go_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_go_Params{s}, err
}

type Anchor_go_Results struct{ capnp.Struct }

// Anchor_go_Results_TypeID is the unique identifier for the type Anchor_go_Results.
const Anchor_go_Results_TypeID = 0x9fb80cccef72e8de

func NewAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{st}, err
}

func NewRootAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Results{st}, err
}

func ReadRootAnchor_go_Results(msg *capnp.Message) (Anchor_go_Results, error) {
	root, err := msg.Root()
	return Anchor_go_Results{root.Struct()}, err
}

func (s Anchor_go_Results) String() string {
	str, _ := text.Marshal(0x9fb80cccef72e8de, s.Struct)
	return str
}

func (s Anchor_go_Results) Proc() Proc {
	p, _ := s.Struct.Ptr(0)
	return Proc{Client: p.Interface().Client()}
}

func (s Anchor_go_Results) HasProc() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_go_Results) SetProc(v Proc) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_go_Results_List is a list of Anchor_go_Results.
type Anchor_go_Results_List struct{ capnp.List }

// NewAnchor_go_Results creates a new list of Anchor_go_Results.
func NewAnchor_go_Results_List(s *capnp.Segment, sz int32) (Anchor_go_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_go_Results_List{l}, err
}

func (s Anchor_go_Results_List) At(i int) Anchor_go_Results {
	return Anchor_go_Results{s.List.Struct(i)}
}

func (s Anchor_go_Results_List) Set(i int, v Anchor_go_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Results_List) String() string {
	str, _ := text.MarshalList(0x9fb80cccef72e8de, s.List)
	return str
}

// Anchor_go_Results_Future is a wrapper for a Anchor_go_Results promised by a client call.
type Anchor_go_Results_Future struct{ *capnp.Future }

func (p Anchor_go_Results_Future) Struct() (Anchor_go_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_go_Results{s}, err
}

func (p Anchor_go_Results_Future) Proc() Proc {
	return Proc{Client: p.Future.Field(0, nil).Client()}
}

type Fn struct{ capnp.Struct }
type Fn_Which uint16

const (
	Fn_Which_lambda Fn_Which = 0
	Fn_Which_name   Fn_Which = 1
)

func (w Fn_Which) String() string {
	const s = "lambdaname"
	switch w {
	case Fn_Which_lambda:
		return s[0:6]
	case Fn_Which_name:
		return s[6:10]

	}
	return "Fn_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fn_TypeID is the unique identifier for the type Fn.
const Fn_TypeID = 0xf3f0dc8fd7fc3207

func NewFn(s *capnp.Segment) (Fn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn{st}, err
}

func NewRootFn(s *capnp.Segment) (Fn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn{st}, err
}

func ReadRootFn(msg *capnp.Message) (Fn, error) {
	root, err := msg.Root()
	return Fn{root.Struct()}, err
}

func (s Fn) String() string {
	str, _ := text.Marshal(0xf3f0dc8fd7fc3207, s.Struct)
	return str
}

func (s Fn) Which() Fn_Which {
	return Fn_Which(s.Struct.Uint16(2))
}
func (s Fn) Macro() bool {
	return s.Struct.Bit(0)
}

func (s Fn) SetMacro(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Fn) SetLambda() {
	s.Struct.SetUint16(2, 0)

}

func (s Fn) Name() (string, error) {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != name")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Fn) HasName() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Fn) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Fn) SetName(v string) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetText(0, v)
}

func (s Fn) Funcs() (Fn_Func_List, error) {
	p, err := s.Struct.Ptr(1)
	return Fn_Func_List{List: p.List()}, err
}

func (s Fn) HasFuncs() bool {
	return s.Struct.HasPtr(1)
}

func (s Fn) SetFuncs(v Fn_Func_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewFuncs sets the funcs field to a newly
// allocated Fn_Func_List, preferring placement in s's segment.
func (s Fn) NewFuncs(n int32) (Fn_Func_List, error) {
	l, err := NewFn_Func_List(s.Struct.Segment(), n)
	if err != nil {
		return Fn_Func_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Fn_List is a list of Fn.
type Fn_List struct{ capnp.List }

// NewFn creates a new list of Fn.
func NewFn_List(s *capnp.Segment, sz int32) (Fn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Fn_List{l}, err
}

func (s Fn_List) At(i int) Fn { return Fn{s.List.Struct(i)} }

func (s Fn_List) Set(i int, v Fn) error { return s.List.SetStruct(i, v.Struct) }

func (s Fn_List) String() string {
	str, _ := text.MarshalList(0xf3f0dc8fd7fc3207, s.List)
	return str
}

// Fn_Future is a wrapper for a Fn promised by a client call.
type Fn_Future struct{ *capnp.Future }

func (p Fn_Future) Struct() (Fn, error) {
	s, err := p.Future.Struct()
	return Fn{s}, err
}

type Fn_Func struct{ capnp.Struct }
type Fn_Func_Which uint16

const (
	Fn_Func_Which_nilary Fn_Func_Which = 0
	Fn_Func_Which_params Fn_Func_Which = 1
)

func (w Fn_Func_Which) String() string {
	const s = "nilaryparams"
	switch w {
	case Fn_Func_Which_nilary:
		return s[0:6]
	case Fn_Func_Which_params:
		return s[6:12]

	}
	return "Fn_Func_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fn_Func_TypeID is the unique identifier for the type Fn_Func.
const Fn_Func_TypeID = 0xf242e13f19c3d8a2

func NewFn_Func(s *capnp.Segment) (Fn_Func, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn_Func{st}, err
}

func NewRootFn_Func(s *capnp.Segment) (Fn_Func, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Fn_Func{st}, err
}

func ReadRootFn_Func(msg *capnp.Message) (Fn_Func, error) {
	root, err := msg.Root()
	return Fn_Func{root.Struct()}, err
}

func (s Fn_Func) String() string {
	str, _ := text.Marshal(0xf242e13f19c3d8a2, s.Struct)
	return str
}

func (s Fn_Func) Which() Fn_Func_Which {
	return Fn_Func_Which(s.Struct.Uint16(0))
}
func (s Fn_Func) SetNilary() {
	s.Struct.SetUint16(0, 0)

}

func (s Fn_Func) Params() (capnp.TextList, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != params")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Fn_Func) HasParams() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Fn_Func) SetParams(v capnp.TextList) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewParams sets the params field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Fn_Func) NewParams(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(0, 1)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fn_Func) Variadic() bool {
	return s.Struct.Bit(16)
}

func (s Fn_Func) SetVariadic(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Fn_Func) Body() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Fn_Func) HasBody() bool {
	return s.Struct.HasPtr(1)
}

func (s Fn_Func) SetBody(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBody sets the body field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Fn_Func) NewBody(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Fn_Func_List is a list of Fn_Func.
type Fn_Func_List struct{ capnp.List }

// NewFn_Func creates a new list of Fn_Func.
func NewFn_Func_List(s *capnp.Segment, sz int32) (Fn_Func_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Fn_Func_List{l}, err
}

func (s Fn_Func_List) At(i int) Fn_Func { return Fn_Func{s.List.Struct(i)} }

func (s Fn_Func_List) Set(i int, v Fn_Func) error { return s.List.SetStruct(i, v.Struct) }

func (s Fn_Func_List) String() string {
	str, _ := text.MarshalList(0xf242e13f19c3d8a2, s.List)
	return str
}

// Fn_Func_Future is a wrapper for a Fn_Func promised by a client call.
type Fn_Func_Future struct{ *capnp.Future }

func (p Fn_Func_Future) Struct() (Fn_Func, error) {
	s, err := p.Future.Struct()
	return Fn_Func{s}, err
}

type Proc struct{ Client *capnp.Client }

// Proc_TypeID is the unique identifier for the type Proc.
const Proc_TypeID = 0xb561ad669b43cc65

func (c Proc) Wait(ctx context.Context, params func(Proc_wait_Params) error) (Proc_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb561ad669b43cc65,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Proc",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Proc_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Proc_wait_Results_Future{Future: ans.Future()}, release
}

// A Proc_Server is a Proc with a local implementation.
type Proc_Server interface {
	Wait(context.Context, Proc_wait) error
}

// Proc_NewServer creates a new Server from an implementation of Proc_Server.
func Proc_NewServer(s Proc_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Proc_Methods(nil, s), s, c, policy)
}

// Proc_ServerToClient creates a new Client from an implementation of Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Proc_ServerToClient(s Proc_Server, policy *server.Policy) Proc {
	return Proc{Client: capnp.NewClient(Proc_NewServer(s, policy))}
}

// Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Proc_Methods(methods []server.Method, s Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb561ad669b43cc65,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Proc",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Proc_wait{call})
		},
	})

	return methods
}

// Proc_wait holds the state for a server call to Proc.wait.
// See server.Call for documentation.
type Proc_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Proc_wait) Args() Proc_wait_Params {
	return Proc_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Proc_wait) AllocResults() (Proc_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{Struct: r}, err
}

type Proc_wait_Params struct{ capnp.Struct }

// Proc_wait_Params_TypeID is the unique identifier for the type Proc_wait_Params.
const Proc_wait_Params_TypeID = 0xd805d12cefe22b70

func NewProc_wait_Params(s *capnp.Segment) (Proc_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Params{st}, err
}

func NewRootProc_wait_Params(s *capnp.Segment) (Proc_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Params{st}, err
}

func ReadRootProc_wait_Params(msg *capnp.Message) (Proc_wait_Params, error) {
	root, err := msg.Root()
	return Proc_wait_Params{root.Struct()}, err
}

func (s Proc_wait_Params) String() string {
	str, _ := text.Marshal(0xd805d12cefe22b70, s.Struct)
	return str
}

// Proc_wait_Params_List is a list of Proc_wait_Params.
type Proc_wait_Params_List struct{ capnp.List }

// NewProc_wait_Params creates a new list of Proc_wait_Params.
func NewProc_wait_Params_List(s *capnp.Segment, sz int32) (Proc_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Proc_wait_Params_List{l}, err
}

func (s Proc_wait_Params_List) At(i int) Proc_wait_Params { return Proc_wait_Params{s.List.Struct(i)} }

func (s Proc_wait_Params_List) Set(i int, v Proc_wait_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Proc_wait_Params_List) String() string {
	str, _ := text.MarshalList(0xd805d12cefe22b70, s.List)
	return str
}

// Proc_wait_Params_Future is a wrapper for a Proc_wait_Params promised by a client call.
type Proc_wait_Params_Future struct{ *capnp.Future }

func (p Proc_wait_Params_Future) Struct() (Proc_wait_Params, error) {
	s, err := p.Future.Struct()
	return Proc_wait_Params{s}, err
}

type Proc_wait_Results struct{ capnp.Struct }

// Proc_wait_Results_TypeID is the unique identifier for the type Proc_wait_Results.
const Proc_wait_Results_TypeID = 0xcf49dc7714f7eebd

func NewProc_wait_Results(s *capnp.Segment) (Proc_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{st}, err
}

func NewRootProc_wait_Results(s *capnp.Segment) (Proc_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Proc_wait_Results{st}, err
}

func ReadRootProc_wait_Results(msg *capnp.Message) (Proc_wait_Results, error) {
	root, err := msg.Root()
	return Proc_wait_Results{root.Struct()}, err
}

func (s Proc_wait_Results) String() string {
	str, _ := text.Marshal(0xcf49dc7714f7eebd, s.Struct)
	return str
}

// Proc_wait_Results_List is a list of Proc_wait_Results.
type Proc_wait_Results_List struct{ capnp.List }

// NewProc_wait_Results creates a new list of Proc_wait_Results.
func NewProc_wait_Results_List(s *capnp.Segment, sz int32) (Proc_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Proc_wait_Results_List{l}, err
}

func (s Proc_wait_Results_List) At(i int) Proc_wait_Results {
	return Proc_wait_Results{s.List.Struct(i)}
}

func (s Proc_wait_Results_List) Set(i int, v Proc_wait_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Proc_wait_Results_List) String() string {
	str, _ := text.MarshalList(0xcf49dc7714f7eebd, s.List)
	return str
}

// Proc_wait_Results_Future is a wrapper for a Proc_wait_Results promised by a client call.
type Proc_wait_Results_Future struct{ *capnp.Future }

func (p Proc_wait_Results_Future) Struct() (Proc_wait_Results, error) {
	s, err := p.Future.Struct()
	return Proc_wait_Results{s}, err
}

type Frac struct{ capnp.Struct }

// Frac_TypeID is the unique identifier for the type Frac.
const Frac_TypeID = 0xf84b0bdc2ebe874f

func NewFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func NewRootFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func ReadRootFrac(msg *capnp.Message) (Frac, error) {
	root, err := msg.Root()
	return Frac{root.Struct()}, err
}

func (s Frac) String() string {
	str, _ := text.Marshal(0xf84b0bdc2ebe874f, s.Struct)
	return str
}

func (s Frac) Numer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Frac) HasNumer() bool {
	return s.Struct.HasPtr(0)
}

func (s Frac) SetNumer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Frac) Denom() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Frac) HasDenom() bool {
	return s.Struct.HasPtr(1)
}

func (s Frac) SetDenom(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Frac_List is a list of Frac.
type Frac_List struct{ capnp.List }

// NewFrac creates a new list of Frac.
func NewFrac_List(s *capnp.Segment, sz int32) (Frac_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Frac_List{l}, err
}

func (s Frac_List) At(i int) Frac { return Frac{s.List.Struct(i)} }

func (s Frac_List) Set(i int, v Frac) error { return s.List.SetStruct(i, v.Struct) }

func (s Frac_List) String() string {
	str, _ := text.MarshalList(0xf84b0bdc2ebe874f, s.List)
	return str
}

// Frac_Future is a wrapper for a Frac promised by a client call.
type Frac_Future struct{ *capnp.Future }

func (p Frac_Future) Struct() (Frac, error) {
	s, err := p.Future.Struct()
	return Frac{s}, err
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xa683121d7d12cdc6

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.Root()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xa683121d7d12cdc6, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LinkedList) SetHead(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Value, error) {
	p, err := s.Struct.Ptr(1)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LinkedList) SetTail(v Value) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xa683121d7d12cdc6, s.List)
	return str
}

// LinkedList_Future is a wrapper for a LinkedList promised by a client call.
type LinkedList_Future struct{ *capnp.Future }

func (p LinkedList_Future) Struct() (LinkedList, error) {
	s, err := p.Future.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Future) Head() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

func (p LinkedList_Future) Tail() Value_Future {
	return Value_Future{Future: p.Future.Field(1, nil)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xfbc39fed30ae733e

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.Root()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xfbc39fed30ae733e, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s Vector) SetTail(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xfbc39fed30ae733e, s.List)
	return str
}

// Vector_Future is a wrapper for a Vector promised by a client call.
type Vector_Future struct{ *capnp.Future }

func (p Vector_Future) Struct() (Vector, error) {
	s, err := p.Future.Struct()
	return Vector{s}, err
}

func (p Vector_Future) Root() Vector_Node_Future {
	return Vector_Node_Future{Future: p.Future.Field(0, nil)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x806044540cfc08ec

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.Root()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x806044540cfc08ec, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Value_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Vector_Node) SetValues(v Value_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Value_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x806044540cfc08ec, s.List)
	return str
}

// Vector_Node_Future is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Future struct{ *capnp.Future }

func (p Vector_Node_Future) Struct() (Vector_Node, error) {
	s, err := p.Future.Struct()
	return Vector_Node{s}, err
}

type VectorSeq struct{ capnp.Struct }

// VectorSeq_TypeID is the unique identifier for the type VectorSeq.
const VectorSeq_TypeID = 0x9027d60a509d467c

func NewVectorSeq(s *capnp.Segment) (VectorSeq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VectorSeq{st}, err
}

func NewRootVectorSeq(s *capnp.Segment) (VectorSeq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VectorSeq{st}, err
}

func ReadRootVectorSeq(msg *capnp.Message) (VectorSeq, error) {
	root, err := msg.Root()
	return VectorSeq{root.Struct()}, err
}

func (s VectorSeq) String() string {
	str, _ := text.Marshal(0x9027d60a509d467c, s.Struct)
	return str
}

func (s VectorSeq) Offset() uint8 {
	return s.Struct.Uint8(0)
}

func (s VectorSeq) SetOffset(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s VectorSeq) Vector() (Vector, error) {
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s VectorSeq) HasVector() bool {
	return s.Struct.HasPtr(0)
}

func (s VectorSeq) SetVector(v Vector) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s VectorSeq) NewVector() (Vector, error) {
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VectorSeq) Index() uint32 {
	return s.Struct.Uint32(4)
}

func (s VectorSeq) SetIndex(v uint32) {
	s.Struct.SetUint32(4, v)
}

// VectorSeq_List is a list of VectorSeq.
type VectorSeq_List struct{ capnp.List }

// NewVectorSeq creates a new list of VectorSeq.
func NewVectorSeq_List(s *capnp.Segment, sz int32) (VectorSeq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return VectorSeq_List{l}, err
}

func (s VectorSeq_List) At(i int) VectorSeq { return VectorSeq{s.List.Struct(i)} }

func (s VectorSeq_List) Set(i int, v VectorSeq) error { return s.List.SetStruct(i, v.Struct) }

func (s VectorSeq_List) String() string {
	str, _ := text.MarshalList(0x9027d60a509d467c, s.List)
	return str
}

// VectorSeq_Future is a wrapper for a VectorSeq promised by a client call.
type VectorSeq_Future struct{ *capnp.Future }

func (p VectorSeq_Future) Struct() (VectorSeq, error) {
	s, err := p.Future.Struct()
	return VectorSeq{s}, err
}

func (p VectorSeq_Future) Vector() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

const schema_c8aa6d83e0c03a9d = "x\xda\x94W}\x8cT\xd5\x15?\xbf\xfbf\xe6-\xcc" +
	"\xe7\xe3\x0eQ\xb0db\x03\xad\xace\x0b\x0b\x92tS" +
	";\x8be\x97b)\xee\xdb\x11B\x13\xd3\xf8v\xe6-" +
	";af\xde\xfaf\x16\xdc\x14\xd3\x1alL\x9a\xd0\xaf" +
	"\x84Tl\x88\x81\xa6M%jk\x8dI5\xe9\x97V" +
	"kZ\x88\xb5E\x8b\x09\xb6`L\xb4\x06\xcb\xa2\xab," +
	"\xb8p\x9b\xf3f\xde\xbc\xd9\xd9]\xb0\xff\xcd\xbc\xdf\xb9" +
	"\xbf\xf3y\xcf9w\xf5D\xa8W\xac\x09\xdf\xb1\x80\xc8" +
	",\x85#\xeal\xc7t\xec\xce\x8dw\x7f\x9b\xcc\xc5\x80" +
	"\xfaR\xf5\x89\xd5\xef=\xf2\xfc\xc7\xd4\x07]\x10\xc9\xfd" +
	"\xa1\xbf\xcb\x83!\x9dH\x1e\x08\xed!(w\xfd\x9f\xb7" +
	">\xf0\xd8\xf9\xef\x91\xb1\x18Da\xe8Dk\x17\x87\x17" +
	"\x81 \x97\x85\xb3\x04\xb5\xb7\xff\xd0\xc0\xc2\xd7>\xfb\x03" +
	"2\x13\x80:\xd4\xf3\x87\xd3\xfb\xcaG_\xaaK\xca[" +
	"\xc3\xcf\xc9\xbe0\xff\xda\x10\xfe%AM\xde5\xb5\xe3" +
	"\xfaD\xff\x81V\xb6\xd7\xeblg<\xb6\x7f\xbd\xe3\x9e" +
	";\x16\xfb\xcd#\xad\x02\x88\x08\x16\x08GX\xe0\xc5\xe3" +
	"\x8b\xee[\xb6h\xdf\xcf\xdb\xd5\x09V\xb2\"\xf2\x17\xb9" +
	"&\xc2\xbfVEX]\xef\x9f\xa6\x87\xb7]\xd8\xf2h" +
	"\x9d\x8d\xbdZ\xfbBd!(\xa4\x96t\xbd\xf8\x8b\x1f" +
	"}4\xfdd\xab\x9e\xc7\x19\x82|\xda\xd3\xf3\xab\xe47" +
	"~\xba\xbe\x0bO\xb5\x0a\xbc\x1a\xf1,}\xc3\x13\xb0\x8f" +
	"}\xf9'\xc3\x8f[O\x93\x91\xd0\x02;\x08\xf2r\xe4" +
	"a\x19\xd6\xd9\x08\xe8\x9b\xe4J\xfe\xa5\x8e\xfc\xf5\x9b\xf7" +
	"\xbd{\xf4\x0b\xcf\xb2\xd5\"\x90\xee\x83n\x10IC?" +
	"\"\x97\xe8^d\xf5\xdfk\x04up\xe2\xa9\xc4\xfd7" +
	",\x7f\xaeU\xf9\xe5\x85^\x14\x10e\xe5O\xec\xc8~" +
	"\xe6\xdf\xbd\x9b_hq\xec\x96\xe8Rv\xec\xb7\xff\xbd" +
	"\x90\xdesj\xf3\xcbdH\x1fY\x16\x15\x8c\xdc\xf8\xb2" +
	"\xb6xS\xa6\xef\x1f-\xa4\x12\xd1K\x1cY\x8fs\xf4" +
	"\xe67\xcf}\xee\x95\xf0\xc9\xe0\xa4\xbc%z\x89Bj" +
	"\xd5\xfe\x07\xdf\x1c}\xed\xe6w\xeb\x053xb\xdfq" +
	"\xf1\xecc\x93\xd4'\xbc\x82Y\x12\xbd$WDY\xfa" +
	"\xc6(\xc7\xfc\xc7\x17\xaf\xe4nxh\xfb\xb9\xc04\xf9" +
	"\x8cGs\xe4\xe4\xf3K\xb2gn{\x9fL\x03Pz" +
	"\xf7\xf4?\xbf\x7fj\xe2\x03\x9f\xe6P\xf4\xd7\xf2g\x1e" +
	"\xcd\xe1\xe8\xdb\xd4\x82\xcf\xcc3K\x03\xf2`\xec\xbb\xf2" +
	"p\xec:\"\xf9h\x8c\xa5\x9bF\xb5'c\x7f\xfc\xa8" +
	"<\x10\xbf\x8eh\xed\xe1\xf8&\xc8b\x82\xb3q\xc7\x83" +
	"\xbf\xeb:\x15\xfd\xea\x14\x19\x89Y%d&\x1e\x96_" +
	"g)\xb9-\xc1\xf5\xdf\xbc\x1fs\xd5\xdb\x93\x89\xa3\xf2" +
	"\x99\x04\x9b\xf1\xc7\xc4\xdb\xb4JY\xa3\xc5\xcf[\xa3\xc5" +
	".\x91\xb7F+\xa3=\xdb\xed|\xcdq\xbb\xb6:\x05" +
	"\xd8\x03\x80\xd9\xa1\x85bJ\x85@d\xac\xbc\x9d\xc8\xbc" +
	"I\x83\xb9Q \x8e+*\x0d\xfe\xba\xa1\x87\xc8\xfc\xa2" +
	"\x06s\x87\x80\x1ar\xadJ~\xc4\xae\x12\x11\x12\x84\x01" +
	"\x0dH\x05\x97\x97\xc0\x1f\xb3\xbb\xad\xd2\x98]\x0d\xf0f" +
	"\xa1\xd5\xf1\xa6EZ\xdd\xa2\x0d\x95\xfc\x88\xe3vUk" +
	"\x8ek/\x1f\xb0\\\xab\x8c\xaa\x19\xd2BD\x9eU\xf1" +
	"n\"\xb3C\x83\x99\x16\xc8x\xd4m\x94\xa9\x16\xca\x19" +
	"N\xe6\xec{\x88]\x8c5\xb9\xfa\xd8\x97^\x0d\xe6\x16" +
	"\x01\xa0\xee\xdff\xfe\xb6Q\x839 `\x08\xa4!\x88" +
	"\x8c\xaf\xb1\xd2\xafh0\xef\x14\xc8:\xc3\xc3U\xbb\x86" +
	"\x08\x09D\xd8=\x8f\x1c\xa9 \x0du#2\xc5J\xc1" +
	"\xbe\x17\x1d$\xd01\xaf\x97{\xac\xd2\xae\xe5\x83vu" +
	"\xacT\x9b\xe9eO\xe0e\xd6\xf2da\x04%D\x80" +
	"1/\xe7N\xa7\xc1X\xa5V\xc6\xce\x8019\xea:" +
	"y\x18A\x7fh\xe3k\x84mK\xb1\xb2\xcb.l)" +
	"Vk\xd4\x1e\xb8\xee9\x02\xd79W\xe0:\x83\xc0e" +
	"\xf2\xceX\xa5\xe6\x07$9b[\x85\xd9\xa9K\xd6\xac" +
	"b\xe9*\x19\x9d\xe9j\xc9\xb1\x0a\xf5\x1a\xa9\x12]-" +
	"\xc4\xbe\xcc\xbc\x01\xb1j#\x88\x91@\xec\xea\xba\xe6J" +
	"\xd5\xffS\x90\xa8S\x0e\xb8\x9a\x93\xe7\x90\x86\xb40Q" +
	"\xb3\xad\xc1\xef\x8c\x86\xd1I\xc2\x08\xeb\xc9=V\xb1\xd6" +
	"\x8b\x01\xccb\xd8n\xe9\xa51\xef\xc6nl\xdeXy" +
	"\x1c\x9f&\xca\xbd\x04\x0d\xb9\x13\x10X\x86+*\xe5%" +
	"G\xbe\x82N\xa2\xdc1FN2\".\xabz\x86\xe4" +
	"\xab\xde\x99\xbf1r\x0a\x02qmZ\xa5\xa1\x11\xc9\xd7" +
	"\xd1C\x94;\xc1\xc0i>\x12\xfa\x98\x8f\x84\x88\xe4\x1b" +
	"\xde\x91\x93\x8c\xbc\xc5G\xc2\x97T\x1aa\"y\x06\xb7" +
	"\x13\xe5N3p\x96\x81\xc8E\x95F\x84H\xfe\xc7S" +
	"\xff\x16\x03\x13\xcc\xa5O)\x91\xf6\xba\xfb{\x1e\xf2\x0e" +
	"#\x93|\xa4\xe3\x82J\xa3\x83H\x9e\xf7\x94\x9ce`" +
	"\x8a\x81\x05\x1f\xa94\x16\x10\xc9\x0fq\x1bQn\x82\x81" +
	"i\x06\x16~\xa8\xd2XH$/z\x06OB\xc3\xa0" +
	"\x10\x88G'U\x1aQ\"y\xd9S1\xc5\x07B\x0c" +
	"\xc4>Pi\xc4x\xb2\x08\x06\xa6\x19\xe8` \xfe\xbe" +
	"J#N$\xc3\xa2\x87hPh\xc8\xc5\xf8{\xe2\xbc" +
	"J#A$\x17\x88A\xa2\\\x07\x03i\x06\x92\x13*" +
	"\x8d$OG\xb1\x94(\x17c\xe0z\x06R\xe7T\x1a" +
	")\"\xb9\xd8S\x91b\xe0SB@\xaf\x14K\x14I" +
	"\x0e9N\x09 \x01\x10\xf4\xe2\xfau\x08\x93@\x98\x90" +
	"\x1d*\xee\xdc\\\xa9!N\x02q\x82>\xbc~\x1d\xa2" +
	"$\x10%\xa8\xa1\xe2\xce\xfe\x92c\xd5\xb8\xd56\x0a5" +
	"9\xecZy\xa4\x82Y\xd1\xb8B\xf9\x11\xcbE\x88\x04" +
	"B\x04\xbdZs}\xf9o\xed\xb2\xc7\xf78n\xc1\xff" +
	"\x9f\xad\x8e\x97\x87\x9cR\x93\xae\xf5\x12$K\xc5j\x0d" +
	"\xa9`\x97\xa9s\xcf\xdb\xed\xd4\xeeF\x8f%\xdc\x83T" +
	"\xb0q\xd5Qm\xb8\x82T0/\x1bv^\xa3\x0b\xb5" +
	"]\xbf\xea\x9c]\x8dgTL\x83y\x93\x80\xca\x8f\x14" +
	"K\x05\xd7\xae\xcc\x98F\xcd\xcd\xe0\x13L\x1bO\x81V" +
	"\xab6\x85\"\xfeuu\xf2]|\x15\x9b&\xf8\x02\xed" +
	"\x8d7[o4s\xb5\x99\xe5\x02I\xcb\xdd\xf9\x09\x06" +
	"\xa1h\xd7\xda`m\x17h\xa8\xcd\x8d\x0de\xeb?\xdb" +
	"\x9atg\xd0\xa4\xe3Pjv\x9b^&\xae(\xbfQ" +
	"\xf7\x04\x8dzf!\xb8\x8eS\xa3\xc8\xb5\x87\x90hO" +
	"W\xbb\xd5\x8d\xce\xd5_\xc9t\xf5\x8fU\xbc\xf6\x97\x0a" +
	"\xb6\x0d\x8b\x0d\xb8K\x839\xd2\xbam\xd8\xfc\xf5n\x0d" +
	"\xe6^\x1e*\xa9\xba\xad\xe3\x9c\xf4{5\x98\x0f\x08\x18" +
	"\x1a\xbcve\xdc\xcf~\xed\xd5`>$\x90\xad\x14K" +
	"\x96;N\x91\xec\xa8g\x82\x1frv\x89\x03\xbd\xdbr" +
	"\x8bV\xa1\x98\xe7Bi\\\xc3\xe4\x90S\x18\xbfvj" +
	"\x9a>\xf0(\x01\x82\x85\xd1@g\x92\xbdb\x97\x1a\xf1" +
	"\xb7\xba[=R\xed\x1e\x95\x04\xe2\x82\xfdd\x97\x8al" +
	"}A\x839\xda\xe2R\x99\x09F\xea~f\xcaV\xde" +
	"u|k\xb3%\xab<T\xb0(\x92\xacXe\xdbO" +
	"Ufx\xac\x92o\xad/\xdf\xb8\xb9\x9d\xd8PIr" +
	"\xaa<?\x9a\xb7\xc4\xc0\xa0\xca\x8d\x0dyY$\xb8f" +
	"\xda\x1bP\xfe\xc2\x0c\x7f\xeb7~\xb8\x94\x84\xf1\x1d\x1d" +
	"h>S\xe0?\x9c\x8cq\x1e^e\x1d\xa2\xf9\xb8\x81" +
	"\xffT1,\xc6\xb6\xe9\xd0\x9a\xaf6\xf8\x0f\x05cs" +
	"7\x09\xe3V\x1d\xc1;\x00\xfe[\xcbX\xc3\xfaV\xe8" +
	"Z\xa9\xda\x8b$\x8f\xf4^$y\"\xf7\"\xe3\xdd\xdd" +
	"^h;\x9d9'e\xbf\xabY\xf9\xc6j\xdb\xc8\xcc" +
	"J\x0e\xecr\x0d\xe6j\x01\xc3\xdf_Vu7\xd6\xdd" +
	"u\x02\x99\xcaX\xd9v\xfd>\x9c)\xd8\x15\xa7\xec\xff" +
	"\x9b5\x89\xed$w>/\x8c\xcd\xd5\x97\xcba\xabS" +
	"\xb0\xe7)\x07\x03\xa1F5t\x07\xd5\x00q\xb5Z\xe8" +
	"l\xa9\x85\x19\x8bT\xa6:R\x1cn\xae\xa3\xdeum" +
	"[\xc2\x9bk\xd5|\xe5\xfd\xbf\x00\x00\x00\xff\xff\xd3\x1a" +
	"\xf0\x1d"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806044540cfc08ec,
		0x8ef1ac844ec73672,
		0x9027d60a509d467c,
		0x95460e1858f85cf4,
		0x9fb80cccef72e8de,
		0xa683121d7d12cdc6,
		0xa94cf75566fcc440,
		0xb1fcf692a8c62e19,
		0xb3012e36a35e0fb0,
		0xb561ad669b43cc65,
		0xba39aaea7d7bcba2,
		0xc2241b810eb3f099,
		0xc54940df263f58ae,
		0xcf49dc7714f7eebd,
		0xd3451f471503cf21,
		0xd805d12cefe22b70,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf242e13f19c3d8a2,
		0xf3f0dc8fd7fc3207,
		0xf4acba02cd83d452,
		0xf84b0bdc2ebe874f,
		0xfbc39fed30ae733e)
}
