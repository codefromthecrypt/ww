// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	context "golang.org/x/net/context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil      Value_Which = 0
	Value_Which_bool     Value_Which = 1
	Value_Which_i64      Value_Which = 2
	Value_Which_bigInt   Value_Which = 3
	Value_Which_f64      Value_Which = 4
	Value_Which_bigFloat Value_Which = 5
	Value_Which_frac     Value_Which = 6
	Value_Which_char     Value_Which = 7
	Value_Which_str      Value_Which = 8
	Value_Which_keyword  Value_Which = 9
	Value_Which_symbol   Value_Which = 10
	Value_Which_path     Value_Which = 11
	Value_Which_list     Value_Which = 12
	Value_Which_vector   Value_Which = 13
)

func (w Value_Which) String() string {
	const s = "nilbooli64bigIntf64bigFloatfraccharstrkeywordsymbolpathlistvector"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_bool:
		return s[3:7]
	case Value_Which_i64:
		return s[7:10]
	case Value_Which_bigInt:
		return s[10:16]
	case Value_Which_f64:
		return s[16:19]
	case Value_Which_bigFloat:
		return s[19:27]
	case Value_Which_frac:
		return s[27:31]
	case Value_Which_char:
		return s[31:35]
	case Value_Which_str:
		return s[35:38]
	case Value_Which_keyword:
		return s[38:45]
	case Value_Which_symbol:
		return s[45:51]
	case Value_Which_path:
		return s[51:55]
	case Value_Which_list:
		return s[55:59]
	case Value_Which_vector:
		return s[59:65]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xba39aaea7d7bcba2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.RootPtr()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xba39aaea7d7bcba2, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Value) I64() int64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != i64")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Value) SetI64(v int64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Value) BigInt() ([]byte, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != bigInt")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Value) HasBigInt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetBigInt(v []byte) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetData(0, v)
}

func (s Value) F64() float64 {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != f64")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Value) SetF64(v float64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Value) BigFloat() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != bigFloat")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasBigFloat() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) BigFloatBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetBigFloat(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Value) Frac() (Frac, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != frac")
	}
	p, err := s.Struct.Ptr(0)
	return Frac{Struct: p.Struct()}, err
}

func (s Value) HasFrac() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetFrac(v Frac) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrac sets the frac field to a newly
// allocated Frac struct, preferring placement in s's segment.
func (s Value) NewFrac() (Frac, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewFrac(s.Struct.Segment())
	if err != nil {
		return Frac{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Char() int32 {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(8))
}

func (s Value) SetChar(v int32) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Value) Str() (string, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasStr() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetStr(v string) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetText(0, v)
}

func (s Value) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasKeyword() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetText(0, v)
}

func (s Value) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasSymbol() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetText(0, v)
}

func (s Value) Path() (string, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasPath() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetPath(v string) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetText(0, v)
}

func (s Value) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Value) HasList() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Value) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Value) HasVector() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Value) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List struct{ capnp.List }

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Value_List{l}, err
}

func (s Value_List) At(i int) Value { return Value{s.List.Struct(i)} }

func (s Value_List) Set(i int, v Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Value_List) String() string {
	str, _ := text.MarshalList(0xba39aaea7d7bcba2, s.List)
	return str
}

// Value_Promise is a wrapper for a Value promised by a client call.
type Value_Promise struct{ *capnp.Pipeline }

func (p Value_Promise) Struct() (Value, error) {
	s, err := p.Pipeline.Struct()
	return Value{s}, err
}

func (p Value_Promise) Frac() Frac_Promise {
	return Frac_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) List() LinkedList_Promise {
	return LinkedList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) Vector() Vector_Promise {
	return Vector_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor struct{ Client capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xf4acba02cd83d452

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error, opts ...capnp.CallOption) Anchor_ls_Results_Promise {
	if c.Client == nil {
		return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	return Anchor_ls_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error, opts ...capnp.CallOption) Anchor_walk_Results_Promise {
	if c.Client == nil {
		return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	return Anchor_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Load(ctx context.Context, params func(Anchor_load_Params) error, opts ...capnp.CallOption) Anchor_load_Results_Promise {
	if c.Client == nil {
		return Anchor_load_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_load_Params{Struct: s}) }
	}
	return Anchor_load_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Store(ctx context.Context, params func(Anchor_store_Params) error, opts ...capnp.CallOption) Anchor_store_Results_Promise {
	if c.Client == nil {
		return Anchor_store_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_store_Params{Struct: s}) }
	}
	return Anchor_store_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Anchor) Go(ctx context.Context, params func(Anchor_go_Params) error, opts ...capnp.CallOption) Anchor_go_Results_Promise {
	if c.Client == nil {
		return Anchor_go_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Anchor_go_Params{Struct: s}) }
	}
	return Anchor_go_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Anchor_Server interface {
	Ls(Anchor_ls) error

	Walk(Anchor_walk) error

	Load(Anchor_load) error

	Store(Anchor_store) error

	Go(Anchor_go) error
}

func Anchor_ServerToClient(s Anchor_Server) Anchor {
	c, _ := s.(server.Closer)
	return Anchor{Client: server.New(Anchor_Methods(nil, s), c)}
}

func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      0,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_ls{c, opts, Anchor_ls_Params{Struct: p}, Anchor_ls_Results{Struct: r}}
			return s.Ls(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      1,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_walk{c, opts, Anchor_walk_Params{Struct: p}, Anchor_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      2,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "load",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_load{c, opts, Anchor_load_Params{Struct: p}, Anchor_load_Results{Struct: r}}
			return s.Load(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      3,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "store",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_store{c, opts, Anchor_store_Params{Struct: p}, Anchor_store_Results{Struct: r}}
			return s.Store(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4acba02cd83d452,
			MethodID:      4,
			InterfaceName: "api/api.capnp:Anchor",
			MethodName:    "go",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Anchor_go{c, opts, Anchor_go_Params{Struct: p}, Anchor_go_Results{Struct: r}}
			return s.Go(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Anchor_ls holds the arguments for a server call to Anchor.ls.
type Anchor_ls struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_ls_Params
	Results Anchor_ls_Results
}

// Anchor_walk holds the arguments for a server call to Anchor.walk.
type Anchor_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_walk_Params
	Results Anchor_walk_Results
}

// Anchor_load holds the arguments for a server call to Anchor.load.
type Anchor_load struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_load_Params
	Results Anchor_load_Results
}

// Anchor_store holds the arguments for a server call to Anchor.store.
type Anchor_store struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_store_Params
	Results Anchor_store_Results
}

// Anchor_go holds the arguments for a server call to Anchor.go.
type Anchor_go struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Anchor_go_Params
	Results Anchor_go_Results
}

type Anchor_SubAnchor struct{ capnp.Struct }
type Anchor_SubAnchor_Which uint16

const (
	Anchor_SubAnchor_Which_root   Anchor_SubAnchor_Which = 0
	Anchor_SubAnchor_Which_anchor Anchor_SubAnchor_Which = 1
)

func (w Anchor_SubAnchor_Which) String() string {
	const s = "rootanchor"
	switch w {
	case Anchor_SubAnchor_Which_root:
		return s[0:4]
	case Anchor_SubAnchor_Which_anchor:
		return s[4:10]

	}
	return "Anchor_SubAnchor_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_SubAnchor_TypeID is the unique identifier for the type Anchor_SubAnchor.
const Anchor_SubAnchor_TypeID = 0xea2bd670e2878d2d

func NewAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func NewRootAnchor_SubAnchor(s *capnp.Segment) (Anchor_SubAnchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Anchor_SubAnchor{st}, err
}

func ReadRootAnchor_SubAnchor(msg *capnp.Message) (Anchor_SubAnchor, error) {
	root, err := msg.RootPtr()
	return Anchor_SubAnchor{root.Struct()}, err
}

func (s Anchor_SubAnchor) String() string {
	str, _ := text.Marshal(0xea2bd670e2878d2d, s.Struct)
	return str
}

func (s Anchor_SubAnchor) Which() Anchor_SubAnchor_Which {
	return Anchor_SubAnchor_Which(s.Struct.Uint16(0))
}
func (s Anchor_SubAnchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_SubAnchor) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_SubAnchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_SubAnchor) SetRoot() {
	s.Struct.SetUint16(0, 0)

}

func (s Anchor_SubAnchor) Anchor() Anchor {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_SubAnchor) HasAnchor() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_SubAnchor) SetAnchor(v Anchor) error {
	s.Struct.SetUint16(0, 1)
	if v.Client == nil {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_SubAnchor_List is a list of Anchor_SubAnchor.
type Anchor_SubAnchor_List struct{ capnp.List }

// NewAnchor_SubAnchor creates a new list of Anchor_SubAnchor.
func NewAnchor_SubAnchor_List(s *capnp.Segment, sz int32) (Anchor_SubAnchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Anchor_SubAnchor_List{l}, err
}

func (s Anchor_SubAnchor_List) At(i int) Anchor_SubAnchor { return Anchor_SubAnchor{s.List.Struct(i)} }

func (s Anchor_SubAnchor_List) Set(i int, v Anchor_SubAnchor) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_SubAnchor_List) String() string {
	str, _ := text.MarshalList(0xea2bd670e2878d2d, s.List)
	return str
}

// Anchor_SubAnchor_Promise is a wrapper for a Anchor_SubAnchor promised by a client call.
type Anchor_SubAnchor_Promise struct{ *capnp.Pipeline }

func (p Anchor_SubAnchor_Promise) Struct() (Anchor_SubAnchor, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_SubAnchor{s}, err
}

func (p Anchor_SubAnchor_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(1).Client()}
}

type Anchor_ProcSpec struct{ capnp.Struct }
type Anchor_ProcSpec_Which uint16

const (
	Anchor_ProcSpec_Which_goroutine Anchor_ProcSpec_Which = 0
	Anchor_ProcSpec_Which_osProc    Anchor_ProcSpec_Which = 1
	Anchor_ProcSpec_Which_docker    Anchor_ProcSpec_Which = 2
)

func (w Anchor_ProcSpec_Which) String() string {
	const s = "goroutineosProcdocker"
	switch w {
	case Anchor_ProcSpec_Which_goroutine:
		return s[0:9]
	case Anchor_ProcSpec_Which_osProc:
		return s[9:15]
	case Anchor_ProcSpec_Which_docker:
		return s[15:21]

	}
	return "Anchor_ProcSpec_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Anchor_ProcSpec_TypeID is the unique identifier for the type Anchor_ProcSpec.
const Anchor_ProcSpec_TypeID = 0xb87b8be74e3ab8d6

func NewAnchor_ProcSpec(s *capnp.Segment) (Anchor_ProcSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_ProcSpec{st}, err
}

func NewRootAnchor_ProcSpec(s *capnp.Segment) (Anchor_ProcSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_ProcSpec{st}, err
}

func ReadRootAnchor_ProcSpec(msg *capnp.Message) (Anchor_ProcSpec, error) {
	root, err := msg.RootPtr()
	return Anchor_ProcSpec{root.Struct()}, err
}

func (s Anchor_ProcSpec) String() string {
	str, _ := text.Marshal(0xb87b8be74e3ab8d6, s.Struct)
	return str
}

func (s Anchor_ProcSpec) Which() Anchor_ProcSpec_Which {
	return Anchor_ProcSpec_Which(s.Struct.Uint16(0))
}
func (s Anchor_ProcSpec) Goroutine() (Anchor_ProcSpec_Goroutine, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != goroutine")
	}
	p, err := s.Struct.Ptr(0)
	return Anchor_ProcSpec_Goroutine{Struct: p.Struct()}, err
}

func (s Anchor_ProcSpec) HasGoroutine() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec) SetGoroutine(v Anchor_ProcSpec_Goroutine) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGoroutine sets the goroutine field to a newly
// allocated Anchor_ProcSpec_Goroutine struct, preferring placement in s's segment.
func (s Anchor_ProcSpec) NewGoroutine() (Anchor_ProcSpec_Goroutine, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAnchor_ProcSpec_Goroutine(s.Struct.Segment())
	if err != nil {
		return Anchor_ProcSpec_Goroutine{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Anchor_ProcSpec) OsProc() (Anchor_ProcSpec_OSProc, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != osProc")
	}
	p, err := s.Struct.Ptr(0)
	return Anchor_ProcSpec_OSProc{Struct: p.Struct()}, err
}

func (s Anchor_ProcSpec) HasOsProc() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec) SetOsProc(v Anchor_ProcSpec_OSProc) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOsProc sets the osProc field to a newly
// allocated Anchor_ProcSpec_OSProc struct, preferring placement in s's segment.
func (s Anchor_ProcSpec) NewOsProc() (Anchor_ProcSpec_OSProc, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewAnchor_ProcSpec_OSProc(s.Struct.Segment())
	if err != nil {
		return Anchor_ProcSpec_OSProc{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Anchor_ProcSpec) Docker() (Anchor_ProcSpec_Docker, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != docker")
	}
	p, err := s.Struct.Ptr(0)
	return Anchor_ProcSpec_Docker{Struct: p.Struct()}, err
}

func (s Anchor_ProcSpec) HasDocker() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec) SetDocker(v Anchor_ProcSpec_Docker) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDocker sets the docker field to a newly
// allocated Anchor_ProcSpec_Docker struct, preferring placement in s's segment.
func (s Anchor_ProcSpec) NewDocker() (Anchor_ProcSpec_Docker, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAnchor_ProcSpec_Docker(s.Struct.Segment())
	if err != nil {
		return Anchor_ProcSpec_Docker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_ProcSpec_List is a list of Anchor_ProcSpec.
type Anchor_ProcSpec_List struct{ capnp.List }

// NewAnchor_ProcSpec creates a new list of Anchor_ProcSpec.
func NewAnchor_ProcSpec_List(s *capnp.Segment, sz int32) (Anchor_ProcSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Anchor_ProcSpec_List{l}, err
}

func (s Anchor_ProcSpec_List) At(i int) Anchor_ProcSpec { return Anchor_ProcSpec{s.List.Struct(i)} }

func (s Anchor_ProcSpec_List) Set(i int, v Anchor_ProcSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ProcSpec_List) String() string {
	str, _ := text.MarshalList(0xb87b8be74e3ab8d6, s.List)
	return str
}

// Anchor_ProcSpec_Promise is a wrapper for a Anchor_ProcSpec promised by a client call.
type Anchor_ProcSpec_Promise struct{ *capnp.Pipeline }

func (p Anchor_ProcSpec_Promise) Struct() (Anchor_ProcSpec, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ProcSpec{s}, err
}

func (p Anchor_ProcSpec_Promise) Goroutine() Anchor_ProcSpec_Goroutine_Promise {
	return Anchor_ProcSpec_Goroutine_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Anchor_ProcSpec_Promise) OsProc() Anchor_ProcSpec_OSProc_Promise {
	return Anchor_ProcSpec_OSProc_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Anchor_ProcSpec_Promise) Docker() Anchor_ProcSpec_Docker_Promise {
	return Anchor_ProcSpec_Docker_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_ProcSpec_Goroutine struct{ capnp.Struct }

// Anchor_ProcSpec_Goroutine_TypeID is the unique identifier for the type Anchor_ProcSpec_Goroutine.
const Anchor_ProcSpec_Goroutine_TypeID = 0xe87cb3e2d38251c8

func NewAnchor_ProcSpec_Goroutine(s *capnp.Segment) (Anchor_ProcSpec_Goroutine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ProcSpec_Goroutine{st}, err
}

func NewRootAnchor_ProcSpec_Goroutine(s *capnp.Segment) (Anchor_ProcSpec_Goroutine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ProcSpec_Goroutine{st}, err
}

func ReadRootAnchor_ProcSpec_Goroutine(msg *capnp.Message) (Anchor_ProcSpec_Goroutine, error) {
	root, err := msg.RootPtr()
	return Anchor_ProcSpec_Goroutine{root.Struct()}, err
}

func (s Anchor_ProcSpec_Goroutine) String() string {
	str, _ := text.Marshal(0xe87cb3e2d38251c8, s.Struct)
	return str
}

func (s Anchor_ProcSpec_Goroutine) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_ProcSpec_Goroutine) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_Goroutine) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_ProcSpec_Goroutine) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_ProcSpec_Goroutine_List is a list of Anchor_ProcSpec_Goroutine.
type Anchor_ProcSpec_Goroutine_List struct{ capnp.List }

// NewAnchor_ProcSpec_Goroutine creates a new list of Anchor_ProcSpec_Goroutine.
func NewAnchor_ProcSpec_Goroutine_List(s *capnp.Segment, sz int32) (Anchor_ProcSpec_Goroutine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ProcSpec_Goroutine_List{l}, err
}

func (s Anchor_ProcSpec_Goroutine_List) At(i int) Anchor_ProcSpec_Goroutine {
	return Anchor_ProcSpec_Goroutine{s.List.Struct(i)}
}

func (s Anchor_ProcSpec_Goroutine_List) Set(i int, v Anchor_ProcSpec_Goroutine) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ProcSpec_Goroutine_List) String() string {
	str, _ := text.MarshalList(0xe87cb3e2d38251c8, s.List)
	return str
}

// Anchor_ProcSpec_Goroutine_Promise is a wrapper for a Anchor_ProcSpec_Goroutine promised by a client call.
type Anchor_ProcSpec_Goroutine_Promise struct{ *capnp.Pipeline }

func (p Anchor_ProcSpec_Goroutine_Promise) Struct() (Anchor_ProcSpec_Goroutine, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ProcSpec_Goroutine{s}, err
}

func (p Anchor_ProcSpec_Goroutine_Promise) Value() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_ProcSpec_OSProc struct{ capnp.Struct }

// Anchor_ProcSpec_OSProc_TypeID is the unique identifier for the type Anchor_ProcSpec_OSProc.
const Anchor_ProcSpec_OSProc_TypeID = 0xa366d24cbe2dca1c

func NewAnchor_ProcSpec_OSProc(s *capnp.Segment) (Anchor_ProcSpec_OSProc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Anchor_ProcSpec_OSProc{st}, err
}

func NewRootAnchor_ProcSpec_OSProc(s *capnp.Segment) (Anchor_ProcSpec_OSProc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Anchor_ProcSpec_OSProc{st}, err
}

func ReadRootAnchor_ProcSpec_OSProc(msg *capnp.Message) (Anchor_ProcSpec_OSProc, error) {
	root, err := msg.RootPtr()
	return Anchor_ProcSpec_OSProc{root.Struct()}, err
}

func (s Anchor_ProcSpec_OSProc) String() string {
	str, _ := text.Marshal(0xa366d24cbe2dca1c, s.Struct)
	return str
}

func (s Anchor_ProcSpec_OSProc) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_ProcSpec_OSProc) HasArgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_OSProc) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_ProcSpec_OSProc) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Anchor_ProcSpec_OSProc) Env() (Anchor_ProcSpec_EnvVar_List, error) {
	p, err := s.Struct.Ptr(1)
	return Anchor_ProcSpec_EnvVar_List{List: p.List()}, err
}

func (s Anchor_ProcSpec_OSProc) HasEnv() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_OSProc) SetEnv(v Anchor_ProcSpec_EnvVar_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Anchor_ProcSpec_EnvVar_List, preferring placement in s's segment.
func (s Anchor_ProcSpec_OSProc) NewEnv(n int32) (Anchor_ProcSpec_EnvVar_List, error) {
	l, err := NewAnchor_ProcSpec_EnvVar_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_ProcSpec_EnvVar_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Anchor_ProcSpec_OSProc) Dir() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Anchor_ProcSpec_OSProc) HasDir() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_OSProc) DirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Anchor_ProcSpec_OSProc) SetDir(v string) error {
	return s.Struct.SetText(2, v)
}

// Anchor_ProcSpec_OSProc_List is a list of Anchor_ProcSpec_OSProc.
type Anchor_ProcSpec_OSProc_List struct{ capnp.List }

// NewAnchor_ProcSpec_OSProc creates a new list of Anchor_ProcSpec_OSProc.
func NewAnchor_ProcSpec_OSProc_List(s *capnp.Segment, sz int32) (Anchor_ProcSpec_OSProc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Anchor_ProcSpec_OSProc_List{l}, err
}

func (s Anchor_ProcSpec_OSProc_List) At(i int) Anchor_ProcSpec_OSProc {
	return Anchor_ProcSpec_OSProc{s.List.Struct(i)}
}

func (s Anchor_ProcSpec_OSProc_List) Set(i int, v Anchor_ProcSpec_OSProc) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ProcSpec_OSProc_List) String() string {
	str, _ := text.MarshalList(0xa366d24cbe2dca1c, s.List)
	return str
}

// Anchor_ProcSpec_OSProc_Promise is a wrapper for a Anchor_ProcSpec_OSProc promised by a client call.
type Anchor_ProcSpec_OSProc_Promise struct{ *capnp.Pipeline }

func (p Anchor_ProcSpec_OSProc_Promise) Struct() (Anchor_ProcSpec_OSProc, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ProcSpec_OSProc{s}, err
}

type Anchor_ProcSpec_Docker struct{ capnp.Struct }

// Anchor_ProcSpec_Docker_TypeID is the unique identifier for the type Anchor_ProcSpec_Docker.
const Anchor_ProcSpec_Docker_TypeID = 0xe74e2c4efe10bad2

func NewAnchor_ProcSpec_Docker(s *capnp.Segment) (Anchor_ProcSpec_Docker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ProcSpec_Docker{st}, err
}

func NewRootAnchor_ProcSpec_Docker(s *capnp.Segment) (Anchor_ProcSpec_Docker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ProcSpec_Docker{st}, err
}

func ReadRootAnchor_ProcSpec_Docker(msg *capnp.Message) (Anchor_ProcSpec_Docker, error) {
	root, err := msg.RootPtr()
	return Anchor_ProcSpec_Docker{root.Struct()}, err
}

func (s Anchor_ProcSpec_Docker) String() string {
	str, _ := text.Marshal(0xe74e2c4efe10bad2, s.Struct)
	return str
}

// Anchor_ProcSpec_Docker_List is a list of Anchor_ProcSpec_Docker.
type Anchor_ProcSpec_Docker_List struct{ capnp.List }

// NewAnchor_ProcSpec_Docker creates a new list of Anchor_ProcSpec_Docker.
func NewAnchor_ProcSpec_Docker_List(s *capnp.Segment, sz int32) (Anchor_ProcSpec_Docker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ProcSpec_Docker_List{l}, err
}

func (s Anchor_ProcSpec_Docker_List) At(i int) Anchor_ProcSpec_Docker {
	return Anchor_ProcSpec_Docker{s.List.Struct(i)}
}

func (s Anchor_ProcSpec_Docker_List) Set(i int, v Anchor_ProcSpec_Docker) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ProcSpec_Docker_List) String() string {
	str, _ := text.MarshalList(0xe74e2c4efe10bad2, s.List)
	return str
}

// Anchor_ProcSpec_Docker_Promise is a wrapper for a Anchor_ProcSpec_Docker promised by a client call.
type Anchor_ProcSpec_Docker_Promise struct{ *capnp.Pipeline }

func (p Anchor_ProcSpec_Docker_Promise) Struct() (Anchor_ProcSpec_Docker, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ProcSpec_Docker{s}, err
}

type Anchor_ProcSpec_EnvVar struct{ capnp.Struct }

// Anchor_ProcSpec_EnvVar_TypeID is the unique identifier for the type Anchor_ProcSpec_EnvVar.
const Anchor_ProcSpec_EnvVar_TypeID = 0xc94611cb6e5eac88

func NewAnchor_ProcSpec_EnvVar(s *capnp.Segment) (Anchor_ProcSpec_EnvVar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ProcSpec_EnvVar{st}, err
}

func NewRootAnchor_ProcSpec_EnvVar(s *capnp.Segment) (Anchor_ProcSpec_EnvVar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ProcSpec_EnvVar{st}, err
}

func ReadRootAnchor_ProcSpec_EnvVar(msg *capnp.Message) (Anchor_ProcSpec_EnvVar, error) {
	root, err := msg.RootPtr()
	return Anchor_ProcSpec_EnvVar{root.Struct()}, err
}

func (s Anchor_ProcSpec_EnvVar) String() string {
	str, _ := text.Marshal(0xc94611cb6e5eac88, s.Struct)
	return str
}

func (s Anchor_ProcSpec_EnvVar) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_ProcSpec_EnvVar) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_EnvVar) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_ProcSpec_EnvVar) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_ProcSpec_EnvVar) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Anchor_ProcSpec_EnvVar) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Anchor_ProcSpec_EnvVar) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Anchor_ProcSpec_EnvVar) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Anchor_ProcSpec_EnvVar_List is a list of Anchor_ProcSpec_EnvVar.
type Anchor_ProcSpec_EnvVar_List struct{ capnp.List }

// NewAnchor_ProcSpec_EnvVar creates a new list of Anchor_ProcSpec_EnvVar.
func NewAnchor_ProcSpec_EnvVar_List(s *capnp.Segment, sz int32) (Anchor_ProcSpec_EnvVar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_ProcSpec_EnvVar_List{l}, err
}

func (s Anchor_ProcSpec_EnvVar_List) At(i int) Anchor_ProcSpec_EnvVar {
	return Anchor_ProcSpec_EnvVar{s.List.Struct(i)}
}

func (s Anchor_ProcSpec_EnvVar_List) Set(i int, v Anchor_ProcSpec_EnvVar) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ProcSpec_EnvVar_List) String() string {
	str, _ := text.MarshalList(0xc94611cb6e5eac88, s.List)
	return str
}

// Anchor_ProcSpec_EnvVar_Promise is a wrapper for a Anchor_ProcSpec_EnvVar promised by a client call.
type Anchor_ProcSpec_EnvVar_Promise struct{ *capnp.Pipeline }

func (p Anchor_ProcSpec_EnvVar_Promise) Struct() (Anchor_ProcSpec_EnvVar, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ProcSpec_EnvVar{s}, err
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xef56981b53fef997

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xef56981b53fef997, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xef56981b53fef997, s.List)
	return str
}

// Anchor_ls_Params_Promise is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Params_Promise) Struct() (Anchor_ls_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xc2241b810eb3f099

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xc2241b810eb3f099, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_SubAnchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_SubAnchor_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_ls_Results) SetChildren(v Anchor_SubAnchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_SubAnchor_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_SubAnchor_List, error) {
	l, err := NewAnchor_SubAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_SubAnchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xc2241b810eb3f099, s.List)
	return str
}

// Anchor_ls_Results_Promise is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_ls_Results_Promise) Struct() (Anchor_ls_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb1fcf692a8c62e19

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb1fcf692a8c62e19, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb1fcf692a8c62e19, s.List)
	return str
}

// Anchor_walk_Params_Promise is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Params_Promise) Struct() (Anchor_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0x95460e1858f85cf4

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0x95460e1858f85cf4, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x95460e1858f85cf4, s.List)
	return str
}

// Anchor_walk_Results_Promise is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_walk_Results_Promise) Struct() (Anchor_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Promise) Anchor() Anchor {
	return Anchor{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Anchor_load_Params struct{ capnp.Struct }

// Anchor_load_Params_TypeID is the unique identifier for the type Anchor_load_Params.
const Anchor_load_Params_TypeID = 0xa94cf75566fcc440

func NewAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func NewRootAnchor_load_Params(s *capnp.Segment) (Anchor_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_load_Params{st}, err
}

func ReadRootAnchor_load_Params(msg *capnp.Message) (Anchor_load_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_load_Params{root.Struct()}, err
}

func (s Anchor_load_Params) String() string {
	str, _ := text.Marshal(0xa94cf75566fcc440, s.Struct)
	return str
}

// Anchor_load_Params_List is a list of Anchor_load_Params.
type Anchor_load_Params_List struct{ capnp.List }

// NewAnchor_load_Params creates a new list of Anchor_load_Params.
func NewAnchor_load_Params_List(s *capnp.Segment, sz int32) (Anchor_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_load_Params_List{l}, err
}

func (s Anchor_load_Params_List) At(i int) Anchor_load_Params {
	return Anchor_load_Params{s.List.Struct(i)}
}

func (s Anchor_load_Params_List) Set(i int, v Anchor_load_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Params_List) String() string {
	str, _ := text.MarshalList(0xa94cf75566fcc440, s.List)
	return str
}

// Anchor_load_Params_Promise is a wrapper for a Anchor_load_Params promised by a client call.
type Anchor_load_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_load_Params_Promise) Struct() (Anchor_load_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_load_Params{s}, err
}

type Anchor_load_Results struct{ capnp.Struct }

// Anchor_load_Results_TypeID is the unique identifier for the type Anchor_load_Results.
const Anchor_load_Results_TypeID = 0xb3012e36a35e0fb0

func NewAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func NewRootAnchor_load_Results(s *capnp.Segment) (Anchor_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_load_Results{st}, err
}

func ReadRootAnchor_load_Results(msg *capnp.Message) (Anchor_load_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_load_Results{root.Struct()}, err
}

func (s Anchor_load_Results) String() string {
	str, _ := text.Marshal(0xb3012e36a35e0fb0, s.Struct)
	return str
}

func (s Anchor_load_Results) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_load_Results) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_load_Results) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_load_Results) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_load_Results_List is a list of Anchor_load_Results.
type Anchor_load_Results_List struct{ capnp.List }

// NewAnchor_load_Results creates a new list of Anchor_load_Results.
func NewAnchor_load_Results_List(s *capnp.Segment, sz int32) (Anchor_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_load_Results_List{l}, err
}

func (s Anchor_load_Results_List) At(i int) Anchor_load_Results {
	return Anchor_load_Results{s.List.Struct(i)}
}

func (s Anchor_load_Results_List) Set(i int, v Anchor_load_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_load_Results_List) String() string {
	str, _ := text.MarshalList(0xb3012e36a35e0fb0, s.List)
	return str
}

// Anchor_load_Results_Promise is a wrapper for a Anchor_load_Results promised by a client call.
type Anchor_load_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_load_Results_Promise) Struct() (Anchor_load_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_load_Results{s}, err
}

func (p Anchor_load_Results_Promise) Value() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_store_Params struct{ capnp.Struct }

// Anchor_store_Params_TypeID is the unique identifier for the type Anchor_store_Params.
const Anchor_store_Params_TypeID = 0x8ef1ac844ec73672

func NewAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func NewRootAnchor_store_Params(s *capnp.Segment) (Anchor_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_store_Params{st}, err
}

func ReadRootAnchor_store_Params(msg *capnp.Message) (Anchor_store_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_store_Params{root.Struct()}, err
}

func (s Anchor_store_Params) String() string {
	str, _ := text.Marshal(0x8ef1ac844ec73672, s.Struct)
	return str
}

func (s Anchor_store_Params) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Anchor_store_Params) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_store_Params) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Anchor_store_Params) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_store_Params_List is a list of Anchor_store_Params.
type Anchor_store_Params_List struct{ capnp.List }

// NewAnchor_store_Params creates a new list of Anchor_store_Params.
func NewAnchor_store_Params_List(s *capnp.Segment, sz int32) (Anchor_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_store_Params_List{l}, err
}

func (s Anchor_store_Params_List) At(i int) Anchor_store_Params {
	return Anchor_store_Params{s.List.Struct(i)}
}

func (s Anchor_store_Params_List) Set(i int, v Anchor_store_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Params_List) String() string {
	str, _ := text.MarshalList(0x8ef1ac844ec73672, s.List)
	return str
}

// Anchor_store_Params_Promise is a wrapper for a Anchor_store_Params promised by a client call.
type Anchor_store_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_store_Params_Promise) Struct() (Anchor_store_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_store_Params{s}, err
}

func (p Anchor_store_Params_Promise) Value() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_store_Results struct{ capnp.Struct }

// Anchor_store_Results_TypeID is the unique identifier for the type Anchor_store_Results.
const Anchor_store_Results_TypeID = 0xc54940df263f58ae

func NewAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func NewRootAnchor_store_Results(s *capnp.Segment) (Anchor_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_store_Results{st}, err
}

func ReadRootAnchor_store_Results(msg *capnp.Message) (Anchor_store_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_store_Results{root.Struct()}, err
}

func (s Anchor_store_Results) String() string {
	str, _ := text.Marshal(0xc54940df263f58ae, s.Struct)
	return str
}

// Anchor_store_Results_List is a list of Anchor_store_Results.
type Anchor_store_Results_List struct{ capnp.List }

// NewAnchor_store_Results creates a new list of Anchor_store_Results.
func NewAnchor_store_Results_List(s *capnp.Segment, sz int32) (Anchor_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_store_Results_List{l}, err
}

func (s Anchor_store_Results_List) At(i int) Anchor_store_Results {
	return Anchor_store_Results{s.List.Struct(i)}
}

func (s Anchor_store_Results_List) Set(i int, v Anchor_store_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_store_Results_List) String() string {
	str, _ := text.MarshalList(0xc54940df263f58ae, s.List)
	return str
}

// Anchor_store_Results_Promise is a wrapper for a Anchor_store_Results promised by a client call.
type Anchor_store_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_store_Results_Promise) Struct() (Anchor_store_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_store_Results{s}, err
}

type Anchor_go_Params struct{ capnp.Struct }

// Anchor_go_Params_TypeID is the unique identifier for the type Anchor_go_Params.
const Anchor_go_Params_TypeID = 0xd3451f471503cf21

func NewAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func NewRootAnchor_go_Params(s *capnp.Segment) (Anchor_go_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_go_Params{st}, err
}

func ReadRootAnchor_go_Params(msg *capnp.Message) (Anchor_go_Params, error) {
	root, err := msg.RootPtr()
	return Anchor_go_Params{root.Struct()}, err
}

func (s Anchor_go_Params) String() string {
	str, _ := text.Marshal(0xd3451f471503cf21, s.Struct)
	return str
}

func (s Anchor_go_Params) Spec() (Anchor_ProcSpec, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_ProcSpec{Struct: p.Struct()}, err
}

func (s Anchor_go_Params) HasSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Anchor_go_Params) SetSpec(v Anchor_ProcSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSpec sets the spec field to a newly
// allocated Anchor_ProcSpec struct, preferring placement in s's segment.
func (s Anchor_go_Params) NewSpec() (Anchor_ProcSpec, error) {
	ss, err := NewAnchor_ProcSpec(s.Struct.Segment())
	if err != nil {
		return Anchor_ProcSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Anchor_go_Params_List is a list of Anchor_go_Params.
type Anchor_go_Params_List struct{ capnp.List }

// NewAnchor_go_Params creates a new list of Anchor_go_Params.
func NewAnchor_go_Params_List(s *capnp.Segment, sz int32) (Anchor_go_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_go_Params_List{l}, err
}

func (s Anchor_go_Params_List) At(i int) Anchor_go_Params { return Anchor_go_Params{s.List.Struct(i)} }

func (s Anchor_go_Params_List) Set(i int, v Anchor_go_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Params_List) String() string {
	str, _ := text.MarshalList(0xd3451f471503cf21, s.List)
	return str
}

// Anchor_go_Params_Promise is a wrapper for a Anchor_go_Params promised by a client call.
type Anchor_go_Params_Promise struct{ *capnp.Pipeline }

func (p Anchor_go_Params_Promise) Struct() (Anchor_go_Params, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_go_Params{s}, err
}

func (p Anchor_go_Params_Promise) Spec() Anchor_ProcSpec_Promise {
	return Anchor_ProcSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Anchor_go_Results struct{ capnp.Struct }

// Anchor_go_Results_TypeID is the unique identifier for the type Anchor_go_Results.
const Anchor_go_Results_TypeID = 0x9fb80cccef72e8de

func NewAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_go_Results{st}, err
}

func NewRootAnchor_go_Results(s *capnp.Segment) (Anchor_go_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_go_Results{st}, err
}

func ReadRootAnchor_go_Results(msg *capnp.Message) (Anchor_go_Results, error) {
	root, err := msg.RootPtr()
	return Anchor_go_Results{root.Struct()}, err
}

func (s Anchor_go_Results) String() string {
	str, _ := text.Marshal(0x9fb80cccef72e8de, s.Struct)
	return str
}

// Anchor_go_Results_List is a list of Anchor_go_Results.
type Anchor_go_Results_List struct{ capnp.List }

// NewAnchor_go_Results creates a new list of Anchor_go_Results.
func NewAnchor_go_Results_List(s *capnp.Segment, sz int32) (Anchor_go_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_go_Results_List{l}, err
}

func (s Anchor_go_Results_List) At(i int) Anchor_go_Results {
	return Anchor_go_Results{s.List.Struct(i)}
}

func (s Anchor_go_Results_List) Set(i int, v Anchor_go_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_go_Results_List) String() string {
	str, _ := text.MarshalList(0x9fb80cccef72e8de, s.List)
	return str
}

// Anchor_go_Results_Promise is a wrapper for a Anchor_go_Results promised by a client call.
type Anchor_go_Results_Promise struct{ *capnp.Pipeline }

func (p Anchor_go_Results_Promise) Struct() (Anchor_go_Results, error) {
	s, err := p.Pipeline.Struct()
	return Anchor_go_Results{s}, err
}

type Frac struct{ capnp.Struct }

// Frac_TypeID is the unique identifier for the type Frac.
const Frac_TypeID = 0xf84b0bdc2ebe874f

func NewFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func NewRootFrac(s *capnp.Segment) (Frac, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Frac{st}, err
}

func ReadRootFrac(msg *capnp.Message) (Frac, error) {
	root, err := msg.RootPtr()
	return Frac{root.Struct()}, err
}

func (s Frac) String() string {
	str, _ := text.Marshal(0xf84b0bdc2ebe874f, s.Struct)
	return str
}

func (s Frac) Numer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Frac) HasNumer() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Frac) SetNumer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Frac) Denom() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Frac) HasDenom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Frac) SetDenom(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Frac_List is a list of Frac.
type Frac_List struct{ capnp.List }

// NewFrac creates a new list of Frac.
func NewFrac_List(s *capnp.Segment, sz int32) (Frac_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Frac_List{l}, err
}

func (s Frac_List) At(i int) Frac { return Frac{s.List.Struct(i)} }

func (s Frac_List) Set(i int, v Frac) error { return s.List.SetStruct(i, v.Struct) }

func (s Frac_List) String() string {
	str, _ := text.MarshalList(0xf84b0bdc2ebe874f, s.List)
	return str
}

// Frac_Promise is a wrapper for a Frac promised by a client call.
type Frac_Promise struct{ *capnp.Pipeline }

func (p Frac_Promise) Struct() (Frac, error) {
	s, err := p.Pipeline.Struct()
	return Frac{s}, err
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xa683121d7d12cdc6

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.RootPtr()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xa683121d7d12cdc6, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetHead(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Value, error) {
	p, err := s.Struct.Ptr(1)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetTail(v Value) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xa683121d7d12cdc6, s.List)
	return str
}

// LinkedList_Promise is a wrapper for a LinkedList promised by a client call.
type LinkedList_Promise struct{ *capnp.Pipeline }

func (p LinkedList_Promise) Struct() (LinkedList, error) {
	s, err := p.Pipeline.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Promise) Head() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p LinkedList_Promise) Tail() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xfbc39fed30ae733e

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.RootPtr()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xfbc39fed30ae733e, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vector) SetTail(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xfbc39fed30ae733e, s.List)
	return str
}

// Vector_Promise is a wrapper for a Vector promised by a client call.
type Vector_Promise struct{ *capnp.Pipeline }

func (p Vector_Promise) Struct() (Vector, error) {
	s, err := p.Pipeline.Struct()
	return Vector{s}, err
}

func (p Vector_Promise) Root() Vector_Node_Promise {
	return Vector_Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x806044540cfc08ec

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.RootPtr()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x806044540cfc08ec, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Value_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetValues(v Value_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Value_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x806044540cfc08ec, s.List)
	return str
}

// Vector_Node_Promise is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Promise struct{ *capnp.Pipeline }

func (p Vector_Node_Promise) Struct() (Vector_Node, error) {
	s, err := p.Pipeline.Struct()
	return Vector_Node{s}, err
}

const schema_c8aa6d83e0c03a9d = "x\xda\xacW\x7fl\x1b\xf5\x15\x7f\x9f\xef\x9d}\x89\xe3" +
	"\xc4\xbe\x9e#VX\x17\x0du\x1bdk\xd6\xa6\xa5Z" +
	"\xad1'(i\x97.Msq\xa9:\xa9 .\xf6" +
	"%\xb1j\xfb\xa2\xb3\xd3.\x82j\xedZ\x04h0\xc1" +
	"4D;\x81\xf8\xb9\xa9T\x81\x81\xba?\xdaJ\xa0\xb1" +
	"\x1f\x8c\xc1\xd0D\x99\x90&M\xdb\x8a\x84\x0ah\x13\x1b" +
	"\xeb\xa0\x94\x92\xef\xf4\xce\xf6\xdd\xc5iJ'\xed?\xfb" +
	">\xef\xfb\xde\xe7\xde{\xdf\xcf{\xb7\xfa&\xb5O\xac" +
	"\x89<\xa0\x11\x99;\"Q\xf9\xf7\x96\x0b\xf1m\x03\xb7" +
	"\xec#\xb3\x13\x90\xdf\xa8<\xbd\xfa\x1f\x0f\xff\xeac\x1a" +
	"\x84&\x88\x8cg\x95S\xc6s\x8aFd\x9cP\xf6\x10" +
	"\xa4\xbb\xfe\xb7#\x07\xe7\xfe\xf5\x03\xd2;A\x14\x81F" +
	"\xb4v\x83\xba\x0c\x04\xa3_\xcd\x10\xe4\xd9\x9d\xe7v|" +
	"\xa6c\xe3\xfda\x03\xabfP\xf0\x0c\xfe\xf2\xb6\xfb\xde" +
	"\xef\xe3\xc7\x1f\xae\x19\xa8\x8c\xdf\xa5\x0a\x90*?\xfb\xf2" +
	"\xaa\xe7\x87OM<N\xfa\xe7 \xdf8\x9e\x1e9\xf3" +
	"\xfd[\x8fS\x84\xa3\xaf-\xa9\xdd0\xf6\xb2\xb51\xab" +
	"\xfe\x8c _|u\xd9\xde\x15\xcb\x0e\xfc\x94\xcc\x0e@" +
	">\x94\xfe\xc5\xdf\x0e\x94\x8e\xbeD\x11\xc1&k\"/" +
	"\x1b\xd7G\xf8\xd7\x86\x08\x1b\xf7\xfd\xfa\xc2\xc4\x8d\x1f\x0e" +
	"?\x19\x8a\xf9Z$\xc61\x97\xf7\xbcx\xe4\x87\x1f\\" +
	"x6L\xf7\x04C0^\x880\xddg\x127?\xbe" +
	"\xbe\x07\xc7\xc2\x06\xa7#\xde\xfb\xbc\xe3\x19\xf8D\xbd\xfc" +
	"\x8d\xfd\xf1\xc0\xab\xe2\xe4\xdcY\xce\x9fBd\xb4F\xdf" +
	"7:\xa3\x9b\x88\x8c\xc1(3y\xec\x95[\xf7\xbe{" +
	"t\xc3I\xa6-\x02\xda\x83\xd0:\x88\x8c\xd3\xd1\xc7\x8c" +
	"w\xa2\x1c\xe2\xad\xe8\x15\x0aA\x1e\xfe\xe7\xb1\x8e\xfdW" +
	"\xad\xfce8zgLp\xf4\xe51\x8e\xfe\xf4\x8e\xcc" +
	"\x17\xff\xda7\xf4\x9b\xd0\x9bm\x89]\xc9ov\xe7\xdc" +
	"\xcd\xe5W\xf4\x8d\xbfk\xca&\xe7g\xedu\xb1n\x18" +
	"\x831NP\x7f\x8c\xcb\xfa\xf9?(\x9d\x9b\xba\x06_" +
	"\x0f\xc51\x1e\x8a\x9d'\x18\x8fzaN\x9dL\xce\x8f" +
	"|e\xe4\xccBg^\xb8\x17\xd8\xd7k1\x8d\x14\xf9" +
	"\x92\xf9\xbd\xd7\xdf<v\xdb\xdbM!=\xd6O\xc5n" +
	"\x80\xf1\x9c\x17\xf2\x84\xe7r\xd5=w\xbc9\xfd\xc6\x97" +
	"\xdfm\xce\x9b\xf0\xfa\xeeO\xb1\xf3\xc6[\x9e\xf5\xe9\x18" +
	"\xe7\xed\x81\x8f\xe6\xb3W\x1d\xda\xfe^\xf0\x9e\xc6l\xdb" +
	"yR\x83\x83z\x87\x12\xe4\x93`\xdc\xd4v\xd4\xb0\xdb" +
	"\xbeD\xb4v\x7f\xdb&\x18Cq\x8dHn\xbd\xe3\xf9" +
	"\x9e?\xb7}\xeb\x1c\xe9\x1d\x8b\x9b&\xfecc\x03[" +
	"\x19\xd7\xc59'\xfeU\xb8X\x87\xdd\x17?j\x1c\x8e" +
	"_Ad<\x1a?C\x90\xd6t\xe1\xab\xd6t\xa1G" +
	"\xe4\xac\xe9\xf2tz\xbb\x9d\xab:n\xcf\x88\x93\x87=" +
	"\x0a\x98-\x8a\x1a\x97R\x05\x91~\xedf\"\xf3\x1a\x05" +
	"\xe6\x80@;\xe6e\x0a\xfc\xb4?Md~]\x81\xb9" +
	"C@\x8e\xbbV97eW\x88\x08\x1d\x84Q\x05H" +
	"\x06\xf7\x94\xc0\x0f3\xbb\xad\xe2\x8c]\x09p\xbf\xb3j" +
	"\xb8\xcfH\xa91\xea/\xe7\xa6\x1c\xb7\xa7Ru\\{" +
	"\xe5\xa8\xe5Z%TLUQ\x89<V\xed\xbdDf" +
	"\x8b\x023%\xd0\xe5\xb9nr\x99\\\xd2\xe5\x1e\xab\xb8" +
	"k\xe5\x98]\x99)V\x17\xbaL\x07.3\x96g\x0b" +
	"=\xa8\x17\x01z\xc8\xa7\xb6\xc0\xe7\xa4S\xf7X\xa1\x86" +
	"\xc1\x02|\xd4ur\xd9i;\xd7\xb35\x9b\xe0\xdf\x9c" +
	"\xe3\xb8\x1fy\xb0\x9b\xc8\xecS`\xee\x14\xd0\x81Z\x86" +
	"\xbf}5\x91\xb9M\x819-\xa0\x0b\x91\x82 \xd2K" +
	"\xfcpJ\x81Y\x15HX\xee\xa4\x9f\xcf8\x09\xfe\xa9" +
	"\xd9\xe5\xddA\x8a\xfd+UK\xb1\x96/\xb8\x9ea|" +
	"q\x03\x0c\x17\xca\xbb\xec\xfcp\xa1R%j\"\xd7[" +
	"'7,\xd0\xe06\xc4\x84\x07\x14\x98\xa3\xcc\x0d5n" +
	"[\xf8\xe17\x15\x98\xdb\x04\xbar\xceL\xb9\x8a\x16\x12" +
	"h!$\xa6l+\xbf\xb8>\x89\xaaU(^v\xd9" +
	"\x8a\x8e\x95\xaf5B\x85\xe8R\xa5m\xd8\x84K\xdb\x1d" +
	"\x9461mU\xa7\x16\xa5\xe1\"\xb1.\xd6\"\xffK" +
	"\xd7\x89\xe6\x0e\xe8\xf2Z\xc0L\x02!\xe5Y>\x16\x9a" +
	"#\xcb\xd3!\xe5\xeaL\x874QO\xcbM\x8e\xeb\xcc" +
	"T\x0be\x82\x9d\xd9\x9a\xe5.\xca\x0c8\xb9]\xb6\x9b" +
	"\x19,\xef\xden\xb9\\\xb3\xc6\xa5\x1d\x1c\x0b\x0a\x14\\" +
	"\xda-\xe9\xa0B\xed\xe2\x13Y\xab\x9b\xc9O\x87\xebW" +
	"y2\x08\x82d@\xb3\xf6j\x19\xa7\xc2a\x91\x0c(" +
	"\xd7\x81\xbcG\x04\xc9\x80~S2P\xd7\x19K+\xce" +
	"x\x0a\xf35\x9f\xac1\x8b\xab\x89\xb2U(\xc8\xee\x83" +
	"\xc0\x0a\xcc\xcb\xa4G\xd8\xd8\x8bn\xa2\xecw\x189\xc8" +
	"\x88\xf8D\xd6\x9a\xcd\xd8\xef\x9d\xb9\x8d\x91;!\xd0\xae" +
	"\\\x90)\xf0\x00\xbb\x1di\xa2\xec>\x06\xee\xe6#\xea" +
	"\xc7|D%2\xee\xf2\x8e\x1cd\xe4^>\x129/" +
	"S\x88\x10\x19\xf7`3Q\xf6n\x06\x0e1\x10\xfdH" +
	"\xa6\x10%2\xee\xf7\xc2\xdf\xcb\xc0\x83\xecK;'E" +
	"\xca\x9b5\x87=\xe4G\x8c<\xc2GZ>\x94)\xb4" +
	"\xf0\x10\xf2\x82\x1cb\xe0\x09\x06Z?\x90)\xb4\xb2\xec" +
	"\xe2\x06\xa2\xec\x83\x0c\x1ca \xf6\x1f\x99B\x8c\xc8\xf8" +
	"\x89G\xf8\x11\x06\xe6\x18h;+Sh#2\x9e\xf4" +
	"b<\xc1\xc03\x0c\xc4\xff-S\x88\x13\x19Oy\xc0" +
	"\x11\x06~\xce@\xfb\xfb2\x85v^~<Ws\x0c" +
	"\x1c\x87\x80V.\x14)\x9a\x18w\x9c\"@\x02 h" +
	"\x85\xf5\xeb\x10!\x81\x08!3^\x98\x1c*W\xd1N" +
	"\x02\xed\x04mb\xfd:\xb4\x91@\x1bA\x8e\x17&7" +
	"\x16\x1d\xab\xca\x8a^\xbf*\x89\x09\xd7\xe2\xd2\xfb#\xa9" +
	"~\x89sS\x96\x0b\x95\x04T\x82V\xa9\xfa\x0a\xf3\xdd" +
	"]\xf6\xec\x1e\xc7\xcd7\xfeg*\xb3\xa5q\xa7\xe8\xbb" +
	"\x0b_\xc3D\xb1P\xa9\"\x19,I\xf5\xb6\xda\xed\x8d" +
	"%$\x83\xd9vi\x89\xa8\xf8*\x1c\xbe\xb4<\xc0\xe2" +
	"\x0a\xcck\x04dn\xaaP\xcc\xbbvy\xc1\xa8\xf2G" +
	"\xfbe\x8c\"/\x80R\xad,a\xe4\x0b\xfd`9\xc1" +
	"\x97\xb2>L\xebT\xaee\x1dZ\xa9\xc0\\\x1d\x12\xfa" +
	"U\xbd\xf5\x01\xbbN Q\xb6Jv#+u\x85Y" +
	"B\xb1\x83\xc9\x93\xa9)\xdeRzW\x99\xb6\xb9n\xfe" +
	"~s\xc9\x14\xfa\xfc\x07\x9c\x04_\xe9Q\x04\x96\xea\xc5" +
	"-\x1b\xbad{\x83\xe3\xff\"\x96\xd9\x99\xf1L\xed\xe7" +
	"\x12\x83r\x98eM\xca\xc5\xd3h\x85\x98\x97\x8dy\x14" +
	"R\xbb\x85\xdd\xe6:N\x95\xa2\x9f>\xe3Esw\xd5" +
	"3\xdd\xacj\xfd\xe5\x04[\x98-\x08\xad\x89z\xebX" +
	"\x90s\xbdu\xb3\xcc\xce\x8c{\x9e\x08\xael$\x8f\x88" +
	"\xcc\x94\x12!\xf2\x17F4Vh\xfd\xbe+I\xe8\xb7" +
	"k\x80\xbf\xf4\xa3\xf1\xb1\xa2\xcfv\x93\xd0K\x1a\x84\xff" +
	"\xa9\x80\xc6\xe2\xaf[\x8c\xdd\xa8A\xf1?~\xd0\xd8\xba" +
	"\xf5\xa1^\x12\xfa\xf5\x1aT\x7f\x83F\xe3\xfbF_\xc3" +
	"\xf1\xbe\xa0)\xc5J\x1f\x12<I\xfb\x90\xe0A\xd8\x87" +
	".\xaf\xf5\xfb\xa0L:}\x08wD\xfd\xfd7\xba\x8a" +
	"\x95k\xea\xf4\xdeO\xe9\xf4\xae\xf2L\xc9v\x1b\xe2\xd3" +
	"\x95\xb7\xcbN\xa9\xf1o\xd1\xd4\xb0\x13\xac\x03\xa6\x0a\x04" +
	"k\xa5\x8e\xee\xc4\x88\x93\xb7\xcd\xa4\x1f\xd4b\xff;\x15" +
	"\x98S\x1cT\xad\x05\xb5\xf9\xe1-\x0a\xcc\xa2\x00\xeak" +
	"T\x81;&_\xdf\xad\x14x\x93C/u\xd7w\xab" +
	"\x83\xcd\xfbKWe\xaa0QE\x94\x04\xa2\xf5\xf6i" +
	"Zp\xfdmf\xa9\xf5\xf6\xbf\x01\x00\x00\xff\xff\xb49" +
	"\xdb\xd8"

func init() {
	schemas.Register(schema_c8aa6d83e0c03a9d,
		0x806044540cfc08ec,
		0x8ef1ac844ec73672,
		0x95460e1858f85cf4,
		0x9fb80cccef72e8de,
		0xa366d24cbe2dca1c,
		0xa683121d7d12cdc6,
		0xa94cf75566fcc440,
		0xb1fcf692a8c62e19,
		0xb3012e36a35e0fb0,
		0xb87b8be74e3ab8d6,
		0xba39aaea7d7bcba2,
		0xc2241b810eb3f099,
		0xc54940df263f58ae,
		0xc94611cb6e5eac88,
		0xd3451f471503cf21,
		0xe74e2c4efe10bad2,
		0xe87cb3e2d38251c8,
		0xea2bd670e2878d2d,
		0xef56981b53fef997,
		0xf4acba02cd83d452,
		0xf84b0bdc2ebe874f,
		0xfbc39fed30ae733e)
}
