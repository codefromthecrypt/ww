// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil     Value_Which = 0
	Value_Which_bool    Value_Which = 1
	Value_Which_char    Value_Which = 2
	Value_Which_str     Value_Which = 3
	Value_Which_keyword Value_Which = 4
	Value_Which_symbol  Value_Which = 5
	Value_Which_path    Value_Which = 6
	Value_Which_list    Value_Which = 7
	Value_Which_vector  Value_Which = 8
)

func (w Value_Which) String() string {
	const s = "nilboolcharstrkeywordsymbolpathlistvector"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_bool:
		return s[3:7]
	case Value_Which_char:
		return s[7:11]
	case Value_Which_str:
		return s[11:14]
	case Value_Which_keyword:
		return s[14:21]
	case Value_Which_symbol:
		return s[21:27]
	case Value_Which_path:
		return s[27:31]
	case Value_Which_list:
		return s[31:35]
	case Value_Which_vector:
		return s[35:41]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xd89c45c1f82f00a4

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.RootPtr()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xd89c45c1f82f00a4, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Bool() bool {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(16)
}

func (s Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetBit(16, v)
}

func (s Value) Char() int32 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != char")
	}
	return int32(s.Struct.Uint32(4))
}

func (s Value) SetChar(v int32) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint32(4, uint32(v))
}

func (s Value) Str() (string, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasStr() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetStr(v string) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetText(0, v)
}

func (s Value) Keyword() (string, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != keyword")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasKeyword() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) KeywordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetKeyword(v string) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetText(0, v)
}

func (s Value) Symbol() (string, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != symbol")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasSymbol() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SymbolBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetSymbol(v string) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetText(0, v)
}

func (s Value) Path() (string, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != path")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Value) HasPath() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetPath(v string) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetText(0, v)
}

func (s Value) List() (LinkedList, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return LinkedList{Struct: p.Struct()}, err
}

func (s Value) HasList() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetList(v LinkedList) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated LinkedList struct, preferring placement in s's segment.
func (s Value) NewList() (LinkedList, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewLinkedList(s.Struct.Segment())
	if err != nil {
		return LinkedList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Value) Vector() (Vector, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != vector")
	}
	p, err := s.Struct.Ptr(0)
	return Vector{Struct: p.Struct()}, err
}

func (s Value) HasVector() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Value) SetVector(v Vector) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVector sets the vector field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s Value) NewVector() (Vector, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewVector(s.Struct.Segment())
	if err != nil {
		return Vector{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List struct{ capnp.List }

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Value_List{l}, err
}

func (s Value_List) At(i int) Value { return Value{s.List.Struct(i)} }

func (s Value_List) Set(i int, v Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Value_List) String() string {
	str, _ := text.MarshalList(0xd89c45c1f82f00a4, s.List)
	return str
}

// Value_Promise is a wrapper for a Value promised by a client call.
type Value_Promise struct{ *capnp.Pipeline }

func (p Value_Promise) Struct() (Value, error) {
	s, err := p.Pipeline.Struct()
	return Value{s}, err
}

func (p Value_Promise) List() LinkedList_Promise {
	return LinkedList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Value_Promise) Vector() Vector_Promise {
	return Vector_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type LinkedList struct{ capnp.Struct }

// LinkedList_TypeID is the unique identifier for the type LinkedList.
const LinkedList_TypeID = 0xabb6209005a46075

func NewLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func NewRootLinkedList(s *capnp.Segment) (LinkedList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LinkedList{st}, err
}

func ReadRootLinkedList(msg *capnp.Message) (LinkedList, error) {
	root, err := msg.RootPtr()
	return LinkedList{root.Struct()}, err
}

func (s LinkedList) String() string {
	str, _ := text.Marshal(0xabb6209005a46075, s.Struct)
	return str
}

func (s LinkedList) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s LinkedList) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s LinkedList) Head() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasHead() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetHead(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHead sets the head field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewHead() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LinkedList) Tail() (Value, error) {
	p, err := s.Struct.Ptr(1)
	return Value{Struct: p.Struct()}, err
}

func (s LinkedList) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s LinkedList) SetTail(v Value) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s LinkedList) NewTail() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LinkedList_List is a list of LinkedList.
type LinkedList_List struct{ capnp.List }

// NewLinkedList creates a new list of LinkedList.
func NewLinkedList_List(s *capnp.Segment, sz int32) (LinkedList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return LinkedList_List{l}, err
}

func (s LinkedList_List) At(i int) LinkedList { return LinkedList{s.List.Struct(i)} }

func (s LinkedList_List) Set(i int, v LinkedList) error { return s.List.SetStruct(i, v.Struct) }

func (s LinkedList_List) String() string {
	str, _ := text.MarshalList(0xabb6209005a46075, s.List)
	return str
}

// LinkedList_Promise is a wrapper for a LinkedList promised by a client call.
type LinkedList_Promise struct{ *capnp.Pipeline }

func (p LinkedList_Promise) Struct() (LinkedList, error) {
	s, err := p.Pipeline.Struct()
	return LinkedList{s}, err
}

func (p LinkedList_Promise) Head() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p LinkedList_Promise) Tail() Value_Promise {
	return Value_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Vector struct{ capnp.Struct }

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xf43c9c7fd25a0b43

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vector{st}, err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.RootPtr()
	return Vector{root.Struct()}, err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xf43c9c7fd25a0b43, s.Struct)
	return str
}

func (s Vector) Count() uint32 {
	return s.Struct.Uint32(0)
}

func (s Vector) SetCount(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Vector) Shift() uint8 {
	return s.Struct.Uint8(4)
}

func (s Vector) SetShift(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s Vector) Root() (Vector_Node, error) {
	p, err := s.Struct.Ptr(0)
	return Vector_Node{Struct: p.Struct()}, err
}

func (s Vector) HasRoot() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector) SetRoot(v Vector_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated Vector_Node struct, preferring placement in s's segment.
func (s Vector) NewRoot() (Vector_Node, error) {
	ss, err := NewVector_Node(s.Struct.Segment())
	if err != nil {
		return Vector_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Vector) Tail() (Value_List, error) {
	p, err := s.Struct.Ptr(1)
	return Value_List{List: p.List()}, err
}

func (s Vector) HasTail() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vector) SetTail(v Value_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewTail sets the tail field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector) NewTail(n int32) (Value_List, error) {
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Vector_List is a list of Vector.
type Vector_List struct{ capnp.List }

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vector_List{l}, err
}

func (s Vector_List) At(i int) Vector { return Vector{s.List.Struct(i)} }

func (s Vector_List) Set(i int, v Vector) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_List) String() string {
	str, _ := text.MarshalList(0xf43c9c7fd25a0b43, s.List)
	return str
}

// Vector_Promise is a wrapper for a Vector promised by a client call.
type Vector_Promise struct{ *capnp.Pipeline }

func (p Vector_Promise) Struct() (Vector, error) {
	s, err := p.Pipeline.Struct()
	return Vector{s}, err
}

func (p Vector_Promise) Root() Vector_Node_Promise {
	return Vector_Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Vector_Node struct{ capnp.Struct }
type Vector_Node_Which uint16

const (
	Vector_Node_Which_branches Vector_Node_Which = 0
	Vector_Node_Which_values   Vector_Node_Which = 1
)

func (w Vector_Node_Which) String() string {
	const s = "branchesvalues"
	switch w {
	case Vector_Node_Which_branches:
		return s[0:8]
	case Vector_Node_Which_values:
		return s[8:14]

	}
	return "Vector_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Vector_Node_TypeID is the unique identifier for the type Vector_Node.
const Vector_Node_TypeID = 0x917e2c3a50b433f0

func NewVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func NewRootVector_Node(s *capnp.Segment) (Vector_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Vector_Node{st}, err
}

func ReadRootVector_Node(msg *capnp.Message) (Vector_Node, error) {
	root, err := msg.RootPtr()
	return Vector_Node{root.Struct()}, err
}

func (s Vector_Node) String() string {
	str, _ := text.Marshal(0x917e2c3a50b433f0, s.Struct)
	return str
}

func (s Vector_Node) Which() Vector_Node_Which {
	return Vector_Node_Which(s.Struct.Uint16(0))
}
func (s Vector_Node) Branches() (Vector_Node_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Vector_Node_List{List: p.List()}, err
}

func (s Vector_Node) HasBranches() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetBranches(v Vector_Node_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Vector_Node_List, preferring placement in s's segment.
func (s Vector_Node) NewBranches(n int32) (Vector_Node_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewVector_Node_List(s.Struct.Segment(), n)
	if err != nil {
		return Vector_Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Vector_Node) Values() (Value_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != values")
	}
	p, err := s.Struct.Ptr(0)
	return Value_List{List: p.List()}, err
}

func (s Vector_Node) HasValues() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vector_Node) SetValues(v Value_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Vector_Node) NewValues(n int32) (Value_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Vector_Node_List is a list of Vector_Node.
type Vector_Node_List struct{ capnp.List }

// NewVector_Node creates a new list of Vector_Node.
func NewVector_Node_List(s *capnp.Segment, sz int32) (Vector_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Vector_Node_List{l}, err
}

func (s Vector_Node_List) At(i int) Vector_Node { return Vector_Node{s.List.Struct(i)} }

func (s Vector_Node_List) Set(i int, v Vector_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Vector_Node_List) String() string {
	str, _ := text.MarshalList(0x917e2c3a50b433f0, s.List)
	return str
}

// Vector_Node_Promise is a wrapper for a Vector_Node promised by a client call.
type Vector_Node_Promise struct{ *capnp.Pipeline }

func (p Vector_Node_Promise) Struct() (Vector_Node, error) {
	s, err := p.Pipeline.Struct()
	return Vector_Node{s}, err
}

const schema_e7dd644ba93cb72c = "x\xdat\x92\xbfO<U\x14\xc5\xcfyo\xf6\x07q" +
	"\xd7\x99\xc9L\xb4\"\xa8\xb1\x10\x82\xa0\xd2\x11\x12P\xd9" +
	"\xc4\x1fH\xf6\xb1\xc6\x18c\xc1\xb03\xb2\x13\x86\x9d\xcd" +
	"\xee\x00\xa1\x91\xc6?@K\x13\x1a\x13,\xd4\xc2\xc4\x18" +
	"\xad)(,lHL\x8c\x895\x16\x9a`\x82qQ" +
	"\xe0\x99\xb7\xeb\xee~\xe1\xcb\xb7\x9b{\xee\xcd\x9d\xf3\xce" +
	"\xfd\xbc\x10rI\xbc\x98\xdb$\xa0\x9c\\^\x9f\xcf}" +
	"[\x9d\x9f\xfe\xf0\x13\xa8'H\xfd\xeac\xef\x9d\x1e\x1c" +
	".\\\xa0\xc2\x82\x00\xdcO\x7fq?/\x00\xeeg{" +
	"\xa0\xdeY?\xca}\xfc\xd4w_A\xd9\xa4\x9e\xfe~" +
	"\xe1\x8b7\xc3_\xcf\x90\x13\x05\xc0{\x9a\xa7\xde\xf34" +
	"_\x93\xfc\x1a\xbc>\x9a\xed\x1eW\x0e\x7f\xbe=Za" +
	"a\x0c\xf0\x8e\xf9\xa5\xf7\x83\x99\x9d;\xa1&\x1e\xf8\xed" +
	"}\x9bO\xe47\xde\x8f\xf2I\xc0\xfbI\x9e\x81:h" +
	"\xc5\xb3I\xd0\xdc\x143\xf5\xa0\xd5l\xcd\xbf\x13\xd5\xb3" +
	"\xb4=\xb3\x9a\xca0\xaa\x92\xaa(\xad\x92\xd6\x16\x01w" +
	"\xf2\x0d@='\xa9\x96\x05\xcb\xbc\xd1>\x8d\xfa\xf2<" +
	"\xa0\x16$\xd5\xbb\x82z\xa3\x1d4\xeb\x8d\xa8\x03\x80\x8f" +
	"\x83UI:\xa3P@#.\xee\x06\xc9N\xd4\x19\xf6" +
	"\x07\x8f\xebw\x1f2\xb4\x127\xb7\xa2p%\xee03" +
	"~J\xd2\x02zv*/\x01jIR\xad\x08\x92}" +
	"3\xafO\x01jYRU\x05]A\x9f&\xf6\xb7\x8c" +
	"\xf8\x9a\xa4z[p\xa2\x9e\xee43\x16!X\x04\xed" +
	"F\x14\x84\xb7\x1c8\xa0\x9d\x05qrW\x1c\xda\xe2 " +
	"'\xdb\xbc\xc28zv\x94\xd0\x1f\xcf\x00\xea7Iu" +
	"!8\xce\x1b\xed\xf4]\xfdi\x0c\xfc.\xa9\xba\x82\xe3" +
	"\xe2Z\xff\xef\xeb/#\x9fK\xaa+\xc1\xb2\xbc\xd2>" +
	"%\xe0^\x9a\x1d\x17\x92k\x14,[\xffj\x9f\x16\xe0" +
	"^\xbf\x02\xa8\xaed\xcd2r\xee\x1f\xed3\x07x\xa4" +
	"I\xffJ\xb2V4z\xfeR\xfb\xcc\x03^\x8eS\xc0" +
	"\x1a%k%\xa3\x17\xba\xda\xef\xd14f\xf4\x9ae\x1a" +
	"\x8ei\x14\xff\xd6>\x8b\x80W6\x8bjE\xd3\xf0)" +
	"Xh\xc6\x09\xf2\xf6F\x9a&$\x04\x09\xda\xf5F\xd0" +
	"\xa6\x05A\x0b,t\xb26K\x10,\x81\x07[\xd1\xfe" +
	"^\xda\x0e\x07\xf5bg\x7f{#M\x06\xa5\xdd\x0a\xb2" +
	"\xc6\xb0H\xe2NFg\x04\x7f?\xdd\xc5\xdd\x1eut" +
	"F\xec>*\xf6\x89\xde\xa4\xb2\xc8\x11W.\xa7\xec\xd5" +
	"4\x8c\x943\x84#0p\xbc/\xa9\x1a\x82.\xad\xfe" +
	"\x1d\"#\xaeK\xaaD\x90\xa2\x7f\x84\xd8\x1c!\x94T" +
	"-AW\xb2\x7f\x83m#6$\xd5Gw\x89\x99\xe8" +
	"4\xe2\x0f2\xe6!\x98\x07\xedv\x9afw\x08\x1f\x12" +
	"t?\xdf\xff\x05\x00\x00\xff\xffu\xcb\xfc-"

func init() {
	schemas.Register(schema_e7dd644ba93cb72c,
		0x917e2c3a50b433f0,
		0xabb6209005a46075,
		0xd89c45c1f82f00a4,
		0xf43c9c7fd25a0b43)
}
