// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Child struct{ capnp.Struct }

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0x95dd102833f224c5

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child{root.Struct()}, err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0x95dd102833f224c5, s.Struct)
	return str
}

func (s Anchor_Child) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Child) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Child) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List struct{ capnp.List }

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_Child_List{l}, err
}

func (s Anchor_Child_List) At(i int) Anchor_Child { return Anchor_Child{s.List.Struct(i)} }

func (s Anchor_Child_List) Set(i int, v Anchor_Child) error { return s.List.SetStruct(i, v.Struct) }

func (s Anchor_Child_List) String() string {
	str, _ := text.MarshalList(0x95dd102833f224c5, s.List)
	return str
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (p Anchor_Child_Future) Struct() (Anchor_Child, error) {
	s, err := p.Future.Struct()
	return Anchor_Child{s}, err
}

func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

func (s Anchor_ls_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_ls_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xd377c9b486ad95d5, s.List)
	return str
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Child_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xb0fd7286c7f13ef3, s.List)
	return str
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xbecada985190dfe6

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xbecada985190dfe6, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_walk_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xbecada985190dfe6, s.List)
	return str
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xa7762282e307ed37

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xa7762282e307ed37, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xa7762282e307ed37, s.List)
	return str
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Host struct{ Client *capnp.Client }

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) Join(ctx context.Context, params func(Host_join_Params) error) (Host_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Host_join_Results_Future{Future: ans.Future()}, release
}
func (c Host) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Host) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Host) AddRef() Host {
	return Host{
		Client: c.Client.AddRef(),
	}
}

func (c Host) Release() {
	c.Client.Release()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	Join(context.Context, Host_join) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c, policy)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server, policy *server.Policy) Host {
	return Host{Client: capnp.NewClient(Host_NewServer(s, policy))}
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Host_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Host_join holds the state for a server call to Host.join.
// See server.Call for documentation.
type Host_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_join) Args() Host_join_Params {
	return Host_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Host_join) AllocResults() (Host_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{Struct: r}, err
}

type Host_AddrInfo struct{ capnp.Struct }

// Host_AddrInfo_TypeID is the unique identifier for the type Host_AddrInfo.
const Host_AddrInfo_TypeID = 0xc46371f8329421db

func NewHost_AddrInfo(s *capnp.Segment) (Host_AddrInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Host_AddrInfo{st}, err
}

func NewRootHost_AddrInfo(s *capnp.Segment) (Host_AddrInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Host_AddrInfo{st}, err
}

func ReadRootHost_AddrInfo(msg *capnp.Message) (Host_AddrInfo, error) {
	root, err := msg.Root()
	return Host_AddrInfo{root.Struct()}, err
}

func (s Host_AddrInfo) String() string {
	str, _ := text.Marshal(0xc46371f8329421db, s.Struct)
	return str
}

func (s Host_AddrInfo) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Host_AddrInfo) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_AddrInfo) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Host_AddrInfo) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Host_AddrInfo) Addrs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s Host_AddrInfo) HasAddrs() bool {
	return s.Struct.HasPtr(1)
}

func (s Host_AddrInfo) SetAddrs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Host_AddrInfo) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Host_AddrInfo_List is a list of Host_AddrInfo.
type Host_AddrInfo_List struct{ capnp.List }

// NewHost_AddrInfo creates a new list of Host_AddrInfo.
func NewHost_AddrInfo_List(s *capnp.Segment, sz int32) (Host_AddrInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Host_AddrInfo_List{l}, err
}

func (s Host_AddrInfo_List) At(i int) Host_AddrInfo { return Host_AddrInfo{s.List.Struct(i)} }

func (s Host_AddrInfo_List) Set(i int, v Host_AddrInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s Host_AddrInfo_List) String() string {
	str, _ := text.MarshalList(0xc46371f8329421db, s.List)
	return str
}

// Host_AddrInfo_Future is a wrapper for a Host_AddrInfo promised by a client call.
type Host_AddrInfo_Future struct{ *capnp.Future }

func (p Host_AddrInfo_Future) Struct() (Host_AddrInfo, error) {
	s, err := p.Future.Struct()
	return Host_AddrInfo{s}, err
}

type Host_join_Params struct{ capnp.Struct }

// Host_join_Params_TypeID is the unique identifier for the type Host_join_Params.
const Host_join_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_join_Params(s *capnp.Segment) (Host_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_join_Params{st}, err
}

func NewRootHost_join_Params(s *capnp.Segment) (Host_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_join_Params{st}, err
}

func ReadRootHost_join_Params(msg *capnp.Message) (Host_join_Params, error) {
	root, err := msg.Root()
	return Host_join_Params{root.Struct()}, err
}

func (s Host_join_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, s.Struct)
	return str
}

func (s Host_join_Params) Peers() (Host_AddrInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return Host_AddrInfo_List{List: p.List()}, err
}

func (s Host_join_Params) HasPeers() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_join_Params) SetPeers(v Host_AddrInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Host_AddrInfo_List, preferring placement in s's segment.
func (s Host_join_Params) NewPeers(n int32) (Host_AddrInfo_List, error) {
	l, err := NewHost_AddrInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return Host_AddrInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Host_join_Params_List is a list of Host_join_Params.
type Host_join_Params_List struct{ capnp.List }

// NewHost_join_Params creates a new list of Host_join_Params.
func NewHost_join_Params_List(s *capnp.Segment, sz int32) (Host_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Host_join_Params_List{l}, err
}

func (s Host_join_Params_List) At(i int) Host_join_Params { return Host_join_Params{s.List.Struct(i)} }

func (s Host_join_Params_List) Set(i int, v Host_join_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_join_Params_List) String() string {
	str, _ := text.MarshalList(0xa404c24b5375b9e4, s.List)
	return str
}

// Host_join_Params_Future is a wrapper for a Host_join_Params promised by a client call.
type Host_join_Params_Future struct{ *capnp.Future }

func (p Host_join_Params_Future) Struct() (Host_join_Params, error) {
	s, err := p.Future.Struct()
	return Host_join_Params{s}, err
}

type Host_join_Results struct{ capnp.Struct }

// Host_join_Results_TypeID is the unique identifier for the type Host_join_Results.
const Host_join_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_join_Results(s *capnp.Segment) (Host_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{st}, err
}

func NewRootHost_join_Results(s *capnp.Segment) (Host_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{st}, err
}

func ReadRootHost_join_Results(msg *capnp.Message) (Host_join_Results, error) {
	root, err := msg.Root()
	return Host_join_Results{root.Struct()}, err
}

func (s Host_join_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, s.Struct)
	return str
}

// Host_join_Results_List is a list of Host_join_Results.
type Host_join_Results_List struct{ capnp.List }

// NewHost_join_Results creates a new list of Host_join_Results.
func NewHost_join_Results_List(s *capnp.Segment, sz int32) (Host_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Host_join_Results_List{l}, err
}

func (s Host_join_Results_List) At(i int) Host_join_Results {
	return Host_join_Results{s.List.Struct(i)}
}

func (s Host_join_Results_List) Set(i int, v Host_join_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_join_Results_List) String() string {
	str, _ := text.MarshalList(0x8f58928e854cd4f5, s.List)
	return str
}

// Host_join_Results_Future is a wrapper for a Host_join_Results promised by a client call.
type Host_join_Results_Future struct{ *capnp.Future }

func (p Host_join_Results_Future) Struct() (Host_join_Results, error) {
	s, err := p.Future.Struct()
	return Host_join_Results{s}, err
}

type Container struct{ Client *capnp.Client }

// Container_TypeID is the unique identifier for the type Container.
const Container_TypeID = 0xf6015788be04b4e3

func (c Container) Get(ctx context.Context, params func(Container_get_Params) error) (Container_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_get_Results_Future{Future: ans.Future()}, release
}
func (c Container) Set(ctx context.Context, params func(Container_set_Params) error) (Container_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_set_Results_Future{Future: ans.Future()}, release
}
func (c Container) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Container) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Container) AddRef() Container {
	return Container{
		Client: c.Client.AddRef(),
	}
}

func (c Container) Release() {
	c.Client.Release()
}

// A Container_Server is a Container with a local implementation.
type Container_Server interface {
	Get(context.Context, Container_get) error

	Set(context.Context, Container_set) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Container_NewServer creates a new Server from an implementation of Container_Server.
func Container_NewServer(s Container_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Container_Methods(nil, s), s, c, policy)
}

// Container_ServerToClient creates a new Client from an implementation of Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Container_ServerToClient(s Container_Server, policy *server.Policy) Container {
	return Container{Client: capnp.NewClient(Container_NewServer(s, policy))}
}

// Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Container_Methods(methods []server.Method, s Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Container_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Container_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Container_get holds the state for a server call to Container.get.
// See server.Call for documentation.
type Container_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_get) Args() Container_get_Params {
	return Container_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_get) AllocResults() (Container_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{Struct: r}, err
}

// Container_set holds the state for a server call to Container.set.
// See server.Call for documentation.
type Container_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_set) Args() Container_set_Params {
	return Container_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_set) AllocResults() (Container_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{Struct: r}, err
}

type Container_get_Params struct{ capnp.Struct }

// Container_get_Params_TypeID is the unique identifier for the type Container_get_Params.
const Container_get_Params_TypeID = 0xe13b74cbca1636d7

func NewContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func NewRootContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func ReadRootContainer_get_Params(msg *capnp.Message) (Container_get_Params, error) {
	root, err := msg.Root()
	return Container_get_Params{root.Struct()}, err
}

func (s Container_get_Params) String() string {
	str, _ := text.Marshal(0xe13b74cbca1636d7, s.Struct)
	return str
}

// Container_get_Params_List is a list of Container_get_Params.
type Container_get_Params_List struct{ capnp.List }

// NewContainer_get_Params creates a new list of Container_get_Params.
func NewContainer_get_Params_List(s *capnp.Segment, sz int32) (Container_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Container_get_Params_List{l}, err
}

func (s Container_get_Params_List) At(i int) Container_get_Params {
	return Container_get_Params{s.List.Struct(i)}
}

func (s Container_get_Params_List) Set(i int, v Container_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_get_Params_List) String() string {
	str, _ := text.MarshalList(0xe13b74cbca1636d7, s.List)
	return str
}

// Container_get_Params_Future is a wrapper for a Container_get_Params promised by a client call.
type Container_get_Params_Future struct{ *capnp.Future }

func (p Container_get_Params_Future) Struct() (Container_get_Params, error) {
	s, err := p.Future.Struct()
	return Container_get_Params{s}, err
}

type Container_get_Results struct{ capnp.Struct }

// Container_get_Results_TypeID is the unique identifier for the type Container_get_Results.
const Container_get_Results_TypeID = 0xad17e9bd30bae1da

func NewContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func NewRootContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func ReadRootContainer_get_Results(msg *capnp.Message) (Container_get_Results, error) {
	root, err := msg.Root()
	return Container_get_Results{root.Struct()}, err
}

func (s Container_get_Results) String() string {
	str, _ := text.Marshal(0xad17e9bd30bae1da, s.Struct)
	return str
}

func (s Container_get_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_get_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_get_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_get_Results_List is a list of Container_get_Results.
type Container_get_Results_List struct{ capnp.List }

// NewContainer_get_Results creates a new list of Container_get_Results.
func NewContainer_get_Results_List(s *capnp.Segment, sz int32) (Container_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Container_get_Results_List{l}, err
}

func (s Container_get_Results_List) At(i int) Container_get_Results {
	return Container_get_Results{s.List.Struct(i)}
}

func (s Container_get_Results_List) Set(i int, v Container_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_get_Results_List) String() string {
	str, _ := text.MarshalList(0xad17e9bd30bae1da, s.List)
	return str
}

// Container_get_Results_Future is a wrapper for a Container_get_Results promised by a client call.
type Container_get_Results_Future struct{ *capnp.Future }

func (p Container_get_Results_Future) Struct() (Container_get_Results, error) {
	s, err := p.Future.Struct()
	return Container_get_Results{s}, err
}

type Container_set_Params struct{ capnp.Struct }

// Container_set_Params_TypeID is the unique identifier for the type Container_set_Params.
const Container_set_Params_TypeID = 0xd8107c88f2d8bdfa

func NewContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func NewRootContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func ReadRootContainer_set_Params(msg *capnp.Message) (Container_set_Params, error) {
	root, err := msg.Root()
	return Container_set_Params{root.Struct()}, err
}

func (s Container_set_Params) String() string {
	str, _ := text.Marshal(0xd8107c88f2d8bdfa, s.Struct)
	return str
}

func (s Container_set_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_set_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_set_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_set_Params_List is a list of Container_set_Params.
type Container_set_Params_List struct{ capnp.List }

// NewContainer_set_Params creates a new list of Container_set_Params.
func NewContainer_set_Params_List(s *capnp.Segment, sz int32) (Container_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Container_set_Params_List{l}, err
}

func (s Container_set_Params_List) At(i int) Container_set_Params {
	return Container_set_Params{s.List.Struct(i)}
}

func (s Container_set_Params_List) Set(i int, v Container_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_set_Params_List) String() string {
	str, _ := text.MarshalList(0xd8107c88f2d8bdfa, s.List)
	return str
}

// Container_set_Params_Future is a wrapper for a Container_set_Params promised by a client call.
type Container_set_Params_Future struct{ *capnp.Future }

func (p Container_set_Params_Future) Struct() (Container_set_Params, error) {
	s, err := p.Future.Struct()
	return Container_set_Params{s}, err
}

type Container_set_Results struct{ capnp.Struct }

// Container_set_Results_TypeID is the unique identifier for the type Container_set_Results.
const Container_set_Results_TypeID = 0xf135411ec88044d8

func NewContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func NewRootContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func ReadRootContainer_set_Results(msg *capnp.Message) (Container_set_Results, error) {
	root, err := msg.Root()
	return Container_set_Results{root.Struct()}, err
}

func (s Container_set_Results) String() string {
	str, _ := text.Marshal(0xf135411ec88044d8, s.Struct)
	return str
}

// Container_set_Results_List is a list of Container_set_Results.
type Container_set_Results_List struct{ capnp.List }

// NewContainer_set_Results creates a new list of Container_set_Results.
func NewContainer_set_Results_List(s *capnp.Segment, sz int32) (Container_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Container_set_Results_List{l}, err
}

func (s Container_set_Results_List) At(i int) Container_set_Results {
	return Container_set_Results{s.List.Struct(i)}
}

func (s Container_set_Results_List) Set(i int, v Container_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_set_Results_List) String() string {
	str, _ := text.MarshalList(0xf135411ec88044d8, s.List)
	return str
}

// Container_set_Results_Future is a wrapper for a Container_set_Results promised by a client call.
type Container_set_Results_Future struct{ *capnp.Future }

func (p Container_set_Results_Future) Struct() (Container_set_Results, error) {
	s, err := p.Future.Struct()
	return Container_set_Results{s}, err
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94V]l\x14e\x17>g~v\xa6_Z" +
	"\xda\x97\x97Ol\xfd\xa9\xd4\x12K\xb5\x0dmA\x93\xc5" +
	"\xb8K)\xa1\xad\x90t\xf8\x11\xf1\xc6Lv\x07\xba\xb2" +
	"\xdd-\xb3S\x1b\x13\x0cF#\xa0\x17H\xd0&\x86\x0b" +
	".\x8c\x8054\x0a\x01\x92\x9a\xd0\x04b\xa3\xe0_\x04" +
	"\x09PC\x10\xf9I\xbc@\x05\x95\x00)\x8ey\xdf\xd9" +
	"wf\xba]L\xbd\xeaf\xf7\xf49\xcfy\xces\x9e" +
	"\x99\xb9\xab\xe5\xb8\xd4\xa4\xee-\x010z\xd5\x88;}" +
	"\xc1\xae\x93\x8f\x0eo\x7f\x03\xc8\x03\x08\xa0h\x00-\xc3" +
	"\xcar\x04\xc5\xddY;\xfeB\xcb\xef\x0f\xbd\x0dd\x9a" +
	"\xec\xee\xdb\xd3~Y\xdfws\x1c\x00\xe9ne'\x1d" +
	"R\x1e\x03\xa0G\x95-\x94\xa8\x1a\x80{d\xd7\xe0\xe1" +
	"o{\x86\xb7y0*2\x9c\xdbJ'\x02RU\x8d" +
	"\x01\xba\x7f\xfd\xb0\xf4\xcdm;\x9e\x7f\x07\x08\x15}\xe6" +
	"\xab\x12\xeb\xa3\x9dz19>\xb2q`R\x9fJu" +
	"'\x9d\xa5\xce\x04\xa0\x0d\xea\x12\xba\x8a}rGko" +
	"\xb4\xd4U\x9c\x1f\x00\xf2\x7ftG\xcfu<\xd8\xb0\xe3" +
	"\xad\x11P%\x0d\x80.V\xc7\xa8\xc1\xd8\xd0ej?" +
	"\xa0{y\xb8o\xc5\xb3\xc7\x94\x0f\xbd\x96\x9c\x13\x1dT" +
	"\xef\x00\xd2!N\xe9\xa9k\xda\xa5\xd7k^\xde\xcb\xb0" +
	"\x04\xe7\xf3\xeat\xc6\xf9\x0a/\x18\xbb\xf8\xd9\xdc#\xbf" +
	"\xcc\x1c\x02r\xbf_\xa0FjXAY\x84\x15\xfc\xf1" +
	"\xcc\xf5/6\xdbw?\x0d#4D$V\xd0\xc4\x0b" +
	"|\x86\x85\xb3Y\x91\x8fiO\x84\xcd\xd6\x17\xd9BG" +
	"#L\xc3\xab\x17\xb6\x1b\xef\x8f\x9d\x18\x09\xa3\x0dE\xfe" +
	"\xc7\xd0\x0eq\xb4\x1fg\xbd\xd7|kC\xe2s6P" +
	" \x9b7\xfc\x95\xc8\xcf\xf4:\x83\xa1\xd7\"l\xf8G" +
	"^]q`\xa4\xf5\xbbo\xc0\xa0(\x05\xbb\xf4TX" +
	"\xa3\x9d\xa4\x96\xc6>\x99\xda'\x80\xee\xe9\x81\xa1\xcd\x07" +
	"\x8f\xf7\x9f\x0au\xa6\xb75\xa6\xd4]\x8d5\xbes\xe4" +
	"\xec\x8d\xad\x1b+\xce\x86\x85h\xd0\xab\x18\xb3\xf9:+" +
	"H\xd7=~k\xe5Os\xce\x85\xa5^\xa53\x805" +
	"\xfc\xf73O\xdew\xe2+g\xc1E\x0f\x80o\xff\x15" +
	"\xf6\xff\x8a\xfb\xdb\x99\xea\xc3m_w^a<}l" +
	"S\xe7[H\xe9l\x12:\xfe\xd1\x92\xe9\xe6\x85\xab!" +
	"\xe7\x8c\xea\xdc9\xf2\xd3\x1f\x1cH\xecy\xf7W T" +
	"\x0eF\x04\xa4\x83\xfa\x18=\xa43\x12\xfb\xf5%\xf4\x1c" +
	"\xfb\xe4\x9em{\xed\xcb\x87\x17\xce\xbf\x1e\xa2pT\xaf" +
	"AP\xfe\x8e\xcf;\xbej\xf7\xc0\x9f\x01\xf5\x96A\x9d" +
	"\xab\xbe\x9fs\xbftP\x19\xd9\xba\x1aoN\xda\xe1\xf7" +
	"\xfa1\x0f\x9b\x9e\xd6\xb7\xd0\xd9%3\xe1\x097\x91\xee" +
	"\xcb9\x96\xdd\xa8$\xcc\xdeLo\xf4\xb9\x94\xd5\xdf\xd8" +
	"nf\x92i\xcbn\xec\xe6\x7fk\x97[\xb9\xbe\xb4\x83" +
	"9\xbf\x16E\xadl\xf5\x1b:bh\xae\x92\xd6`\x91" +
	"D\x8dn\xcaC\xc5\x96[\x89\xac\x9d4tY\x05\xf0" +
	"\xc5G\xa1\x14i\xaa\x07\x89\xcc\xd6\x10\xc5l\x81\xcc\xa4" +
	"2\x0a\x12)\xd3\xcaS\x8ee\xc71\x96\xcef\xd7\xf7" +
	"\xf5\xc6\xb1\x0bq*\xe4\xbbL\xdb\xec\xc9\x01\x18\x8a\xac" +
	"\x00(\x08@\xcaZ\x01\x0c]F\xa3V\xc2M6'" +
	"\x96\xc3i\x80]2bE@\x1f\x90}\xe9\xf7P\xbd" +
	"\x1e\xed\xd9\x9c\xd3\xf8R6\x95\xc9\xcb\x92\x03Q ~" +
	"\x97s\x8e\xa1`\xd8\xfc\xd8\xe9.L&\xed\x8e\xcc\xda" +
	",p&L\x04q\xec(\x82\x86\x10&\x82\xaa\x953" +
	"\xf48r\x0c\xff\x1c\x01|\"\x92\xd7ha&\xd1\x9d" +
	"\xb5\x1b\x17u\xa7\xe4t\xb2\x0b\xd1\xd0\xfd\x01\xe7\xd4\x03" +
	"\x18\xb52\x1as%$\x883\x98OIC\x14\xc0\xa8" +
	"\x93\xd1\x98'ay\xc6\xec\xb1\xb0\x14$,\x05\x8c\x99" +
	"\x1c\x09I\xa8\x1b\"\x09\x8d.\x15\x8e\x1e\xf3T\x0dk" +
	"\xda\x1chZ\xddkYvHQ_\x88\x02E\xe5\x09" +
	"\x83\xf4\x9b\xe9\xf5\xbe\xd5\xc2\xc8\xd1<\xf2\x0ci\x0aT" +
	"\xf3\x98\x8b\xb2\x19\xc7Le,\xbbq\x9d\xe5pT-" +
	"\xedL@\xad\x0fP\xcb\x93\xa6cb\x19HXvO" +
	"v\xe9\x9c\xbf\xef0J'\x80Q*\xa3Q'\xa1\x9b" +
	"\xe8N\xa5\x93\xb6\x95\x01\x80`v?\xfe\x0bfG\x81" +
	"^\xce\xe0\xbd]\xfbO\x0al\xae^\xc4\xc0\xf2\xe7\"" +
	"\xc2\x0eEz\x93\xa6\xaa\xfc\xb9\xf8\x11\x8c\xe2\xd9@*" +
	"\xeb\xf9\xb9\xc8\xe9\\\x1c\xcb\x99\xa8\x13O\xa5\x88\xe8\xc5" +
	"N\xa4>Xgy\xaf\xe9t\x8b\x89\x98g\xa6\xdd\xc3" +
	"\x1a\xdc\xe3Zfm\xb6\xc0\x8dU\xc5\xdc\xd8\x9cwc" +
	"\x9b\x84r*)\xbcXm&\x93\x81u\xca\x8a7\xe3" +
	"g\xce\x03\x05\xb9\xf1K\xfdV\x8b\x19\xed\xb8\x8c\xc6R" +
	"\x09E\xa7\x8e\x1a\x00\xa3MF\xa3KB\"\xe1\x0c\x94" +
	"\x00\xc82\xf6e\xbb\x8c\xc6J6\x9fe\xd9\x82\x80\xe6" +
	"8iTAB\x15P\xcbY\x1b\xb0\x04$,\x99\xcc" +
	"!\xb0E\x91[\x98\xaax\x93\xcc\x9a\xb3\x1c\xbe\x0d\xb9" +
	"\xe7\xbfy5,\x0c\x8b\xc9b\xa4Z\x03\x90M^6" +
	"\xb2;\xf2\x93{*w\x94\xa7VX\xc4\xdbz\xb1\x1c" +
	"\x1cph\xff\xd1`\xff\xfe\xfa\xab\x820\x8ay\x11\\" +
	"\x10\xbd\x15\x80rv=\"H\x88!^\x91\xc2I\x8b" +
	"\xa7p\xf0$\x90-\x9by\xc4\xcb\\\xf1\xd2\x87\xe2%" +
	"\x92\x90(\xcf\xdc\x98\xa7H\xd1S\x99\xb8\x1e\x91%\xff" +
	"&B\xb1\x83\x0a\xa7\x183\\G\x9b\xb0\\\xe1\x16\xfd" +
	"~\xe0\xdd\x11#.^GP\xbc\xe1\x91\xa6\x1a\x11\x01" +
	"\xe2]\x07\xc5\x0b\x03\xa9\xac\xe1\x11\xa0\xad\xb3\x9c8s" +
	"\xb13\xf9i\xf2O\x00\x00\x00\xff\xff\xacC!h"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x8390b923d29e3b12,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0x8f58928e854cd4f5,
		0x957cbefc645fd307,
		0x95dd102833f224c5,
		0xa404c24b5375b9e4,
		0xa7762282e307ed37,
		0xad17e9bd30bae1da,
		0xb0fd7286c7f13ef3,
		0xbe89922d1c49d9c5,
		0xbecada985190dfe6,
		0xc46371f8329421db,
		0xcdcf42beb2537d20,
		0xd377c9b486ad95d5,
		0xd8107c88f2d8bdfa,
		0xd929e054f82b286c,
		0xe13b74cbca1636d7,
		0xe54acc44b61fd7ef,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xf135411ec88044d8,
		0xf495a555c9344000,
		0xf6015788be04b4e3)
}
