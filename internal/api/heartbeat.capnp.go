// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Heartbeat is a peer liveliness message that is broadcast over pubsub.
type Heartbeat struct{ capnp.Struct }

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0xbbeb920e5748c15b

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat{st}, err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat{st}, err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.RootPtr()
	return Heartbeat{root.Struct()}, err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0xbbeb920e5748c15b, s.Struct)
	return str
}

func (s Heartbeat) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Heartbeat) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Heartbeat) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Heartbeat) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Heartbeat) Addrs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s Heartbeat) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Heartbeat) SetAddrs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Heartbeat) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List struct{ capnp.List }

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Heartbeat_List{l}, err
}

func (s Heartbeat_List) At(i int) Heartbeat { return Heartbeat{s.List.Struct(i)} }

func (s Heartbeat_List) Set(i int, v Heartbeat) error { return s.List.SetStruct(i, v.Struct) }

func (s Heartbeat_List) String() string {
	str, _ := text.MarshalList(0xbbeb920e5748c15b, s.List)
	return str
}

// Heartbeat_Promise is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Promise struct{ *capnp.Pipeline }

func (p Heartbeat_Promise) Struct() (Heartbeat, error) {
	s, err := p.Pipeline.Struct()
	return Heartbeat{s}, err
}

const schema_b3f8acfcffafd8e8 = "x\xda\x1c\xca\xb1J\xebP\x1c\xc7\xf1\xdf\xef\x9f\xe4f" +
	"\xc9-\xf7@\xefr\x97\x9c\xde\x07\xa8\xda\xd1\xa9\x82B" +
	"\x05\x85\x9e\xa9\x83\xa0\x9c4\x07\x1b\xa8m\xc8I\xfb\x10" +
	"\x8e\xfa\x00\xbe\x80\xd0\xc1Q\x1c\x1c|\x05\xf1\x11\x047" +
	"'\x07!\x92n_\xbe|\xfeL\x86\xa2\xa2\x0b\xc0\x84" +
	"\xd1\xaf\xe6\xecy4\xe9\xdc|<\xc2t\xc9\xe6\xfdm" +
	"\xd3|\xdf\x7f= \x92\x18P\x7f?U/V\xbdT" +
	"\xd9\x0d\xd8\xd8\xb2\xd8\x999[I\x9d9[\xf7\xa7\xb6" +
	"\\\x94\xfb#g\xabt;\xc6\xa4\x09)\xcd\xf9\xed\x9d" +
	"yz\xbd~\x81\x09\x85\x07\xbbd\x02\xecq MK" +
	"[\x19\xd7\xba\xf0\xda\xea\xd2\xb9J\xcf\x8b\xb5\x9b\x17\x0b" +
	"\xe7\xbd\xber\xde\xdbK\xa7\xeb\x99\xdd\x8a\xacZ\xda|" +
	"j}\xad\x97kW\xe9r\x95f~\x95\xf5\x01\x93\x04" +
	"!\x10\x12PG\xff\x003\x0chN\x84d\x97\xed;" +
	"\xfe\x0f\x98\xc3\x80f,T\xc2.\x05P\xa7\x03\xc0\x8c" +
	"\x02\x9a\\\x18\x149\x13\x08\x130\xae\xeb9#\x08#" +
	"0\xb5y^yv\xc0q@\xfe\x86\xb4\xf9\x13\x00\x00" +
	"\xff\xffn\xf0K\x17"

func init() {
	schemas.Register(schema_b3f8acfcffafd8e8,
		0xbbeb920e5748c15b)
}
