// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Heartbeat struct{ capnp.Struct }

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0xbbeb920e5748c15b

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat{st}, err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat{st}, err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.RootPtr()
	return Heartbeat{root.Struct()}, err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0xbbeb920e5748c15b, s.Struct)
	return str
}

func (s Heartbeat) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Heartbeat) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Heartbeat) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Heartbeat) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Heartbeat) Addrs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s Heartbeat) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Heartbeat) SetAddrs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Heartbeat) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List struct{ capnp.List }

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Heartbeat_List{l}, err
}

func (s Heartbeat_List) At(i int) Heartbeat { return Heartbeat{s.List.Struct(i)} }

func (s Heartbeat_List) Set(i int, v Heartbeat) error { return s.List.SetStruct(i, v.Struct) }

func (s Heartbeat_List) String() string {
	str, _ := text.MarshalList(0xbbeb920e5748c15b, s.List)
	return str
}

// Heartbeat_Promise is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Promise struct{ *capnp.Pipeline }

func (p Heartbeat_Promise) Struct() (Heartbeat, error) {
	s, err := p.Pipeline.Struct()
	return Heartbeat{s}, err
}

const schema_b3f8acfcffafd8e8 = "x\xda\x1c\xc81J\xc4@\x18\x86\xe1\xef\xfb'c\x9a" +
	"\x18\x1c\x88\x8d A\x0f\xa0`i\x95B%\x82B\xfe" +
	"\xca\xc2BF'`@$\xc49\x89\xe7\x10RXZ" +
	"y\x0b\x8f \xd8Ym\xb10K\xb6z_\x9e\xbd\xab" +
	"F\x9c}\x004\xb3;\xe9\xfe\xbb\xbd+\xdf\xff\xbe\xa0" +
	"\x15\x99~\x7f\xe6\xb4\xfeX}\xc2J\x0e\xb8\xfd\x7fw" +
	"\xb4\xf4p\x06\x93\x1f\x87\xd3\xe7\xdeO\x12\x1f{\x1fO" +
	"\x9e\xfc\xf8:\x9e\xb7\xbd\x9f\xea-t\xa4\x16&\x032" +
	"\x02\xee\xf2\x00\xd0\xc6Po\x84d\xc5\xc5\xae\x8f\x01\xbd" +
	"0\xd4N\xe8\x84\x15\x05p\xb7g\x80\xb6\x86\x1a\x84f" +
	"\x08, ,\xc0<\xc6\x17Z\x08-X\xfb\x10\xa67" +
	"\x96`g\xc8]\xc8\xb2\x9b\x00\x00\x00\xff\xff\xbfV(" +
	"^"

func init() {
	schemas.Register(schema_b3f8acfcffafd8e8,
		0xbbeb920e5748c15b)
}
