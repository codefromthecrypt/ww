// Code generated by capnpc-go. DO NOT EDIT.

package wasm

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
	proc "github.com/wetware/ww/internal/api/proc"
)

type Runtime capnp.Client

// Runtime_TypeID is the unique identifier for the type Runtime.
const Runtime_TypeID = 0xff6bb7b1b05afb0e

func (c Runtime) Exec(ctx context.Context, params func(proc.Executor_exec_Params) error) (proc.Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime) AddRef() Runtime {
	return Runtime(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime) DecodeFromPtr(p capnp.Ptr) Runtime {
	return Runtime(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime) IsSame(other Runtime) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Server is a Runtime with a local implementation.
type Runtime_Server interface {
	Exec(context.Context, proc.Executor_exec) error
}

// Runtime_NewServer creates a new Server from an implementation of Runtime_Server.
func Runtime_NewServer(s Runtime_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Methods(nil, s), s, c)
}

// Runtime_ServerToClient creates a new Client from an implementation of Runtime_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_ServerToClient(s Runtime_Server) Runtime {
	return Runtime(capnp.NewClient(Runtime_NewServer(s)))
}

// Runtime_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Methods(methods []server.Method, s Runtime_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, proc.Executor_exec{call})
		},
	})

	return methods
}

// Runtime_List is a list of Runtime.
type Runtime_List = capnp.CapList[Runtime]

// NewRuntime creates a new list of Runtime.
func NewRuntime_List(s *capnp.Segment, sz int32) (Runtime_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime](l), err
}

type Runtime_Config capnp.Struct

// Runtime_Config_TypeID is the unique identifier for the type Runtime_Config.
const Runtime_Config_TypeID = 0x86b3d1f87025c811

func NewRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Runtime_Config(st), err
}

func NewRootRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Runtime_Config(st), err
}

func ReadRootRuntime_Config(msg *capnp.Message) (Runtime_Config, error) {
	root, err := msg.Root()
	return Runtime_Config(root.Struct()), err
}

func (s Runtime_Config) String() string {
	str, _ := text.Marshal(0x86b3d1f87025c811, capnp.Struct(s))
	return str
}

func (s Runtime_Config) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config) DecodeFromPtr(p capnp.Ptr) Runtime_Config {
	return Runtime_Config(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config) Src() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Runtime_Config) HasSrc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config) SetSrc(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Runtime_Config) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(1)
	return iostream.Provider(p.Interface().Client())
}

func (s Runtime_Config) HasStdin() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Runtime_Config) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(2)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStdout() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Runtime_Config) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Runtime_Config) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(3)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStderr() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Runtime_Config) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Runtime_Config) RandSeed() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Runtime_Config) SetRandSeed(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Runtime_Config_List is a list of Runtime_Config.
type Runtime_Config_List = capnp.StructList[Runtime_Config]

// NewRuntime_Config creates a new list of Runtime_Config.
func NewRuntime_Config_List(s *capnp.Segment, sz int32) (Runtime_Config_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Runtime_Config](l), err
}

// Runtime_Config_Future is a wrapper for a Runtime_Config promised by a client call.
type Runtime_Config_Future struct{ *capnp.Future }

func (p Runtime_Config_Future) Struct() (Runtime_Config, error) {
	s, err := p.Future.Struct()
	return Runtime_Config(s), err
}

func (p Runtime_Config_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(1, nil).Client())
}

func (p Runtime_Config_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(2, nil).Client())
}

func (p Runtime_Config_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(3, nil).Client())
}

type Runtime_Context capnp.Client

// Runtime_Context_TypeID is the unique identifier for the type Runtime_Context.
const Runtime_Context_TypeID = 0xf0d086c2f7dd91fa

func (c Runtime_Context) Run(ctx context.Context, params func(Runtime_Context_run_Params) error) (Runtime_Context_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Context_run_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Context_run_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Context) Close(ctx context.Context, params func(Runtime_Context_close_Params) error) (Runtime_Context_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Context_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Context_close_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Context) Wait(ctx context.Context, params func(proc.Waiter_wait_Params) error) (proc.Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime_Context) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime_Context) AddRef() Runtime_Context {
	return Runtime_Context(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime_Context) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime_Context) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime_Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime_Context) DecodeFromPtr(p capnp.Ptr) Runtime_Context {
	return Runtime_Context(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime_Context) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime_Context) IsSame(other Runtime_Context) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime_Context) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime_Context) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Context_Server is a Runtime_Context with a local implementation.
type Runtime_Context_Server interface {
	Run(context.Context, Runtime_Context_run) error

	Close(context.Context, Runtime_Context_close) error

	Wait(context.Context, proc.Waiter_wait) error
}

// Runtime_Context_NewServer creates a new Server from an implementation of Runtime_Context_Server.
func Runtime_Context_NewServer(s Runtime_Context_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Context_Methods(nil, s), s, c)
}

// Runtime_Context_ServerToClient creates a new Client from an implementation of Runtime_Context_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_Context_ServerToClient(s Runtime_Context_Server) Runtime_Context {
	return Runtime_Context(capnp.NewClient(Runtime_Context_NewServer(s)))
}

// Runtime_Context_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Context_Methods(methods []server.Method, s Runtime_Context_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, Runtime_Context_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Runtime_Context_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, proc.Waiter_wait{call})
		},
	})

	return methods
}

// Runtime_Context_run holds the state for a server call to Runtime_Context.run.
// See server.Call for documentation.
type Runtime_Context_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Context_run) Args() Runtime_Context_run_Params {
	return Runtime_Context_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Context_run) AllocResults() (Runtime_Context_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(r), err
}

// Runtime_Context_close holds the state for a server call to Runtime_Context.close.
// See server.Call for documentation.
type Runtime_Context_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Context_close) Args() Runtime_Context_close_Params {
	return Runtime_Context_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Context_close) AllocResults() (Runtime_Context_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(r), err
}

// Runtime_Context_List is a list of Runtime_Context.
type Runtime_Context_List = capnp.CapList[Runtime_Context]

// NewRuntime_Context creates a new list of Runtime_Context.
func NewRuntime_Context_List(s *capnp.Segment, sz int32) (Runtime_Context_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime_Context](l), err
}

type Runtime_Context_run_Params capnp.Struct

// Runtime_Context_run_Params_TypeID is the unique identifier for the type Runtime_Context_run_Params.
const Runtime_Context_run_Params_TypeID = 0xb0895fd1357e7852

func NewRuntime_Context_run_Params(s *capnp.Segment) (Runtime_Context_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Params(st), err
}

func NewRootRuntime_Context_run_Params(s *capnp.Segment) (Runtime_Context_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Params(st), err
}

func ReadRootRuntime_Context_run_Params(msg *capnp.Message) (Runtime_Context_run_Params, error) {
	root, err := msg.Root()
	return Runtime_Context_run_Params(root.Struct()), err
}

func (s Runtime_Context_run_Params) String() string {
	str, _ := text.Marshal(0xb0895fd1357e7852, capnp.Struct(s))
	return str
}

func (s Runtime_Context_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_run_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Context_run_Params {
	return Runtime_Context_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_run_Params_List is a list of Runtime_Context_run_Params.
type Runtime_Context_run_Params_List = capnp.StructList[Runtime_Context_run_Params]

// NewRuntime_Context_run_Params creates a new list of Runtime_Context_run_Params.
func NewRuntime_Context_run_Params_List(s *capnp.Segment, sz int32) (Runtime_Context_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_run_Params](l), err
}

// Runtime_Context_run_Params_Future is a wrapper for a Runtime_Context_run_Params promised by a client call.
type Runtime_Context_run_Params_Future struct{ *capnp.Future }

func (p Runtime_Context_run_Params_Future) Struct() (Runtime_Context_run_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_run_Params(s), err
}

type Runtime_Context_run_Results capnp.Struct

// Runtime_Context_run_Results_TypeID is the unique identifier for the type Runtime_Context_run_Results.
const Runtime_Context_run_Results_TypeID = 0xb93034daf157d388

func NewRuntime_Context_run_Results(s *capnp.Segment) (Runtime_Context_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(st), err
}

func NewRootRuntime_Context_run_Results(s *capnp.Segment) (Runtime_Context_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(st), err
}

func ReadRootRuntime_Context_run_Results(msg *capnp.Message) (Runtime_Context_run_Results, error) {
	root, err := msg.Root()
	return Runtime_Context_run_Results(root.Struct()), err
}

func (s Runtime_Context_run_Results) String() string {
	str, _ := text.Marshal(0xb93034daf157d388, capnp.Struct(s))
	return str
}

func (s Runtime_Context_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_run_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Context_run_Results {
	return Runtime_Context_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_run_Results_List is a list of Runtime_Context_run_Results.
type Runtime_Context_run_Results_List = capnp.StructList[Runtime_Context_run_Results]

// NewRuntime_Context_run_Results creates a new list of Runtime_Context_run_Results.
func NewRuntime_Context_run_Results_List(s *capnp.Segment, sz int32) (Runtime_Context_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_run_Results](l), err
}

// Runtime_Context_run_Results_Future is a wrapper for a Runtime_Context_run_Results promised by a client call.
type Runtime_Context_run_Results_Future struct{ *capnp.Future }

func (p Runtime_Context_run_Results_Future) Struct() (Runtime_Context_run_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_run_Results(s), err
}

type Runtime_Context_close_Params capnp.Struct

// Runtime_Context_close_Params_TypeID is the unique identifier for the type Runtime_Context_close_Params.
const Runtime_Context_close_Params_TypeID = 0xaa1dccc1067f5c60

func NewRuntime_Context_close_Params(s *capnp.Segment) (Runtime_Context_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_close_Params(st), err
}

func NewRootRuntime_Context_close_Params(s *capnp.Segment) (Runtime_Context_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_close_Params(st), err
}

func ReadRootRuntime_Context_close_Params(msg *capnp.Message) (Runtime_Context_close_Params, error) {
	root, err := msg.Root()
	return Runtime_Context_close_Params(root.Struct()), err
}

func (s Runtime_Context_close_Params) String() string {
	str, _ := text.Marshal(0xaa1dccc1067f5c60, capnp.Struct(s))
	return str
}

func (s Runtime_Context_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_close_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Context_close_Params {
	return Runtime_Context_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Context_close_Params) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Context_close_Params) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Context_close_Params_List is a list of Runtime_Context_close_Params.
type Runtime_Context_close_Params_List = capnp.StructList[Runtime_Context_close_Params]

// NewRuntime_Context_close_Params creates a new list of Runtime_Context_close_Params.
func NewRuntime_Context_close_Params_List(s *capnp.Segment, sz int32) (Runtime_Context_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_close_Params](l), err
}

// Runtime_Context_close_Params_Future is a wrapper for a Runtime_Context_close_Params promised by a client call.
type Runtime_Context_close_Params_Future struct{ *capnp.Future }

func (p Runtime_Context_close_Params_Future) Struct() (Runtime_Context_close_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_close_Params(s), err
}

type Runtime_Context_close_Results capnp.Struct

// Runtime_Context_close_Results_TypeID is the unique identifier for the type Runtime_Context_close_Results.
const Runtime_Context_close_Results_TypeID = 0xff9b3afef257e11a

func NewRuntime_Context_close_Results(s *capnp.Segment) (Runtime_Context_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(st), err
}

func NewRootRuntime_Context_close_Results(s *capnp.Segment) (Runtime_Context_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(st), err
}

func ReadRootRuntime_Context_close_Results(msg *capnp.Message) (Runtime_Context_close_Results, error) {
	root, err := msg.Root()
	return Runtime_Context_close_Results(root.Struct()), err
}

func (s Runtime_Context_close_Results) String() string {
	str, _ := text.Marshal(0xff9b3afef257e11a, capnp.Struct(s))
	return str
}

func (s Runtime_Context_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_close_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Context_close_Results {
	return Runtime_Context_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_close_Results_List is a list of Runtime_Context_close_Results.
type Runtime_Context_close_Results_List = capnp.StructList[Runtime_Context_close_Results]

// NewRuntime_Context_close_Results creates a new list of Runtime_Context_close_Results.
func NewRuntime_Context_close_Results_List(s *capnp.Segment, sz int32) (Runtime_Context_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_close_Results](l), err
}

// Runtime_Context_close_Results_Future is a wrapper for a Runtime_Context_close_Results promised by a client call.
type Runtime_Context_close_Results_Future struct{ *capnp.Future }

func (p Runtime_Context_close_Results_Future) Struct() (Runtime_Context_close_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_close_Results(s), err
}

const schema_9419a7a54f76d35b = "x\xda\x8cSOHT_\x18=\xdf\xbd\xef\xcf\x0c\xfe" +
	"\xe6\x97\x977P&5$\x8a\xb4H\x1c\xad\xcd\x84\xcc" +
	"\xa4;7\xcd\x9d\x08\xa1\xa2\x1a\x9c\x97\x0c932\xef" +
	"M\xcd\xa2\x1a\x033\x05\x83\x82\x16\x91\xd0\"\x88\xa0\x95" +
	"Q \xd1\xca\x16QP\x90\x09A\x82\x0b\x03\xa1ET" +
	"J`$t\xe3M\xcd\x9f\xa8\xa8\xcd[|\xe7\xe3\x9c" +
	"\xef\xbcsng\x98\xc5\xb4p`\xb6\x01LN\xe8\x86" +
	"\x12O\xdaF>\xcf\xdf\x1b\x87\xb4\x88\xd4\xff\x1b\x87f" +
	"\xee\xce\x9eT\xd05\x13\xb0\xe6\xf4\x97\xd6s\xdd\x04\xba" +
	"\x9f\xea!\x02\xa9\xe3GJ\xc6\xdc\xb3mw \x9b\x89" +
	"\x00o\xa9{\xc9\xe8%\x90\xb5bDA*Q<\xb7" +
	"g\xfe\xd8\xe4\x0cDs\x05\xf7\x9b]\x04MM,\x0c" +
	"\xac.\xee\xee|P\x87\xac\x1a\x11\x0f\xf9rei\xfd" +
	"\xd1\xf8\x8b\x8f\x10\x16\xaf]\x00\xb2^\x1b\x8b\xd6\x8a\xe1" +
	"\x1d\xb2l\\\xb4\xc2\xe6f\xa0\x86\x8b\x06\xae\x0e/\x9c" +
	"\xda\x7f\xebv\xd3Uoy\x87y\xdd\xdai\xb6\x03V" +
	"\x8fiZ=\xe5\xe5\xad\xcb\x03k_#\xd3\xaaN\xb3" +
	"`\xf6\x13\x14v\xa9\xd3I'\xd31\x98\x1ca\xd9\x91" +
	"H\xa2\x90u\xd3\x19\xbb\xa3/\x97=\x91\xa6\xa18\x91" +
	"\x0cr\x0d\xd0\x08\x10g[\x00Y\xe4$\xc7\x18\x09\xa2" +
	"\xa0g\\\x9c\xef\x02\xe4\x19Nr\x82\x91`,H\x0c" +
	"\x10\x17\"\x80\x1c\xe5$\xa7\x18\x09\xce\x83\xc4\x011\xe9" +
	"\x0d\xc78\xc9\xcb\x8cH\x0b\x92\x06\x88K\xfd\x80\x9c\xe2" +
	"$\xaf12\x9d\xfc \x05\xc0(\x00\x0a9n*\x9d" +
	"%\xb1~p\xef\x87\xd2\xd1\x96w \x12\xa0\xa8\xe3\xa6" +
	"r\x05\x97\x84z\xb3\xef\xfe\xab\xed\xef7\x8d\xa2\x06\xd8" +
	"\xf9\xfc\xaf\x80\xca'\xb3\xa9\x03\xb6\x9d\x02@~0\xf2" +
	"\x83\xaa\x86\xb5\x9f\x0d\xbbv\xd1\xed\x18\x1c\xce9vk" +
	"<\x99Of\x1cH\xad\xea=\xe0\x1d\xfa\x1f'\xb9\x85" +
	"\x91\xb2\x8bi\xb7/\x97\xb2=R\x1f\x18\xf9\xeaH\xf9" +
	"oH\xf3\x85lk<T\xe6\xfc\xeb^\"j;\x85" +
	"a\xd7\xf9S,\xae\xcd\x8b\xae\x97\x8b\x8f\xeb@\xb5f" +
	"Ti\x95\x08\xb7\x80\x896\x93j\x1d\xa5J\xfa\xa2\xa9" +
	"\x0bL\x04L3_\xc8\xc6(T\xf6\x1a#\xa9\x11\xa9" +
	"\x1bk3\xda\xe2\xf4\xf0c\x00Ue\xaa(\xf3\x8c-" +
	"}D\xb5'\"\xfc\x91\xba\xb2\xea\xbd\xd1r_\x86J" +
	"?\x8c\xc4\xb9^&\xdd0>\xdd,u>|\x8b\x18" +
	"\x09\x0aI\x8d\xd5\x8d\x00A\xed\x1ek\xd9\x8a\xf7m\xe4" +
	"D\x8d5\x0d/\xc0\x9a\xc8?\xc5\x96\xf8\xfe\xeb\x80o" +
	"\x01\x00\x00\xff\xffQ[+\x82"

func init() {
	schemas.Register(schema_9419a7a54f76d35b,
		0x86b3d1f87025c811,
		0xaa1dccc1067f5c60,
		0xb0895fd1357e7852,
		0xb93034daf157d388,
		0xf0d086c2f7dd91fa,
		0xff6bb7b1b05afb0e,
		0xff9b3afef257e11a)
}
