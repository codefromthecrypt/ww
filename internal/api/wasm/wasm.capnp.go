// Code generated by capnpc-go. DO NOT EDIT.

package wasm

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
	proc "github.com/wetware/ww/internal/api/proc"
)

type Runtime capnp.Client

// Runtime_TypeID is the unique identifier for the type Runtime.
const Runtime_TypeID = 0xff6bb7b1b05afb0e

func (c Runtime) Exec(ctx context.Context, params func(proc.Executor_exec_Params) error) (proc.Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime) AddRef() Runtime {
	return Runtime(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime) DecodeFromPtr(p capnp.Ptr) Runtime {
	return Runtime(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime) IsSame(other Runtime) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Server is a Runtime with a local implementation.
type Runtime_Server interface {
	Exec(context.Context, proc.Executor_exec) error
}

// Runtime_NewServer creates a new Server from an implementation of Runtime_Server.
func Runtime_NewServer(s Runtime_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Methods(nil, s), s, c)
}

// Runtime_ServerToClient creates a new Client from an implementation of Runtime_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_ServerToClient(s Runtime_Server) Runtime {
	return Runtime(capnp.NewClient(Runtime_NewServer(s)))
}

// Runtime_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Methods(methods []server.Method, s Runtime_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, proc.Executor_exec{call})
		},
	})

	return methods
}

// Runtime_List is a list of Runtime.
type Runtime_List = capnp.CapList[Runtime]

// NewRuntime creates a new list of Runtime.
func NewRuntime_List(s *capnp.Segment, sz int32) (Runtime_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime](l), err
}

type Runtime_Config capnp.Struct

// Runtime_Config_TypeID is the unique identifier for the type Runtime_Config.
const Runtime_Config_TypeID = 0x86b3d1f87025c811

func NewRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Runtime_Config(st), err
}

func NewRootRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Runtime_Config(st), err
}

func ReadRootRuntime_Config(msg *capnp.Message) (Runtime_Config, error) {
	root, err := msg.Root()
	return Runtime_Config(root.Struct()), err
}

func (s Runtime_Config) String() string {
	str, _ := text.Marshal(0x86b3d1f87025c811, capnp.Struct(s))
	return str
}

func (s Runtime_Config) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config) DecodeFromPtr(p capnp.Ptr) Runtime_Config {
	return Runtime_Config(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config) Src() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Runtime_Config) HasSrc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config) SetSrc(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Runtime_Config) Env() (Runtime_Config_Field_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Runtime_Config_Field_List(p.List()), err
}

func (s Runtime_Config) HasEnv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config) SetEnv(v Runtime_Config_Field_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Runtime_Config_Field_List, preferring placement in s's segment.
func (s Runtime_Config) NewEnv(n int32) (Runtime_Config_Field_List, error) {
	l, err := NewRuntime_Config_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Runtime_Config_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s Runtime_Config) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(2)
	return iostream.Provider(p.Interface().Client())
}

func (s Runtime_Config) HasStdin() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Runtime_Config) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Runtime_Config) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(3)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStdout() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Runtime_Config) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Runtime_Config) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(4)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStderr() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Runtime_Config) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Runtime_Config) RandSeed() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Runtime_Config) SetRandSeed(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Runtime_Config_List is a list of Runtime_Config.
type Runtime_Config_List = capnp.StructList[Runtime_Config]

// NewRuntime_Config creates a new list of Runtime_Config.
func NewRuntime_Config_List(s *capnp.Segment, sz int32) (Runtime_Config_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Runtime_Config](l), err
}

// Runtime_Config_Future is a wrapper for a Runtime_Config promised by a client call.
type Runtime_Config_Future struct{ *capnp.Future }

func (p Runtime_Config_Future) Struct() (Runtime_Config, error) {
	s, err := p.Future.Struct()
	return Runtime_Config(s), err
}

func (p Runtime_Config_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(2, nil).Client())
}

func (p Runtime_Config_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(3, nil).Client())
}

func (p Runtime_Config_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(4, nil).Client())
}

type Runtime_Config_Field capnp.Struct

// Runtime_Config_Field_TypeID is the unique identifier for the type Runtime_Config_Field.
const Runtime_Config_Field_TypeID = 0x9ff14ea4ccb756ba

func NewRuntime_Config_Field(s *capnp.Segment) (Runtime_Config_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Runtime_Config_Field(st), err
}

func NewRootRuntime_Config_Field(s *capnp.Segment) (Runtime_Config_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Runtime_Config_Field(st), err
}

func ReadRootRuntime_Config_Field(msg *capnp.Message) (Runtime_Config_Field, error) {
	root, err := msg.Root()
	return Runtime_Config_Field(root.Struct()), err
}

func (s Runtime_Config_Field) String() string {
	str, _ := text.Marshal(0x9ff14ea4ccb756ba, capnp.Struct(s))
	return str
}

func (s Runtime_Config_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config_Field) DecodeFromPtr(p capnp.Ptr) Runtime_Config_Field {
	return Runtime_Config_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config_Field) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Runtime_Config_Field) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config_Field) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Runtime_Config_Field) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Runtime_Config_Field) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Runtime_Config_Field) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config_Field) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Runtime_Config_Field) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Runtime_Config_Field_List is a list of Runtime_Config_Field.
type Runtime_Config_Field_List = capnp.StructList[Runtime_Config_Field]

// NewRuntime_Config_Field creates a new list of Runtime_Config_Field.
func NewRuntime_Config_Field_List(s *capnp.Segment, sz int32) (Runtime_Config_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Runtime_Config_Field](l), err
}

// Runtime_Config_Field_Future is a wrapper for a Runtime_Config_Field promised by a client call.
type Runtime_Config_Field_Future struct{ *capnp.Future }

func (p Runtime_Config_Field_Future) Struct() (Runtime_Config_Field, error) {
	s, err := p.Future.Struct()
	return Runtime_Config_Field(s), err
}

type Runtime_Context capnp.Client

// Runtime_Context_TypeID is the unique identifier for the type Runtime_Context.
const Runtime_Context_TypeID = 0xf0d086c2f7dd91fa

func (c Runtime_Context) Run(ctx context.Context, params func(Runtime_Context_run_Params) error) (Runtime_Context_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Context_run_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Context_run_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Context) Close(ctx context.Context, params func(Runtime_Context_close_Params) error) (Runtime_Context_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Context_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Context_close_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Context) Wait(ctx context.Context, params func(proc.Waiter_wait_Params) error) (proc.Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime_Context) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime_Context) AddRef() Runtime_Context {
	return Runtime_Context(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime_Context) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime_Context) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime_Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime_Context) DecodeFromPtr(p capnp.Ptr) Runtime_Context {
	return Runtime_Context(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime_Context) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime_Context) IsSame(other Runtime_Context) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime_Context) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime_Context) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Context_Server is a Runtime_Context with a local implementation.
type Runtime_Context_Server interface {
	Run(context.Context, Runtime_Context_run) error

	Close(context.Context, Runtime_Context_close) error

	Wait(context.Context, proc.Waiter_wait) error
}

// Runtime_Context_NewServer creates a new Server from an implementation of Runtime_Context_Server.
func Runtime_Context_NewServer(s Runtime_Context_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Context_Methods(nil, s), s, c)
}

// Runtime_Context_ServerToClient creates a new Client from an implementation of Runtime_Context_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_Context_ServerToClient(s Runtime_Context_Server) Runtime_Context {
	return Runtime_Context(capnp.NewClient(Runtime_Context_NewServer(s)))
}

// Runtime_Context_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Context_Methods(methods []server.Method, s Runtime_Context_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, Runtime_Context_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0d086c2f7dd91fa,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Context",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Runtime_Context_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, proc.Waiter_wait{call})
		},
	})

	return methods
}

// Runtime_Context_run holds the state for a server call to Runtime_Context.run.
// See server.Call for documentation.
type Runtime_Context_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Context_run) Args() Runtime_Context_run_Params {
	return Runtime_Context_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Context_run) AllocResults() (Runtime_Context_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(r), err
}

// Runtime_Context_close holds the state for a server call to Runtime_Context.close.
// See server.Call for documentation.
type Runtime_Context_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Context_close) Args() Runtime_Context_close_Params {
	return Runtime_Context_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Context_close) AllocResults() (Runtime_Context_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(r), err
}

// Runtime_Context_List is a list of Runtime_Context.
type Runtime_Context_List = capnp.CapList[Runtime_Context]

// NewRuntime_Context creates a new list of Runtime_Context.
func NewRuntime_Context_List(s *capnp.Segment, sz int32) (Runtime_Context_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime_Context](l), err
}

type Runtime_Context_Status capnp.Struct

// Runtime_Context_Status_TypeID is the unique identifier for the type Runtime_Context_Status.
const Runtime_Context_Status_TypeID = 0x96f02438bea03d31

func NewRuntime_Context_Status(s *capnp.Segment) (Runtime_Context_Status, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_Status(st), err
}

func NewRootRuntime_Context_Status(s *capnp.Segment) (Runtime_Context_Status, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_Status(st), err
}

func ReadRootRuntime_Context_Status(msg *capnp.Message) (Runtime_Context_Status, error) {
	root, err := msg.Root()
	return Runtime_Context_Status(root.Struct()), err
}

func (s Runtime_Context_Status) String() string {
	str, _ := text.Marshal(0x96f02438bea03d31, capnp.Struct(s))
	return str
}

func (s Runtime_Context_Status) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_Status) DecodeFromPtr(p capnp.Ptr) Runtime_Context_Status {
	return Runtime_Context_Status(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_Status) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_Status) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_Status) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_Status) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Context_Status) StatusCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Context_Status) SetStatusCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Context_Status_List is a list of Runtime_Context_Status.
type Runtime_Context_Status_List = capnp.StructList[Runtime_Context_Status]

// NewRuntime_Context_Status creates a new list of Runtime_Context_Status.
func NewRuntime_Context_Status_List(s *capnp.Segment, sz int32) (Runtime_Context_Status_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_Status](l), err
}

// Runtime_Context_Status_Future is a wrapper for a Runtime_Context_Status promised by a client call.
type Runtime_Context_Status_Future struct{ *capnp.Future }

func (p Runtime_Context_Status_Future) Struct() (Runtime_Context_Status, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_Status(s), err
}

type Runtime_Context_run_Params capnp.Struct

// Runtime_Context_run_Params_TypeID is the unique identifier for the type Runtime_Context_run_Params.
const Runtime_Context_run_Params_TypeID = 0xb0895fd1357e7852

func NewRuntime_Context_run_Params(s *capnp.Segment) (Runtime_Context_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Params(st), err
}

func NewRootRuntime_Context_run_Params(s *capnp.Segment) (Runtime_Context_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Params(st), err
}

func ReadRootRuntime_Context_run_Params(msg *capnp.Message) (Runtime_Context_run_Params, error) {
	root, err := msg.Root()
	return Runtime_Context_run_Params(root.Struct()), err
}

func (s Runtime_Context_run_Params) String() string {
	str, _ := text.Marshal(0xb0895fd1357e7852, capnp.Struct(s))
	return str
}

func (s Runtime_Context_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_run_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Context_run_Params {
	return Runtime_Context_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_run_Params_List is a list of Runtime_Context_run_Params.
type Runtime_Context_run_Params_List = capnp.StructList[Runtime_Context_run_Params]

// NewRuntime_Context_run_Params creates a new list of Runtime_Context_run_Params.
func NewRuntime_Context_run_Params_List(s *capnp.Segment, sz int32) (Runtime_Context_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_run_Params](l), err
}

// Runtime_Context_run_Params_Future is a wrapper for a Runtime_Context_run_Params promised by a client call.
type Runtime_Context_run_Params_Future struct{ *capnp.Future }

func (p Runtime_Context_run_Params_Future) Struct() (Runtime_Context_run_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_run_Params(s), err
}

type Runtime_Context_run_Results capnp.Struct

// Runtime_Context_run_Results_TypeID is the unique identifier for the type Runtime_Context_run_Results.
const Runtime_Context_run_Results_TypeID = 0xb93034daf157d388

func NewRuntime_Context_run_Results(s *capnp.Segment) (Runtime_Context_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(st), err
}

func NewRootRuntime_Context_run_Results(s *capnp.Segment) (Runtime_Context_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_run_Results(st), err
}

func ReadRootRuntime_Context_run_Results(msg *capnp.Message) (Runtime_Context_run_Results, error) {
	root, err := msg.Root()
	return Runtime_Context_run_Results(root.Struct()), err
}

func (s Runtime_Context_run_Results) String() string {
	str, _ := text.Marshal(0xb93034daf157d388, capnp.Struct(s))
	return str
}

func (s Runtime_Context_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_run_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Context_run_Results {
	return Runtime_Context_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_run_Results_List is a list of Runtime_Context_run_Results.
type Runtime_Context_run_Results_List = capnp.StructList[Runtime_Context_run_Results]

// NewRuntime_Context_run_Results creates a new list of Runtime_Context_run_Results.
func NewRuntime_Context_run_Results_List(s *capnp.Segment, sz int32) (Runtime_Context_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_run_Results](l), err
}

// Runtime_Context_run_Results_Future is a wrapper for a Runtime_Context_run_Results promised by a client call.
type Runtime_Context_run_Results_Future struct{ *capnp.Future }

func (p Runtime_Context_run_Results_Future) Struct() (Runtime_Context_run_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_run_Results(s), err
}

type Runtime_Context_close_Params capnp.Struct

// Runtime_Context_close_Params_TypeID is the unique identifier for the type Runtime_Context_close_Params.
const Runtime_Context_close_Params_TypeID = 0xaa1dccc1067f5c60

func NewRuntime_Context_close_Params(s *capnp.Segment) (Runtime_Context_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_close_Params(st), err
}

func NewRootRuntime_Context_close_Params(s *capnp.Segment) (Runtime_Context_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Context_close_Params(st), err
}

func ReadRootRuntime_Context_close_Params(msg *capnp.Message) (Runtime_Context_close_Params, error) {
	root, err := msg.Root()
	return Runtime_Context_close_Params(root.Struct()), err
}

func (s Runtime_Context_close_Params) String() string {
	str, _ := text.Marshal(0xaa1dccc1067f5c60, capnp.Struct(s))
	return str
}

func (s Runtime_Context_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_close_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Context_close_Params {
	return Runtime_Context_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Context_close_Params) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Context_close_Params) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Context_close_Params_List is a list of Runtime_Context_close_Params.
type Runtime_Context_close_Params_List = capnp.StructList[Runtime_Context_close_Params]

// NewRuntime_Context_close_Params creates a new list of Runtime_Context_close_Params.
func NewRuntime_Context_close_Params_List(s *capnp.Segment, sz int32) (Runtime_Context_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_close_Params](l), err
}

// Runtime_Context_close_Params_Future is a wrapper for a Runtime_Context_close_Params promised by a client call.
type Runtime_Context_close_Params_Future struct{ *capnp.Future }

func (p Runtime_Context_close_Params_Future) Struct() (Runtime_Context_close_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_close_Params(s), err
}

type Runtime_Context_close_Results capnp.Struct

// Runtime_Context_close_Results_TypeID is the unique identifier for the type Runtime_Context_close_Results.
const Runtime_Context_close_Results_TypeID = 0xff9b3afef257e11a

func NewRuntime_Context_close_Results(s *capnp.Segment) (Runtime_Context_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(st), err
}

func NewRootRuntime_Context_close_Results(s *capnp.Segment) (Runtime_Context_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Context_close_Results(st), err
}

func ReadRootRuntime_Context_close_Results(msg *capnp.Message) (Runtime_Context_close_Results, error) {
	root, err := msg.Root()
	return Runtime_Context_close_Results(root.Struct()), err
}

func (s Runtime_Context_close_Results) String() string {
	str, _ := text.Marshal(0xff9b3afef257e11a, capnp.Struct(s))
	return str
}

func (s Runtime_Context_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Context_close_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Context_close_Results {
	return Runtime_Context_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Context_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Context_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Context_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Context_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Context_close_Results_List is a list of Runtime_Context_close_Results.
type Runtime_Context_close_Results_List = capnp.StructList[Runtime_Context_close_Results]

// NewRuntime_Context_close_Results creates a new list of Runtime_Context_close_Results.
func NewRuntime_Context_close_Results_List(s *capnp.Segment, sz int32) (Runtime_Context_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Context_close_Results](l), err
}

// Runtime_Context_close_Results_Future is a wrapper for a Runtime_Context_close_Results promised by a client call.
type Runtime_Context_close_Results_Future struct{ *capnp.Future }

func (p Runtime_Context_close_Results_Future) Struct() (Runtime_Context_close_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Context_close_Results(s), err
}

const schema_9419a7a54f76d35b = "x\xda\x8c\x94Ah\x1cU\x18\xc7\xff\xff\xf7fv&" +
	"\x98\xad}\xceB\x9a\x96\xba\x18\x12j\x0e\x09I\xda\x82" +
	"\xac\xc8\xc6\x06<\x04\xd4})\x1a\xa8\xa2.\xd9iX" +
	"\xba\xd9\x0d;\xb3i\xbc\x18\xbdT=\x08\x0aE\xac\xa5" +
	"ZE)\x8a\x87\x14#\xb5\xda\x15\x15\x94\x0a=X\x0b" +
	"\x1e\x02\x1e\xf4\xe4A\xb4-J\xc5\x82#o\xd2\x9d\x1d" +
	"\xd1\x92^\x96\x9d\xef\xfb\xe6\xff\xfd\xdf\xef}\xdf\x8c\x9d" +
	"\x12\x93\xd6xv\xbe\x17B\xbflg\"u~h\xf1" +
	"\xcf\x8b\x1f\x1e\x81\xf6\xc8h\xcb\xf5\x03\xab\xa7\xcf\x1c\x8a" +
	"`\xdb\x0e\xe0\xf5g\xbe\xf3\x862}\xc0\xee\x91\xcc," +
	"\xc1h\xfc\xbe\x93\x9f\xdd3x\xf9U\xe8\x1dd\xf4\xd7" +
	"+?\\\xfb\xf2\xc8\xb7\x97a9\xc0\xee\x97\x9c;\xe8" +
	"\x9dp\xcc{\xc7\x9c\"\x18}\xf2\xe8\x99\x0b\xef<t" +
	"\xe5M\xa8\xed\xec\xf6\xb1\x85)n;\x82\xde7q\xf1" +
	"W\xcea0z\xea\xf1\x95\xcc\x17\x17v\xbe\x1f+c" +
	"C\xf1.w\x1fAo\xd85j3\xcb\xcf\xec\xbd\xf8" +
	"\xe4\x8b\xabP;:\xf9\x07\xdd\x09\xc2\x8a^\xb84{" +
	"e}\xcf\xd8\xd9Tf\xaf[0\x99\xc4\xa0\xf2d\xf7" +
	"l\xa0\xb7\xd3]\xf7\x86\xdd>\xc0\x1bw\x9f\xf7\x9e3" +
	"\xff\xbayu\x9b\x8c\x1e\xbb\xb4\xf4\xf0\xbb\xa7\xfa\x8f\x9a" +
	"\xe2\xb7\xdc\xd7\xbd\xf7\xdc]\x80\xd7v\x1d\xaf\x1d\x17o" +
	"\xffq\xf6\xea\xdf\x85\xe3Q\xaa\xe7\x1f\xee4\x11a$" +
	":\\\x0e\x16F\xe7\xca\x8b\xa2\xbeX\x98i\xd5\xc3\xea" +
	"\x82?:\xd5\xa8\x1f\xacr^[Ls\xe1D\xfe\x81" +
	"\xaa_\xab\xe8m\xd2\x02,\x02\xea\xd8\x00\xa0\x8fJ\xea" +
	"\x93\x82\x8a\xcc\x19\x18\xea\x84\x09\xbe&\xa9\xd7\x04\x95\x10" +
	"9\x0a@\x9d\x9e\x00\xf4\x07\x92\xfacA%e\x8e\x12" +
	"P\x1f\x15\x00\xbd*\xa9\xcf\x09*\xcb\xca\xd1\x02\xd4Y" +
	"\x13\\\x93\xd4\x9f\x0b\xd2\xce\xd1\x06T{\x1a\xd0\xe7$" +
	"\xf5yA'h\xce1\x0b\xc1,\xe8\xf8\xf5%n\x01" +
	"K\x92\xdc\xda\xb5\x0a\x9a`>\x08+\xd5:\xd5\xb5G" +
	"\xee\xfdm\xe5\x89\x81_@*\xb0\x18\x84\x95F+\xa4" +
	"\x8a~\xba\x7f\xed\xfb;\x7f\xbd\xfdYt\x13~\xb3\xf9" +
	"\xdfD\xd4,\xd7+\xfb}\xbf\x02\x80=\x10\xec\x01\x13" +
	"l\xf2\xdf\xd8B\x7f9\x1c\xdd\x1f\x96\xc3\x16\x83\x12\xa9" +
	"\xad\x04U\xf6\x00\xa0{%\xf56\xc1(0\x15\xc1T" +
	"\x03\xb2\xe2\xd3\x85\xa0{s\xc9\x83\xd5\xf9\xd1\x98;\x8c" +
	"\xa0\x9b\x08\x0e\x1b\xcc\x83\x92z,\xc5~\xc4`\xbe[" +
	"R\xef\x11t\x0e\xf9O\xb3\x17\x82\xbd`~\xa9\\k" +
	"\xf9\x9d\xa7\xa4\x95\xf5?\xee\xe7j\x8d\xc0\x1f,\x95\x9b" +
	"\xe5\x85\x00\xe9\x03L\xa7\x0e\xe0/W\xc3\xa9F\xc57" +
	"H6\xf1\x1f\x8b6[\xf5\xc1R>\xd6\xdc\xb4n\xa6" +
	"\xe8\x07\xadZ\x18\xdcl4C_.\x87\xf1l&\x0b" +
	"\xaeX(\xc6\xd4\x03\xedJ\x1bH\xf6\x8f\x9duS\xe3" +
	"\x03\x10j\xc8awy\xd9Y\x0b\xd5?\x01\xa1\xb2\x8e" +
	"\xd3l\xd5'\x99\x8f\x01L2\xee\xf0\xc6\xd5Uk\xfd" +
	"x\xedkLR1\xaf-\x91\x0a\x01\x8a}\xa6\x8a7" +
	"\xe6/\xb1\x93\x82\xc1\x8ew\xb9\xe0k\x97\xa9O\x8b\xea" +
	")\xa4V\xde\xdeW\xdc\xb8\xeb\x95\x1b(J\xd2\x8e\x1d" +
	"\\\xcf\xfc\xfe\xf6\xca\xd8\xa7?\xa7\x1c$!\xe3`\x97" +
	"Q\x8d\x07\xc3\xfcn\x8d\x8d$=\xcc\x00w\x9b\xdc\xd2" +
	"\xc5\xcfl\xc0\x07\xfe\x09\x00\x00\xff\xff\xa1\xab\x9a\x0e"

func init() {
	schemas.Register(schema_9419a7a54f76d35b,
		0x86b3d1f87025c811,
		0x96f02438bea03d31,
		0x9ff14ea4ccb756ba,
		0xaa1dccc1067f5c60,
		0xb0895fd1357e7852,
		0xb93034daf157d388,
		0xf0d086c2f7dd91fa,
		0xff6bb7b1b05afb0e,
		0xff9b3afef257e11a)
}
