// Code generated by capnpc-go. DO NOT EDIT.

package wasm

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
	proc "github.com/wetware/ww/internal/api/proc"
)

type Runtime capnp.Client

// Runtime_TypeID is the unique identifier for the type Runtime.
const Runtime_TypeID = 0xff6bb7b1b05afb0e

func (c Runtime) Exec(ctx context.Context, params func(proc.Executor_exec_Params) error) (proc.Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime) AddRef() Runtime {
	return Runtime(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime) DecodeFromPtr(p capnp.Ptr) Runtime {
	return Runtime(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime) IsSame(other Runtime) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Server is a Runtime with a local implementation.
type Runtime_Server interface {
	Exec(context.Context, proc.Executor_exec) error
}

// Runtime_NewServer creates a new Server from an implementation of Runtime_Server.
func Runtime_NewServer(s Runtime_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Methods(nil, s), s, c)
}

// Runtime_ServerToClient creates a new Client from an implementation of Runtime_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_ServerToClient(s Runtime_Server) Runtime {
	return Runtime(capnp.NewClient(Runtime_NewServer(s)))
}

// Runtime_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Methods(methods []server.Method, s Runtime_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, proc.Executor_exec{call})
		},
	})

	return methods
}

// Runtime_List is a list of Runtime.
type Runtime_List = capnp.CapList[Runtime]

// NewRuntime creates a new list of Runtime.
func NewRuntime_List(s *capnp.Segment, sz int32) (Runtime_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime](l), err
}

type Runtime_Config capnp.Struct

// Runtime_Config_TypeID is the unique identifier for the type Runtime_Config.
const Runtime_Config_TypeID = 0x86b3d1f87025c811

func NewRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Runtime_Config(st), err
}

func NewRootRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Runtime_Config(st), err
}

func ReadRootRuntime_Config(msg *capnp.Message) (Runtime_Config, error) {
	root, err := msg.Root()
	return Runtime_Config(root.Struct()), err
}

func (s Runtime_Config) String() string {
	str, _ := text.Marshal(0x86b3d1f87025c811, capnp.Struct(s))
	return str
}

func (s Runtime_Config) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config) DecodeFromPtr(p capnp.Ptr) Runtime_Config {
	return Runtime_Config(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config) Src() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Runtime_Config) HasSrc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config) SetSrc(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Runtime_Config) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(1)
	return iostream.Provider(p.Interface().Client())
}

func (s Runtime_Config) HasStdin() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Runtime_Config) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(2)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStdout() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Runtime_Config) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Runtime_Config) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(3)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStderr() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Runtime_Config) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Runtime_Config) RandSeed() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Runtime_Config) SetRandSeed(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Runtime_Config_List is a list of Runtime_Config.
type Runtime_Config_List = capnp.StructList[Runtime_Config]

// NewRuntime_Config creates a new list of Runtime_Config.
func NewRuntime_Config_List(s *capnp.Segment, sz int32) (Runtime_Config_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Runtime_Config](l), err
}

// Runtime_Config_Future is a wrapper for a Runtime_Config promised by a client call.
type Runtime_Config_Future struct{ *capnp.Future }

func (p Runtime_Config_Future) Struct() (Runtime_Config, error) {
	s, err := p.Future.Struct()
	return Runtime_Config(s), err
}

func (p Runtime_Config_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(1, nil).Client())
}

func (p Runtime_Config_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(2, nil).Client())
}

func (p Runtime_Config_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(3, nil).Client())
}

type Runtime_Proc capnp.Client

// Runtime_Proc_TypeID is the unique identifier for the type Runtime_Proc.
const Runtime_Proc_TypeID = 0x9127e3f68aed3c7b

func (c Runtime_Proc) Close(ctx context.Context, params func(Runtime_Proc_close_Params) error) (Runtime_Proc_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9127e3f68aed3c7b,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Proc",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Proc_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Proc_close_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime_Proc) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime_Proc) AddRef() Runtime_Proc {
	return Runtime_Proc(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime_Proc) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime_Proc) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime_Proc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime_Proc) DecodeFromPtr(p capnp.Ptr) Runtime_Proc {
	return Runtime_Proc(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime_Proc) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime_Proc) IsSame(other Runtime_Proc) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime_Proc) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime_Proc) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Proc_Server is a Runtime_Proc with a local implementation.
type Runtime_Proc_Server interface {
	Close(context.Context, Runtime_Proc_close) error
}

// Runtime_Proc_NewServer creates a new Server from an implementation of Runtime_Proc_Server.
func Runtime_Proc_NewServer(s Runtime_Proc_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Proc_Methods(nil, s), s, c)
}

// Runtime_Proc_ServerToClient creates a new Client from an implementation of Runtime_Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_Proc_ServerToClient(s Runtime_Proc_Server) Runtime_Proc {
	return Runtime_Proc(capnp.NewClient(Runtime_Proc_NewServer(s)))
}

// Runtime_Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Proc_Methods(methods []server.Method, s Runtime_Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9127e3f68aed3c7b,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Proc",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Runtime_Proc_close{call})
		},
	})

	return methods
}

// Runtime_Proc_close holds the state for a server call to Runtime_Proc.close.
// See server.Call for documentation.
type Runtime_Proc_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Proc_close) Args() Runtime_Proc_close_Params {
	return Runtime_Proc_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Proc_close) AllocResults() (Runtime_Proc_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Proc_close_Results(r), err
}

// Runtime_Proc_List is a list of Runtime_Proc.
type Runtime_Proc_List = capnp.CapList[Runtime_Proc]

// NewRuntime_Proc creates a new list of Runtime_Proc.
func NewRuntime_Proc_List(s *capnp.Segment, sz int32) (Runtime_Proc_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime_Proc](l), err
}

type Runtime_Proc_close_Params capnp.Struct

// Runtime_Proc_close_Params_TypeID is the unique identifier for the type Runtime_Proc_close_Params.
const Runtime_Proc_close_Params_TypeID = 0xb16facd5d46db063

func NewRuntime_Proc_close_Params(s *capnp.Segment) (Runtime_Proc_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Proc_close_Params(st), err
}

func NewRootRuntime_Proc_close_Params(s *capnp.Segment) (Runtime_Proc_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Proc_close_Params(st), err
}

func ReadRootRuntime_Proc_close_Params(msg *capnp.Message) (Runtime_Proc_close_Params, error) {
	root, err := msg.Root()
	return Runtime_Proc_close_Params(root.Struct()), err
}

func (s Runtime_Proc_close_Params) String() string {
	str, _ := text.Marshal(0xb16facd5d46db063, capnp.Struct(s))
	return str
}

func (s Runtime_Proc_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Proc_close_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Proc_close_Params {
	return Runtime_Proc_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Proc_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Proc_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Proc_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Proc_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Proc_close_Params) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Proc_close_Params) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Proc_close_Params_List is a list of Runtime_Proc_close_Params.
type Runtime_Proc_close_Params_List = capnp.StructList[Runtime_Proc_close_Params]

// NewRuntime_Proc_close_Params creates a new list of Runtime_Proc_close_Params.
func NewRuntime_Proc_close_Params_List(s *capnp.Segment, sz int32) (Runtime_Proc_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Proc_close_Params](l), err
}

// Runtime_Proc_close_Params_Future is a wrapper for a Runtime_Proc_close_Params promised by a client call.
type Runtime_Proc_close_Params_Future struct{ *capnp.Future }

func (p Runtime_Proc_close_Params_Future) Struct() (Runtime_Proc_close_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Proc_close_Params(s), err
}

type Runtime_Proc_close_Results capnp.Struct

// Runtime_Proc_close_Results_TypeID is the unique identifier for the type Runtime_Proc_close_Results.
const Runtime_Proc_close_Results_TypeID = 0xbbf4295048e582c6

func NewRuntime_Proc_close_Results(s *capnp.Segment) (Runtime_Proc_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Proc_close_Results(st), err
}

func NewRootRuntime_Proc_close_Results(s *capnp.Segment) (Runtime_Proc_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Proc_close_Results(st), err
}

func ReadRootRuntime_Proc_close_Results(msg *capnp.Message) (Runtime_Proc_close_Results, error) {
	root, err := msg.Root()
	return Runtime_Proc_close_Results(root.Struct()), err
}

func (s Runtime_Proc_close_Results) String() string {
	str, _ := text.Marshal(0xbbf4295048e582c6, capnp.Struct(s))
	return str
}

func (s Runtime_Proc_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Proc_close_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Proc_close_Results {
	return Runtime_Proc_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Proc_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Proc_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Proc_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Proc_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Proc_close_Results_List is a list of Runtime_Proc_close_Results.
type Runtime_Proc_close_Results_List = capnp.StructList[Runtime_Proc_close_Results]

// NewRuntime_Proc_close_Results creates a new list of Runtime_Proc_close_Results.
func NewRuntime_Proc_close_Results_List(s *capnp.Segment, sz int32) (Runtime_Proc_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Proc_close_Results](l), err
}

// Runtime_Proc_close_Results_Future is a wrapper for a Runtime_Proc_close_Results promised by a client call.
type Runtime_Proc_close_Results_Future struct{ *capnp.Future }

func (p Runtime_Proc_close_Results_Future) Struct() (Runtime_Proc_close_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Proc_close_Results(s), err
}

const schema_9419a7a54f76d35b = "x\xda\x84\x92\xcfKT_\x18\xc6\x9f\xe7\x9c{\xcf\x8c" +
	"\xf8\x9d\xaf\x1e\xee@\xb6i@\x0a\xd1\x85\x98\xee,\xd0" +
	"pQ\xb4i\x8e\xd1\xa6 \x18fn2\xe4\xcc\xd8\xbd" +
	"wJ\xa8\xd0B#C\xa1\xa0E\xb5+\x886\x05J" +
	"E\x0bwA\x91\xcb~\xfe\x01E\xd0\xa2\x1f\x1b\xa9\xc0" +
	"\xc5\x89#\xe8\x95\x0a\xda\x1c\x0e\xef\xfb\x9c\xcf\xfb\xbe\xcf" +
	"y\xfb\xa4\x18\xf6v\xe72\xad\x10f\xdaWV\xbf\xd8" +
	"5\xf1\xf3\xe5\xc3K0\x01i\xff_;\xba\xb8\xf4\xe4" +
	"\xa4\x85\xefe\x80\xa0\xea\xbf\x0a\x9a~\x06\x188\xe5\x17" +
	"\x08\xda\xb3{\xbf\\\xf9\xfe\xa1\xeb\x1at S1\x18" +
	"\xcc\xaa\xa7\xc1\x82ro\xe6\xd4\xfe`\xc9\xddly\xb1" +
	"\xf6\xe6\xed\xfd\xc6\x12L\x07\x098\xe2\xc0M\xd5C0" +
	"\xb8\xad\x86@\xfb\xfc\xe2\xc7\x03\xc5\xee\xd5e\xe8\x8e\x8d" +
	"\xfc3\xd5Ox)Z\xb7J{\xec\xf5\xe9Cw\xef" +
	"m\xbf\xee\xea<P\xb7\x82\xc7\xaa\x0b\x08VT&X" +
	"Q\xdb`\xd1m\xcf\x94\xe2Zo\xb94!\xea\x13\x83" +
	"\xa3\xcdzR\xad\x85\xbd#\x8d\xfa\x89*\xc7\x8a\xa4\xc9" +
	"K\x0f\xf0\x08\xe8\xf3\x9d\x80\x99\x9443\x82\x9a\xcc\xbb" +
	"\xbe\xf4\x85~\xc0\x9c\x934\x97\x05\xb5\x10y\x0a@\xcf" +
	"\x0e\x02fZ\xd2\xcc\x0bj)\xf3\x94\x80\x9es\xc1\x19" +
	"IsU\x90^\x9e\x1e\xa0\x17\x0e\x02f^\xd2\xdc\x10" +
	"\xcc\xc4Q\x999\x08\xe6\xc0B\x9cT\xaau\xea\x1fG" +
	"\xf6|\x9b:\xde\xf9\x19\xa4\x06\x87\xe2\xa4\xd2h&\xd4" +
	"\xf6\xfd\xbeG\xefv|m\x9bF\x9a\x08\xa3\xe8\xcf\x84" +
	"\x8dJ\xf5\xca\xe10\xac\x00`\x0b\x04[\xc0\xbf\x0e\\" +
	"\x8c\x1ae\xb8q=\xe9oq\x9f\x1b.k\xdd\x0f\xa1" +
	"\xfdL\xa1<\xde\x88\xc3a\x16\x99r\xe4o\x9c\xdeu" +
	"\xcd\xceb\xa9-*\xd5b\xe3m\x1a\x98s\xd3\xfe'" +
	"i:\x04m8YMF\x1a\x95\xd0u\x96\x85`\x16" +
	"\xff$\x8e\x86\x85\xb89\x9e\xc4\x9b:n\xe8d-4" +
	"Y2]H\xdd2\xb8e\xdf\xfc\x9e\xa1\xf5\x1f\x1dk" +
	"s\xb4\xa2\xf4\x8dG\xda5\xb5zg\xaao\xf9\x13\x86" +
	"\xa9Y0\x9e\xd8\x12\x024\xbb\x1c\x924Y\xe9\xcev" +
	"I\xb6\xa7\x05\x9c\xbfi\x05\xf0W\x00\x00\x00\xff\xff\x0b" +
	"\x9c\xe3\x9a"

func init() {
	schemas.Register(schema_9419a7a54f76d35b,
		0x86b3d1f87025c811,
		0x9127e3f68aed3c7b,
		0xb16facd5d46db063,
		0xbbf4295048e582c6,
		0xff6bb7b1b05afb0e)
}
