// Code generated by capnpc-go. DO NOT EDIT.

package wasm

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
	proc "github.com/wetware/ww/internal/api/proc"
)

type Runtime capnp.Client

// Runtime_TypeID is the unique identifier for the type Runtime.
const Runtime_TypeID = 0xff6bb7b1b05afb0e

func (c Runtime) Exec(ctx context.Context, params func(proc.Executor_exec_Params) error) (proc.Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime) AddRef() Runtime {
	return Runtime(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime) DecodeFromPtr(p capnp.Ptr) Runtime {
	return Runtime(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime) IsSame(other Runtime) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Server is a Runtime with a local implementation.
type Runtime_Server interface {
	Exec(context.Context, proc.Executor_exec) error
}

// Runtime_NewServer creates a new Server from an implementation of Runtime_Server.
func Runtime_NewServer(s Runtime_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Methods(nil, s), s, c)
}

// Runtime_ServerToClient creates a new Client from an implementation of Runtime_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_ServerToClient(s Runtime_Server) Runtime {
	return Runtime(capnp.NewClient(Runtime_NewServer(s)))
}

// Runtime_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Methods(methods []server.Method, s Runtime_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, proc.Executor_exec{call})
		},
	})

	return methods
}

// Runtime_List is a list of Runtime.
type Runtime_List = capnp.CapList[Runtime]

// NewRuntime creates a new list of Runtime.
func NewRuntime_List(s *capnp.Segment, sz int32) (Runtime_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime](l), err
}

type Runtime_Config capnp.Struct

// Runtime_Config_TypeID is the unique identifier for the type Runtime_Config.
const Runtime_Config_TypeID = 0x86b3d1f87025c811

func NewRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Runtime_Config(st), err
}

func NewRootRuntime_Config(s *capnp.Segment) (Runtime_Config, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Runtime_Config(st), err
}

func ReadRootRuntime_Config(msg *capnp.Message) (Runtime_Config, error) {
	root, err := msg.Root()
	return Runtime_Config(root.Struct()), err
}

func (s Runtime_Config) String() string {
	str, _ := text.Marshal(0x86b3d1f87025c811, capnp.Struct(s))
	return str
}

func (s Runtime_Config) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config) DecodeFromPtr(p capnp.Ptr) Runtime_Config {
	return Runtime_Config(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config) Src() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Runtime_Config) HasSrc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config) SetSrc(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Runtime_Config) Env() (Runtime_Config_Field_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Runtime_Config_Field_List(p.List()), err
}

func (s Runtime_Config) HasEnv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config) SetEnv(v Runtime_Config_Field_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Runtime_Config_Field_List, preferring placement in s's segment.
func (s Runtime_Config) NewEnv(n int32) (Runtime_Config_Field_List, error) {
	l, err := NewRuntime_Config_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Runtime_Config_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

func (s Runtime_Config) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(2)
	return iostream.Provider(p.Interface().Client())
}

func (s Runtime_Config) HasStdin() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Runtime_Config) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Runtime_Config) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(3)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStdout() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Runtime_Config) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Runtime_Config) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(4)
	return iostream.Stream(p.Interface().Client())
}

func (s Runtime_Config) HasStderr() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Runtime_Config) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Runtime_Config) RandSeed() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Runtime_Config) SetRandSeed(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Runtime_Config_List is a list of Runtime_Config.
type Runtime_Config_List = capnp.StructList[Runtime_Config]

// NewRuntime_Config creates a new list of Runtime_Config.
func NewRuntime_Config_List(s *capnp.Segment, sz int32) (Runtime_Config_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Runtime_Config](l), err
}

// Runtime_Config_Future is a wrapper for a Runtime_Config promised by a client call.
type Runtime_Config_Future struct{ *capnp.Future }

func (p Runtime_Config_Future) Struct() (Runtime_Config, error) {
	s, err := p.Future.Struct()
	return Runtime_Config(s), err
}

func (p Runtime_Config_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(2, nil).Client())
}

func (p Runtime_Config_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(3, nil).Client())
}

func (p Runtime_Config_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(4, nil).Client())
}

type Runtime_Config_Field capnp.Struct

// Runtime_Config_Field_TypeID is the unique identifier for the type Runtime_Config_Field.
const Runtime_Config_Field_TypeID = 0x9ff14ea4ccb756ba

func NewRuntime_Config_Field(s *capnp.Segment) (Runtime_Config_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Runtime_Config_Field(st), err
}

func NewRootRuntime_Config_Field(s *capnp.Segment) (Runtime_Config_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Runtime_Config_Field(st), err
}

func ReadRootRuntime_Config_Field(msg *capnp.Message) (Runtime_Config_Field, error) {
	root, err := msg.Root()
	return Runtime_Config_Field(root.Struct()), err
}

func (s Runtime_Config_Field) String() string {
	str, _ := text.Marshal(0x9ff14ea4ccb756ba, capnp.Struct(s))
	return str
}

func (s Runtime_Config_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Config_Field) DecodeFromPtr(p capnp.Ptr) Runtime_Config_Field {
	return Runtime_Config_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Config_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Config_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Config_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Config_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Config_Field) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Runtime_Config_Field) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Runtime_Config_Field) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Runtime_Config_Field) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Runtime_Config_Field) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Runtime_Config_Field) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Runtime_Config_Field) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Runtime_Config_Field) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Runtime_Config_Field_List is a list of Runtime_Config_Field.
type Runtime_Config_Field_List = capnp.StructList[Runtime_Config_Field]

// NewRuntime_Config_Field creates a new list of Runtime_Config_Field.
func NewRuntime_Config_Field_List(s *capnp.Segment, sz int32) (Runtime_Config_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Runtime_Config_Field](l), err
}

// Runtime_Config_Field_Future is a wrapper for a Runtime_Config_Field promised by a client call.
type Runtime_Config_Field_Future struct{ *capnp.Future }

func (p Runtime_Config_Field_Future) Struct() (Runtime_Config_Field, error) {
	s, err := p.Future.Struct()
	return Runtime_Config_Field(s), err
}

type Runtime_Module capnp.Client

// Runtime_Module_TypeID is the unique identifier for the type Runtime_Module.
const Runtime_Module_TypeID = 0x84c67f001342cf99

func (c Runtime_Module) Run(ctx context.Context, params func(Runtime_Module_run_Params) error) (Runtime_Module_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84c67f001342cf99,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Module",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Module_run_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Module_run_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Module) Close(ctx context.Context, params func(Runtime_Module_close_Params) error) (Runtime_Module_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84c67f001342cf99,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Module",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Runtime_Module_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Runtime_Module_close_Results_Future{Future: ans.Future()}, release
}
func (c Runtime_Module) Wait(ctx context.Context, params func(proc.Waiter_wait_Params) error) (proc.Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(proc.Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return proc.Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Runtime_Module) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Runtime_Module) AddRef() Runtime_Module {
	return Runtime_Module(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Runtime_Module) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Runtime_Module) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Runtime_Module) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Runtime_Module) DecodeFromPtr(p capnp.Ptr) Runtime_Module {
	return Runtime_Module(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Runtime_Module) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Runtime_Module) IsSame(other Runtime_Module) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Runtime_Module) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Runtime_Module) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Runtime_Module_Server is a Runtime_Module with a local implementation.
type Runtime_Module_Server interface {
	Run(context.Context, Runtime_Module_run) error

	Close(context.Context, Runtime_Module_close) error

	Wait(context.Context, proc.Waiter_wait) error
}

// Runtime_Module_NewServer creates a new Server from an implementation of Runtime_Module_Server.
func Runtime_Module_NewServer(s Runtime_Module_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Runtime_Module_Methods(nil, s), s, c)
}

// Runtime_Module_ServerToClient creates a new Client from an implementation of Runtime_Module_Server.
// The caller is responsible for calling Release on the returned Client.
func Runtime_Module_ServerToClient(s Runtime_Module_Server) Runtime_Module {
	return Runtime_Module(capnp.NewClient(Runtime_Module_NewServer(s)))
}

// Runtime_Module_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Runtime_Module_Methods(methods []server.Method, s Runtime_Module_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84c67f001342cf99,
			MethodID:      0,
			InterfaceName: "wasm.capnp:Runtime.Module",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, Runtime_Module_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84c67f001342cf99,
			MethodID:      1,
			InterfaceName: "wasm.capnp:Runtime.Module",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Runtime_Module_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, proc.Waiter_wait{call})
		},
	})

	return methods
}

// Runtime_Module_run holds the state for a server call to Runtime_Module.run.
// See server.Call for documentation.
type Runtime_Module_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Module_run) Args() Runtime_Module_run_Params {
	return Runtime_Module_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Module_run) AllocResults() (Runtime_Module_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_run_Results(r), err
}

// Runtime_Module_close holds the state for a server call to Runtime_Module.close.
// See server.Call for documentation.
type Runtime_Module_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Runtime_Module_close) Args() Runtime_Module_close_Params {
	return Runtime_Module_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Runtime_Module_close) AllocResults() (Runtime_Module_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_close_Results(r), err
}

// Runtime_Module_List is a list of Runtime_Module.
type Runtime_Module_List = capnp.CapList[Runtime_Module]

// NewRuntime_Module creates a new list of Runtime_Module.
func NewRuntime_Module_List(s *capnp.Segment, sz int32) (Runtime_Module_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Runtime_Module](l), err
}

type Runtime_Module_Status capnp.Struct

// Runtime_Module_Status_TypeID is the unique identifier for the type Runtime_Module_Status.
const Runtime_Module_Status_TypeID = 0xa0d2281eb34bc498

func NewRuntime_Module_Status(s *capnp.Segment) (Runtime_Module_Status, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Module_Status(st), err
}

func NewRootRuntime_Module_Status(s *capnp.Segment) (Runtime_Module_Status, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Module_Status(st), err
}

func ReadRootRuntime_Module_Status(msg *capnp.Message) (Runtime_Module_Status, error) {
	root, err := msg.Root()
	return Runtime_Module_Status(root.Struct()), err
}

func (s Runtime_Module_Status) String() string {
	str, _ := text.Marshal(0xa0d2281eb34bc498, capnp.Struct(s))
	return str
}

func (s Runtime_Module_Status) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Module_Status) DecodeFromPtr(p capnp.Ptr) Runtime_Module_Status {
	return Runtime_Module_Status(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Module_Status) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Module_Status) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Module_Status) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Module_Status) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Module_Status) StatusCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Module_Status) SetStatusCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Module_Status_List is a list of Runtime_Module_Status.
type Runtime_Module_Status_List = capnp.StructList[Runtime_Module_Status]

// NewRuntime_Module_Status creates a new list of Runtime_Module_Status.
func NewRuntime_Module_Status_List(s *capnp.Segment, sz int32) (Runtime_Module_Status_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Module_Status](l), err
}

// Runtime_Module_Status_Future is a wrapper for a Runtime_Module_Status promised by a client call.
type Runtime_Module_Status_Future struct{ *capnp.Future }

func (p Runtime_Module_Status_Future) Struct() (Runtime_Module_Status, error) {
	s, err := p.Future.Struct()
	return Runtime_Module_Status(s), err
}

type Runtime_Module_run_Params capnp.Struct

// Runtime_Module_run_Params_TypeID is the unique identifier for the type Runtime_Module_run_Params.
const Runtime_Module_run_Params_TypeID = 0xe7389b7d0b5f32af

func NewRuntime_Module_run_Params(s *capnp.Segment) (Runtime_Module_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_run_Params(st), err
}

func NewRootRuntime_Module_run_Params(s *capnp.Segment) (Runtime_Module_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_run_Params(st), err
}

func ReadRootRuntime_Module_run_Params(msg *capnp.Message) (Runtime_Module_run_Params, error) {
	root, err := msg.Root()
	return Runtime_Module_run_Params(root.Struct()), err
}

func (s Runtime_Module_run_Params) String() string {
	str, _ := text.Marshal(0xe7389b7d0b5f32af, capnp.Struct(s))
	return str
}

func (s Runtime_Module_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Module_run_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Module_run_Params {
	return Runtime_Module_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Module_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Module_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Module_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Module_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Module_run_Params_List is a list of Runtime_Module_run_Params.
type Runtime_Module_run_Params_List = capnp.StructList[Runtime_Module_run_Params]

// NewRuntime_Module_run_Params creates a new list of Runtime_Module_run_Params.
func NewRuntime_Module_run_Params_List(s *capnp.Segment, sz int32) (Runtime_Module_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Module_run_Params](l), err
}

// Runtime_Module_run_Params_Future is a wrapper for a Runtime_Module_run_Params promised by a client call.
type Runtime_Module_run_Params_Future struct{ *capnp.Future }

func (p Runtime_Module_run_Params_Future) Struct() (Runtime_Module_run_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Module_run_Params(s), err
}

type Runtime_Module_run_Results capnp.Struct

// Runtime_Module_run_Results_TypeID is the unique identifier for the type Runtime_Module_run_Results.
const Runtime_Module_run_Results_TypeID = 0xe058eb2275c7c09f

func NewRuntime_Module_run_Results(s *capnp.Segment) (Runtime_Module_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_run_Results(st), err
}

func NewRootRuntime_Module_run_Results(s *capnp.Segment) (Runtime_Module_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_run_Results(st), err
}

func ReadRootRuntime_Module_run_Results(msg *capnp.Message) (Runtime_Module_run_Results, error) {
	root, err := msg.Root()
	return Runtime_Module_run_Results(root.Struct()), err
}

func (s Runtime_Module_run_Results) String() string {
	str, _ := text.Marshal(0xe058eb2275c7c09f, capnp.Struct(s))
	return str
}

func (s Runtime_Module_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Module_run_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Module_run_Results {
	return Runtime_Module_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Module_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Module_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Module_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Module_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Module_run_Results_List is a list of Runtime_Module_run_Results.
type Runtime_Module_run_Results_List = capnp.StructList[Runtime_Module_run_Results]

// NewRuntime_Module_run_Results creates a new list of Runtime_Module_run_Results.
func NewRuntime_Module_run_Results_List(s *capnp.Segment, sz int32) (Runtime_Module_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Module_run_Results](l), err
}

// Runtime_Module_run_Results_Future is a wrapper for a Runtime_Module_run_Results promised by a client call.
type Runtime_Module_run_Results_Future struct{ *capnp.Future }

func (p Runtime_Module_run_Results_Future) Struct() (Runtime_Module_run_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Module_run_Results(s), err
}

type Runtime_Module_close_Params capnp.Struct

// Runtime_Module_close_Params_TypeID is the unique identifier for the type Runtime_Module_close_Params.
const Runtime_Module_close_Params_TypeID = 0xe13d3cafc7c68823

func NewRuntime_Module_close_Params(s *capnp.Segment) (Runtime_Module_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Module_close_Params(st), err
}

func NewRootRuntime_Module_close_Params(s *capnp.Segment) (Runtime_Module_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Runtime_Module_close_Params(st), err
}

func ReadRootRuntime_Module_close_Params(msg *capnp.Message) (Runtime_Module_close_Params, error) {
	root, err := msg.Root()
	return Runtime_Module_close_Params(root.Struct()), err
}

func (s Runtime_Module_close_Params) String() string {
	str, _ := text.Marshal(0xe13d3cafc7c68823, capnp.Struct(s))
	return str
}

func (s Runtime_Module_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Module_close_Params) DecodeFromPtr(p capnp.Ptr) Runtime_Module_close_Params {
	return Runtime_Module_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Module_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Module_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Module_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Module_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Runtime_Module_close_Params) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Runtime_Module_close_Params) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Runtime_Module_close_Params_List is a list of Runtime_Module_close_Params.
type Runtime_Module_close_Params_List = capnp.StructList[Runtime_Module_close_Params]

// NewRuntime_Module_close_Params creates a new list of Runtime_Module_close_Params.
func NewRuntime_Module_close_Params_List(s *capnp.Segment, sz int32) (Runtime_Module_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Module_close_Params](l), err
}

// Runtime_Module_close_Params_Future is a wrapper for a Runtime_Module_close_Params promised by a client call.
type Runtime_Module_close_Params_Future struct{ *capnp.Future }

func (p Runtime_Module_close_Params_Future) Struct() (Runtime_Module_close_Params, error) {
	s, err := p.Future.Struct()
	return Runtime_Module_close_Params(s), err
}

type Runtime_Module_close_Results capnp.Struct

// Runtime_Module_close_Results_TypeID is the unique identifier for the type Runtime_Module_close_Results.
const Runtime_Module_close_Results_TypeID = 0xc9d95f3753a8ec42

func NewRuntime_Module_close_Results(s *capnp.Segment) (Runtime_Module_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_close_Results(st), err
}

func NewRootRuntime_Module_close_Results(s *capnp.Segment) (Runtime_Module_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Runtime_Module_close_Results(st), err
}

func ReadRootRuntime_Module_close_Results(msg *capnp.Message) (Runtime_Module_close_Results, error) {
	root, err := msg.Root()
	return Runtime_Module_close_Results(root.Struct()), err
}

func (s Runtime_Module_close_Results) String() string {
	str, _ := text.Marshal(0xc9d95f3753a8ec42, capnp.Struct(s))
	return str
}

func (s Runtime_Module_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Runtime_Module_close_Results) DecodeFromPtr(p capnp.Ptr) Runtime_Module_close_Results {
	return Runtime_Module_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Runtime_Module_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Runtime_Module_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Runtime_Module_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Runtime_Module_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Runtime_Module_close_Results_List is a list of Runtime_Module_close_Results.
type Runtime_Module_close_Results_List = capnp.StructList[Runtime_Module_close_Results]

// NewRuntime_Module_close_Results creates a new list of Runtime_Module_close_Results.
func NewRuntime_Module_close_Results_List(s *capnp.Segment, sz int32) (Runtime_Module_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Runtime_Module_close_Results](l), err
}

// Runtime_Module_close_Results_Future is a wrapper for a Runtime_Module_close_Results promised by a client call.
type Runtime_Module_close_Results_Future struct{ *capnp.Future }

func (p Runtime_Module_close_Results_Future) Struct() (Runtime_Module_close_Results, error) {
	s, err := p.Future.Struct()
	return Runtime_Module_close_Results(s), err
}

const schema_9419a7a54f76d35b = "x\xda|T]h\x1cU\x14\xfe\xbe{gwol" +
	"\xb6\xede\x16\xd2\x14\xecBLh+4\xa4[AY" +
	"\x95\x8d\x09\xf8PQ\xf7&\xf8C\x05\xcb\x92\x1d\xc3\xd2" +
	"\xcdn\xd8\xd9I\xf5!D\xc1\xdf\x07A\xa1\x0f\xad\xa5" +
	"\xb6\x8a\xf1\x07\x84&4R\x7f*\xf4A\xd2\x0a\x82\x18" +
	"A\xd0'\xf5E\xc1bQ\x04\x85>\x8c\xdcIwv" +
	"HB_\x96\x9ds\xbe\xf3\x9d\xef|\xf7\xdc;\xf2\xbe" +
	"\x18u\x0ef\xa7{!\xcc\x1b\xa9\xf4\xf5S\xdf\x8e\xb9" +
	"\x0b\xab/jW\x86\xdbo\x1cYZ\xbex,\x04\xe8" +
	"\xf6\xa7\xd7\xdc\xa1t\x1f\xe0\x1eH\xbf\xe2\xce\xdb\x7f\xa1" +
	"\xbe:4\xfb\xdfw\x17^\x86q\xc9.:\x95\xca\x00" +
	"\xee\x99\xf4\x9a\xfb\x91\x85\x1dZN?A0\xfc\xfc\xf1" +
	"\x8b\xdf\xbc\xf7\xc8_g\xa1w\xb3[\x9a\x12\x19\xe0\x90" +
	"V\x82\xee\xed\xca\xd6\xf5\xab\xe3`x\xf2\xab\x87.\xec" +
	"\xd9\xb7v\x0ef7\xd9\xd1\xe4Xh\xa0n\xa3\xfbR" +
	"\x04}A\x95\xc0p\xec\xda\x87\x93w\x1f\xfd\xf1k\xcb" +
	"\x0bD\x98E5F8\xe1\xd9\xcbW\x82\x81?\x9e\xfc" +
	"9\x91y]\x15l\xe6\x8eWW\xaf\x9c\xbf\xef\xfe_" +
	"\"\xfa\x9b\xa9@\x15\x09\xba\xf3\x11\xe9\xf9\xc2\xd1m\xf3" +
	"\xa7\xef\xf9-Q\xfa\x8e\xba\xd3\x96\xc6c\xeam2|" +
	"\xea\xfb\xb9G\x17?\xe8?a\x1dzM\xbd\xe5\xbe\xa9" +
	"\xf6\x02\xee\xa2\xca\xb8\x8b\xaa\x0f!\xf6\x87\xc7+\xfe\xcc" +
	"\xf0TeV4f\x8b\x13A\xa3]\x9b\xf1\x86\x1fn" +
	"V\x83:=\xe301\xa8f\xb14\xd9\xae\xb4\x03\xdf" +
	"(\x99\x02b\x09\xec\x8c\xa1\x0f\x0e@\xe8\xa1\x0c\x19\xeb" +
	"ggx\xdd_\x80\xd0\xd9L\xa6\x154F\x99\x9f\xaa" +
	"7}o\x94Q\x87\xb7\xff^r~:]_\xc5(" +
	"5\xf3\xc6\x11\x89\x10\xa0\xd9gQdY\x92;\xbbr" +
	"\xc0-\xa5\x8f7\x1b\xcf\xd48\x1d\x11w\x0f\x94\x85\xfc" +
	"\x835\xaf^5\xbb\xa4\x038\x04\xf4\xa9\x01\xc0\x9c\x90" +
	"4\xe7\x045\x99\xb36\xeb36xR\xd2\xac\x08j" +
	"!r\x14\x80^.\x00\xe6cI\xf3\xa9\xa0\x962G" +
	"\x09\xe8O\x8a\x80Y\x924\x97\x04\xb5\xe3\xe4\xe8\x00\xfa" +
	"3\x1b\\\x914\x97\x05\x99\xca1\x05\xe8/\x0f\x03\xe6" +
	"\x92\xa4\xb9*\x98\xf1[S\xccB0\x0bf\xbc\xc6\x1c" +
	"\xb7\xe3\xe6X\xb1T\xd0\x06\xf3~\xbbZkP\xff\xfb" +
	"\xd8\xbd\xd7\x17\x9e\x1e\xb8\x06R\x83%\xbf]m\x06m" +
	"\xea\xf0\xd7\x07V~\xd8\xf3\xe7\x8e\xe7\xd1Mx\xad\xd6" +
	"\xe6D\xd8\xaa4\xaa\x93\x9eW\x05\xc0\x1e\x08\xf6$l" +
	"\x93\x1bm\x9b\x1e\x8eLB\x994*6j\xbf\xf5d" +
	"P\xd2\x8c$\x8c:`=\xd9'i\xee\x12\xcc\x1c\xf3" +
	"\x9ec/\x04{\xc1\xfc\\\xa5\x1ex\x9d\xaf-[E" +
	"\xcb\xe5\x0d\xaf\xaf\x12\xa2fN\xdc,{\x040\xbd\x92" +
	"f\x97`\xe8G\x90\xf1&d\xd5\xa3\x82\xa0JP\xaa" +
	"\xcd\x94\xd1R\x0dNx~Po\xfb\xe8\x007\xe3Z" +
	"Acp\xc2\xcbG\xb0[I\\\xe7+\x95+\xad\xca" +
	"\x8c\x9f\x14y8!\xd2{\xb6\xd6\x1eoV=\xeb\xf0" +
	"F\x8dr\xeb\xde\xe5\xca\x0e\xcb\x18\xc3\xd8\x81\xc9\x19\xcf" +
	"(&\x1e\x1f\xddS\x8c\xdf\xbbT\xb1\xb4~J\xa5u" +
	"\xaa\xb2LE[~#\xfd\xcf\xbb\x0b#_\xfc\x9e\xb8" +
	">q\xc8^\x9f\xbd\x962:Q\xfb\xbb3Z\xb7\xb8" +
	"\x81]\x93N\x07\xf0\xff\x00\x00\x00\xff\xff\x98\xa7\x8a\x10"

func init() {
	schemas.Register(schema_9419a7a54f76d35b,
		0x84c67f001342cf99,
		0x86b3d1f87025c811,
		0x9ff14ea4ccb756ba,
		0xa0d2281eb34bc498,
		0xc9d95f3753a8ec42,
		0xe058eb2275c7c09f,
		0xe13d3cafc7c68823,
		0xe7389b7d0b5f32af,
		0xff6bb7b1b05afb0e)
}
