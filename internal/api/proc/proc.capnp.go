// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xe8bb307fa2f406fb

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xaf67b0a40b1c2bea

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xaf67b0a40b1c2bea, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Param() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Executor_exec_Params) HasParam() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetParam(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (p Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Params(s), err
}

func (p Executor_exec_Params_Future) Param() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0x8d124035fd940437

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0x8d124035fd940437, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Proc() Waiter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Waiter(p.Interface().Client())
}

func (s Executor_exec_Results) HasProc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProc(v Waiter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (p Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Results(s), err
}

func (p Executor_exec_Results_Future) Proc() Waiter {
	return Waiter(p.Future.Field(0, nil).Client())
}

type Waiter capnp.Client

// Waiter_TypeID is the unique identifier for the type Waiter.
const Waiter_TypeID = 0xc66c9bda04b0f29e

func (c Waiter) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Waiter) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Waiter) AddRef() Waiter {
	return Waiter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Waiter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Waiter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Waiter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Waiter) DecodeFromPtr(p capnp.Ptr) Waiter {
	return Waiter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Waiter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Waiter) IsSame(other Waiter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Waiter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Waiter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Waiter_Server is a Waiter with a local implementation.
type Waiter_Server interface {
	Wait(context.Context, Waiter_wait) error
}

// Waiter_NewServer creates a new Server from an implementation of Waiter_Server.
func Waiter_NewServer(s Waiter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Waiter_Methods(nil, s), s, c)
}

// Waiter_ServerToClient creates a new Client from an implementation of Waiter_Server.
// The caller is responsible for calling Release on the returned Client.
func Waiter_ServerToClient(s Waiter_Server) Waiter {
	return Waiter(capnp.NewClient(Waiter_NewServer(s)))
}

// Waiter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Waiter_Methods(methods []server.Method, s Waiter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Waiter_wait holds the state for a server call to Waiter.wait.
// See server.Call for documentation.
type Waiter_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Waiter_wait) Args() Waiter_wait_Params {
	return Waiter_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Waiter_wait) AllocResults() (Waiter_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results(r), err
}

// Waiter_List is a list of Waiter.
type Waiter_List = capnp.CapList[Waiter]

// NewWaiter creates a new list of Waiter.
func NewWaiter_List(s *capnp.Segment, sz int32) (Waiter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Waiter](l), err
}

type Waiter_wait_Params capnp.Struct

// Waiter_wait_Params_TypeID is the unique identifier for the type Waiter_wait_Params.
const Waiter_wait_Params_TypeID = 0x99761c4abe038bf3

func NewWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func NewRootWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func ReadRootWaiter_wait_Params(msg *capnp.Message) (Waiter_wait_Params, error) {
	root, err := msg.Root()
	return Waiter_wait_Params(root.Struct()), err
}

func (s Waiter_wait_Params) String() string {
	str, _ := text.Marshal(0x99761c4abe038bf3, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Params) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Params {
	return Waiter_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Waiter_wait_Params_List is a list of Waiter_wait_Params.
type Waiter_wait_Params_List = capnp.StructList[Waiter_wait_Params]

// NewWaiter_wait_Params creates a new list of Waiter_wait_Params.
func NewWaiter_wait_Params_List(s *capnp.Segment, sz int32) (Waiter_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Params](l), err
}

// Waiter_wait_Params_Future is a wrapper for a Waiter_wait_Params promised by a client call.
type Waiter_wait_Params_Future struct{ *capnp.Future }

func (p Waiter_wait_Params_Future) Struct() (Waiter_wait_Params, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Params(s), err
}

type Waiter_wait_Results capnp.Struct

// Waiter_wait_Results_TypeID is the unique identifier for the type Waiter_wait_Results.
const Waiter_wait_Results_TypeID = 0x957555c94e5b1064

func NewWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results(st), err
}

func NewRootWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results(st), err
}

func ReadRootWaiter_wait_Results(msg *capnp.Message) (Waiter_wait_Results, error) {
	root, err := msg.Root()
	return Waiter_wait_Results(root.Struct()), err
}

func (s Waiter_wait_Results) String() string {
	str, _ := text.Marshal(0x957555c94e5b1064, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Results) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Results {
	return Waiter_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Waiter_wait_Results_List is a list of Waiter_wait_Results.
type Waiter_wait_Results_List = capnp.StructList[Waiter_wait_Results]

// NewWaiter_wait_Results creates a new list of Waiter_wait_Results.
func NewWaiter_wait_Results_List(s *capnp.Segment, sz int32) (Waiter_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Results](l), err
}

// Waiter_wait_Results_Future is a wrapper for a Waiter_wait_Results promised by a client call.
type Waiter_wait_Results_Future struct{ *capnp.Future }

func (p Waiter_wait_Results_Future) Struct() (Waiter_wait_Results, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Results(s), err
}

type Unix capnp.Client

// Unix_TypeID is the unique identifier for the type Unix.
const Unix_TypeID = 0x85f7549a53596cef

func (c Unix) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Unix) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Unix) AddRef() Unix {
	return Unix(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Unix) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Unix) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Unix) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Unix) DecodeFromPtr(p capnp.Ptr) Unix {
	return Unix(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Unix) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Unix) IsSame(other Unix) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Unix) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Unix) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Unix_Server is a Unix with a local implementation.
type Unix_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Unix_NewServer creates a new Server from an implementation of Unix_Server.
func Unix_NewServer(s Unix_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Methods(nil, s), s, c)
}

// Unix_ServerToClient creates a new Client from an implementation of Unix_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_ServerToClient(s Unix_Server) Unix {
	return Unix(capnp.NewClient(Unix_NewServer(s)))
}

// Unix_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Methods(methods []server.Method, s Unix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Unix_List is a list of Unix.
type Unix_List = capnp.CapList[Unix]

// NewUnix creates a new list of Unix.
func NewUnix_List(s *capnp.Segment, sz int32) (Unix_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Unix](l), err
}

type Unix_Command capnp.Struct

// Unix_Command_TypeID is the unique identifier for the type Unix_Command.
const Unix_Command_TypeID = 0x8e898dedb95cdee4

func NewUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command(st), err
}

func NewRootUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command(st), err
}

func ReadRootUnix_Command(msg *capnp.Message) (Unix_Command, error) {
	root, err := msg.Root()
	return Unix_Command(root.Struct()), err
}

func (s Unix_Command) String() string {
	str, _ := text.Marshal(0x8e898dedb95cdee4, capnp.Struct(s))
	return str
}

func (s Unix_Command) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Command) DecodeFromPtr(p capnp.Ptr) Unix_Command {
	return Unix_Command(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Command) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Command) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Command) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Command) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unix_Command) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Unix_Command) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Unix_Command) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Unix_Command) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Unix_Command) Dir() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Unix_Command) HasDir() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Unix_Command) DirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Unix_Command) SetDir(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Unix_Command) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Unix_Command) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Unix_Command) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s Unix_Command) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Unix_Command) HasEnv() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Unix_Command) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s Unix_Command) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(4)
	return iostream.Provider(p.Interface().Client())
}

func (s Unix_Command) HasStdin() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Unix_Command) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Unix_Command) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(5)
	return iostream.Stream(p.Interface().Client())
}

func (s Unix_Command) HasStdout() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Unix_Command) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(5, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(5, in.ToPtr())
}

func (s Unix_Command) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(6)
	return iostream.Stream(p.Interface().Client())
}

func (s Unix_Command) HasStderr() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Unix_Command) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(6, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(6, in.ToPtr())
}

// Unix_Command_List is a list of Unix_Command.
type Unix_Command_List = capnp.StructList[Unix_Command]

// NewUnix_Command creates a new list of Unix_Command.
func NewUnix_Command_List(s *capnp.Segment, sz int32) (Unix_Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Unix_Command](l), err
}

// Unix_Command_Future is a wrapper for a Unix_Command promised by a client call.
type Unix_Command_Future struct{ *capnp.Future }

func (p Unix_Command_Future) Struct() (Unix_Command, error) {
	s, err := p.Future.Struct()
	return Unix_Command(s), err
}

func (p Unix_Command_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(4, nil).Client())
}

func (p Unix_Command_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(5, nil).Client())
}

func (p Unix_Command_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(6, nil).Client())
}

type Unix_Proc capnp.Client

// Unix_Proc_TypeID is the unique identifier for the type Unix_Proc.
const Unix_Proc_TypeID = 0xa56f29d54a3673af

func (c Unix_Proc) Signal(ctx context.Context, params func(Unix_Proc_signal_Params) error) (Unix_Proc_signal_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Unix_Proc_signal_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Unix_Proc_signal_Results_Future{Future: ans.Future()}, release
}
func (c Unix_Proc) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Unix_Proc) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Unix_Proc) AddRef() Unix_Proc {
	return Unix_Proc(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Unix_Proc) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Unix_Proc) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Unix_Proc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Unix_Proc) DecodeFromPtr(p capnp.Ptr) Unix_Proc {
	return Unix_Proc(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Unix_Proc) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Unix_Proc) IsSame(other Unix_Proc) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Unix_Proc) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Unix_Proc) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Unix_Proc_Server is a Unix_Proc with a local implementation.
type Unix_Proc_Server interface {
	Signal(context.Context, Unix_Proc_signal) error

	Wait(context.Context, Waiter_wait) error
}

// Unix_Proc_NewServer creates a new Server from an implementation of Unix_Proc_Server.
func Unix_Proc_NewServer(s Unix_Proc_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Proc_Methods(nil, s), s, c)
}

// Unix_Proc_ServerToClient creates a new Client from an implementation of Unix_Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_Proc_ServerToClient(s Unix_Proc_Server) Unix_Proc {
	return Unix_Proc(capnp.NewClient(Unix_Proc_NewServer(s)))
}

// Unix_Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Proc_Methods(methods []server.Method, s Unix_Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Signal(ctx, Unix_Proc_signal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Unix_Proc_signal holds the state for a server call to Unix_Proc.signal.
// See server.Call for documentation.
type Unix_Proc_signal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Unix_Proc_signal) Args() Unix_Proc_signal_Params {
	return Unix_Proc_signal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Unix_Proc_signal) AllocResults() (Unix_Proc_signal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(r), err
}

// Unix_Proc_List is a list of Unix_Proc.
type Unix_Proc_List = capnp.CapList[Unix_Proc]

// NewUnix_Proc creates a new list of Unix_Proc.
func NewUnix_Proc_List(s *capnp.Segment, sz int32) (Unix_Proc_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Unix_Proc](l), err
}

type Unix_Proc_Signal uint16

// Unix_Proc_Signal_TypeID is the unique identifier for the type Unix_Proc_Signal.
const Unix_Proc_Signal_TypeID = 0x8441e8c774575aac

// Values of Unix_Proc_Signal.
const (
	Unix_Proc_Signal_sigINT  Unix_Proc_Signal = 0
	Unix_Proc_Signal_sigTERM Unix_Proc_Signal = 1
	Unix_Proc_Signal_sigKILL Unix_Proc_Signal = 2
)

// String returns the enum's constant name.
func (c Unix_Proc_Signal) String() string {
	switch c {
	case Unix_Proc_Signal_sigINT:
		return "sigINT"
	case Unix_Proc_Signal_sigTERM:
		return "sigTERM"
	case Unix_Proc_Signal_sigKILL:
		return "sigKILL"

	default:
		return ""
	}
}

// Unix_Proc_SignalFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Unix_Proc_SignalFromString(c string) Unix_Proc_Signal {
	switch c {
	case "sigINT":
		return Unix_Proc_Signal_sigINT
	case "sigTERM":
		return Unix_Proc_Signal_sigTERM
	case "sigKILL":
		return Unix_Proc_Signal_sigKILL

	default:
		return 0
	}
}

type Unix_Proc_Signal_List = capnp.EnumList[Unix_Proc_Signal]

func NewUnix_Proc_Signal_List(s *capnp.Segment, sz int32) (Unix_Proc_Signal_List, error) {
	return capnp.NewEnumList[Unix_Proc_Signal](s, sz)
}

type Unix_Proc_signal_Params capnp.Struct

// Unix_Proc_signal_Params_TypeID is the unique identifier for the type Unix_Proc_signal_Params.
const Unix_Proc_signal_Params_TypeID = 0x9080163041c90a87

func NewUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params(st), err
}

func NewRootUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params(st), err
}

func ReadRootUnix_Proc_signal_Params(msg *capnp.Message) (Unix_Proc_signal_Params, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Params(root.Struct()), err
}

func (s Unix_Proc_signal_Params) String() string {
	str, _ := text.Marshal(0x9080163041c90a87, capnp.Struct(s))
	return str
}

func (s Unix_Proc_signal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Proc_signal_Params) DecodeFromPtr(p capnp.Ptr) Unix_Proc_signal_Params {
	return Unix_Proc_signal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Proc_signal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Proc_signal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Proc_signal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Proc_signal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unix_Proc_signal_Params) Signal() Unix_Proc_Signal {
	return Unix_Proc_Signal(capnp.Struct(s).Uint16(0))
}

func (s Unix_Proc_signal_Params) SetSignal(v Unix_Proc_Signal) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Unix_Proc_signal_Params_List is a list of Unix_Proc_signal_Params.
type Unix_Proc_signal_Params_List = capnp.StructList[Unix_Proc_signal_Params]

// NewUnix_Proc_signal_Params creates a new list of Unix_Proc_signal_Params.
func NewUnix_Proc_signal_Params_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Params](l), err
}

// Unix_Proc_signal_Params_Future is a wrapper for a Unix_Proc_signal_Params promised by a client call.
type Unix_Proc_signal_Params_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Params_Future) Struct() (Unix_Proc_signal_Params, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Params(s), err
}

type Unix_Proc_signal_Results capnp.Struct

// Unix_Proc_signal_Results_TypeID is the unique identifier for the type Unix_Proc_signal_Results.
const Unix_Proc_signal_Results_TypeID = 0xfeda57ee26ad6825

func NewUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(st), err
}

func NewRootUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(st), err
}

func ReadRootUnix_Proc_signal_Results(msg *capnp.Message) (Unix_Proc_signal_Results, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Results(root.Struct()), err
}

func (s Unix_Proc_signal_Results) String() string {
	str, _ := text.Marshal(0xfeda57ee26ad6825, capnp.Struct(s))
	return str
}

func (s Unix_Proc_signal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Proc_signal_Results) DecodeFromPtr(p capnp.Ptr) Unix_Proc_signal_Results {
	return Unix_Proc_signal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Proc_signal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Proc_signal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Proc_signal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Proc_signal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Unix_Proc_signal_Results_List is a list of Unix_Proc_signal_Results.
type Unix_Proc_signal_Results_List = capnp.StructList[Unix_Proc_signal_Results]

// NewUnix_Proc_signal_Results creates a new list of Unix_Proc_signal_Results.
func NewUnix_Proc_signal_Results_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Results](l), err
}

// Unix_Proc_signal_Results_Future is a wrapper for a Unix_Proc_signal_Results promised by a client call.
type Unix_Proc_signal_Results_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Results_Future) Struct() (Unix_Proc_signal_Results, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Results(s), err
}

const schema_d78885a0de56b292 = "x\xda|T_h\x1c\xd5\x17>\xdf\xdc\xb9\xb9\xf95" +
	"Iwof\xf3\x0bH4\x10\xa2\xd2\x88!\xb6Da" +
	"}\xd8l\xa4\x84\xd6Z\xf7\xe6\x8f\xc1?\x08C\xb2l" +
	"\x076\xbbqf\xb6\xe6-Q\x0c\x1a\xa4jK}\xa8" +
	"\x12\x91\xa2\x0f\x8a\xa5A*\x18\xb4\"\x82JA\x1f\x0a" +
	"V\xa1\x0f\xa5\x96\x16\x12iZ\xa9\x85\xa2\xa2#w6" +
	"\xbb3I\xb4O;\x9cs\xf6;\xe7\xfb\xcewO\xdf" +
	"Qc\xc0|\xa0E4\x91\xa1\xe6xC\xf0\xd1S\xe3" +
	"\xfe\xb7+\xd9\x97H\xb6\x19\xc1I\xef\xc1\xbd\xe7v\x94" +
	"\xdf'\x82\xe5\xf0KV\x85\x0b\"\xeb9\xfe8!\xb8" +
	"^|r\xe4\xad\xd1[\xf3$\x9bXp\xe4\xe3'." +
	"\xbc;\xff\xcaO\xbap\x9e\xbfh-\xf0{\x89\xacE" +
	".\xacE\xdeN\x14<d\x1e\xfd\xab\x7f\xa0\xf5\x10\xc9" +
	"\x14\x888D\x12\xbbN\xf3m X_\xf3\x0c!\xb8" +
	"|\xe1\x99\xe5\xb5C\x0b\xaf\x91L\xc6\xa0\xb9\xd0\xfd\xae" +
	"\xf0\xaf\xac5\xddy\xd7*\x7f\x1d\x84\xe0\xe5mg\xb2" +
	"}\xff\x9f{\x83T\x1b@d\xea\xd4aq\x87F;" +
	"&4\xdad\xf2\xe9\xfdg\xc6*o\x92l]\xcf[" +
	"\xcb\xe2\x0f2\x83\xdf^e_\xec\xed8x,\x96X" +
	"\x147\xc8\x8c\x98\xca$\x8b\xfa\x13\xac\x17\xc4\x87\xd6\x82" +
	"h'\xb2\x0e\x8b!kY\x7f\x05\xbf\xdc\xd7\xd1\xf4\xde" +
	"R\xe1d\x9c\xcd\x07\xc2\xd0\xfdO\x84\xfd\xdf\xb9\xb1d" +
	"\x9e\x7f\xbb\xf8\xcd\x16m\xbe\x17G\xacs!\xa9\xb3b" +
	"\xc8\xfa]\x7f\x05\x7f6\xdc<>\xdb\xf7\xd9\xca\xa6b" +
	"J\xc2\xfaY\x1c\xb7V\xab\x1a\x88!\xab\xbfQX\xfd" +
	"\x8d\x89\xe0\xee\x03'\xee\xb96~\xfeo\x92m5\xf6" +
	";\x1a\xbb@\x17\x83i\xb7<\xd1;aO\x1b\xa5\xe9" +
	"\xf4X\xc9\x99\xe9\xcd\xe9\xc0\x88S\x10%\xbb\x98\x03T" +
	"3\x0c\"yg\x9a\x08\x90m\x83D0d\xcb Q" +
	"\xc6s\x0a{\xf6\x8f\xcezNat\xf7\xf0c\xfa\xf7" +
	"\xd1=\xfb\xf6\xd5\x01\xb1\x0eH\xaa\x11\xf1e\xfdo0" +
	"\xa6\x1c\xef\x99}\xa4<5e\x97&\x13\xbao\x8eq" +
	"e\x02\x11\xbf\x01Ht*\xd3\x88\x85\x88$\xdau\x15" +
	"\x90c@2\x82&\xd4\x9b\xb3\xd2tz\xf7L~\xa2" +
	"\xe2\x97\xdd\xde\xfcL~\xa2{8\xefU\x8a\xbeG\xa4" +
	"Lf\x12\x99 \x92-=D\xaa\x91A\xa5\x0c$\xf4" +
	"_!\xa3=h\xba1\xc4\xba>\xeb\xf3\x92\xd6\xa6\xa3" +
	"\x0e\xf5\x89\x86ZbP\x9f\x1b\x90@J\x9bL.w" +
	"\x11\xa9S\x0c\xeaK\x03\xd20R\xa1\x92\xa7u\xe5\xa7" +
	"\x0c\xea\x07\x03\x92\xb1\x14\x18\x91<\xab+\xbfcP+" +
	"\x06\xa4i\xa6`\x12\xc9+;\x89\xd4E\x06u\xd5\x80" +
	"\xe4<\x05N$W\xd3D\xea2\x83\xfa\xd5\x80lh" +
	"H\xa1\x81H\xae\xe9\xe0\x0a\x83\xba\xa9\x89\xd8\xfe\x014" +
	"\x93\x81f\x82\x98t\xdc\xdaw\xc2v\x0b\x1e\xb6S(" +
	"\x9b\x8em'\x88|\xe9\xe0\xa6P\xa7\xe7O:%\xc8" +
	"[c\x0f_\x9f}\xb6\xebjU\x87\x8c\xe7O\x96+" +
	">dp){\xea\xc7\xbb\xae%\xe6(J\xe4]w" +
	"kb\xc3.\"gyN\xa1d\x17\xbbs\xb6k\xb3" +
	")/\xbe\x8ct\xb4\x8cL\xb5\x0a\x89\xe8\xb6\x10\x90\xd8" +
	"\xb4\x8eq\xdb\xf1\xf3n\xef\xf3\xb6\xe3w\x0fg\xaa\xfb" +
	"\xfd\xcf\x82\\\xa7\xed\xdaS\xde\x16{\xf6\x86\xc6\x0b]" +
	"\x17\xdd1\xa43#\xe1\x04\xcad\x9c\xa8~=P{" +
	"GR\xa6\xc9\x90\\\xac\x0f:\x80\x10 \xf2\x0e\xdd\xc6" +
	"\x89\xb9p\x90\x0d>\xdc\x19Q\xef\x9c\xd6i\xb4b\x83" +
	"\xe5\xd1\x1a\xe3\x8e\x1a5\xb8\xda\x84\xd5\x11kg\x0a\xb5" +
	"C&eO8bB\xd3\x1f@\x0e\x1b\x01\xc2\x99\x84" +
	"_\x8eA\xd4n\x14j\xa7WCP\xb6\x19\xd9\x0e\xc8" +
	"\xfbEBO\xbf\xe59\x86F\xff\xb7`\xd82kB" +
	"\xa2\x15\xa3\xb77\x83~\x9b\xa2\xe8{\xff\x04\x00\x00\xff" +
	"\xff5\xe8\xcd\xdd"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x8441e8c774575aac,
		0x85f7549a53596cef,
		0x8d124035fd940437,
		0x8e898dedb95cdee4,
		0x9080163041c90a87,
		0x957555c94e5b1064,
		0x99761c4abe038bf3,
		0xa56f29d54a3673af,
		0xaf67b0a40b1c2bea,
		0xc66c9bda04b0f29e,
		0xe8bb307fa2f406fb,
		0xfeda57ee26ad6825)
}
