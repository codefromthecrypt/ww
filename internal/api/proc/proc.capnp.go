// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xe8bb307fa2f406fb

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xaf67b0a40b1c2bea

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xaf67b0a40b1c2bea, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Config() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Executor_exec_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetConfig(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (p Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Params(s), err
}

func (p Executor_exec_Params_Future) Config() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0x8d124035fd940437

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0x8d124035fd940437, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Proc() Waiter {
	p, _ := capnp.Struct(s).Ptr(0)
	return Waiter(p.Interface().Client())
}

func (s Executor_exec_Results) HasProc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProc(v Waiter) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (p Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Results(s), err
}

func (p Executor_exec_Results_Future) Proc() Waiter {
	return Waiter(p.Future.Field(0, nil).Client())
}

type Waiter capnp.Client

// Waiter_TypeID is the unique identifier for the type Waiter.
const Waiter_TypeID = 0xc66c9bda04b0f29e

func (c Waiter) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Waiter) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Waiter) AddRef() Waiter {
	return Waiter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Waiter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Waiter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Waiter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Waiter) DecodeFromPtr(p capnp.Ptr) Waiter {
	return Waiter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Waiter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Waiter) IsSame(other Waiter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Waiter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Waiter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Waiter_Server is a Waiter with a local implementation.
type Waiter_Server interface {
	Wait(context.Context, Waiter_wait) error
}

// Waiter_NewServer creates a new Server from an implementation of Waiter_Server.
func Waiter_NewServer(s Waiter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Waiter_Methods(nil, s), s, c)
}

// Waiter_ServerToClient creates a new Client from an implementation of Waiter_Server.
// The caller is responsible for calling Release on the returned Client.
func Waiter_ServerToClient(s Waiter_Server) Waiter {
	return Waiter(capnp.NewClient(Waiter_NewServer(s)))
}

// Waiter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Waiter_Methods(methods []server.Method, s Waiter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Waiter_wait holds the state for a server call to Waiter.wait.
// See server.Call for documentation.
type Waiter_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Waiter_wait) Args() Waiter_wait_Params {
	return Waiter_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Waiter_wait) AllocResults() (Waiter_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(r), err
}

// Waiter_List is a list of Waiter.
type Waiter_List = capnp.CapList[Waiter]

// NewWaiter creates a new list of Waiter.
func NewWaiter_List(s *capnp.Segment, sz int32) (Waiter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Waiter](l), err
}

type Waiter_wait_Params capnp.Struct

// Waiter_wait_Params_TypeID is the unique identifier for the type Waiter_wait_Params.
const Waiter_wait_Params_TypeID = 0x99761c4abe038bf3

func NewWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func NewRootWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params(st), err
}

func ReadRootWaiter_wait_Params(msg *capnp.Message) (Waiter_wait_Params, error) {
	root, err := msg.Root()
	return Waiter_wait_Params(root.Struct()), err
}

func (s Waiter_wait_Params) String() string {
	str, _ := text.Marshal(0x99761c4abe038bf3, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Params) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Params {
	return Waiter_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Waiter_wait_Params_List is a list of Waiter_wait_Params.
type Waiter_wait_Params_List = capnp.StructList[Waiter_wait_Params]

// NewWaiter_wait_Params creates a new list of Waiter_wait_Params.
func NewWaiter_wait_Params_List(s *capnp.Segment, sz int32) (Waiter_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Params](l), err
}

// Waiter_wait_Params_Future is a wrapper for a Waiter_wait_Params promised by a client call.
type Waiter_wait_Params_Future struct{ *capnp.Future }

func (p Waiter_wait_Params_Future) Struct() (Waiter_wait_Params, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Params(s), err
}

type Waiter_wait_Results capnp.Struct

// Waiter_wait_Results_TypeID is the unique identifier for the type Waiter_wait_Results.
const Waiter_wait_Results_TypeID = 0x957555c94e5b1064

func NewWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(st), err
}

func NewRootWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Waiter_wait_Results(st), err
}

func ReadRootWaiter_wait_Results(msg *capnp.Message) (Waiter_wait_Results, error) {
	root, err := msg.Root()
	return Waiter_wait_Results(root.Struct()), err
}

func (s Waiter_wait_Results) String() string {
	str, _ := text.Marshal(0x957555c94e5b1064, capnp.Struct(s))
	return str
}

func (s Waiter_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Waiter_wait_Results) DecodeFromPtr(p capnp.Ptr) Waiter_wait_Results {
	return Waiter_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Waiter_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Waiter_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Waiter_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Waiter_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Waiter_wait_Results) Result() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Waiter_wait_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Waiter_wait_Results) SetResult(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Waiter_wait_Results_List is a list of Waiter_wait_Results.
type Waiter_wait_Results_List = capnp.StructList[Waiter_wait_Results]

// NewWaiter_wait_Results creates a new list of Waiter_wait_Results.
func NewWaiter_wait_Results_List(s *capnp.Segment, sz int32) (Waiter_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Waiter_wait_Results](l), err
}

// Waiter_wait_Results_Future is a wrapper for a Waiter_wait_Results promised by a client call.
type Waiter_wait_Results_Future struct{ *capnp.Future }

func (p Waiter_wait_Results_Future) Struct() (Waiter_wait_Results, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Results(s), err
}

func (p Waiter_wait_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Unix capnp.Client

// Unix_TypeID is the unique identifier for the type Unix.
const Unix_TypeID = 0x85f7549a53596cef

func (c Unix) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Unix) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Unix) AddRef() Unix {
	return Unix(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Unix) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Unix) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Unix) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Unix) DecodeFromPtr(p capnp.Ptr) Unix {
	return Unix(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Unix) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Unix) IsSame(other Unix) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Unix) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Unix) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Unix_Server is a Unix with a local implementation.
type Unix_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Unix_NewServer creates a new Server from an implementation of Unix_Server.
func Unix_NewServer(s Unix_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Methods(nil, s), s, c)
}

// Unix_ServerToClient creates a new Client from an implementation of Unix_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_ServerToClient(s Unix_Server) Unix {
	return Unix(capnp.NewClient(Unix_NewServer(s)))
}

// Unix_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Methods(methods []server.Method, s Unix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Unix_List is a list of Unix.
type Unix_List = capnp.CapList[Unix]

// NewUnix creates a new list of Unix.
func NewUnix_List(s *capnp.Segment, sz int32) (Unix_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Unix](l), err
}

type Unix_Command capnp.Struct

// Unix_Command_TypeID is the unique identifier for the type Unix_Command.
const Unix_Command_TypeID = 0x8e898dedb95cdee4

func NewUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command(st), err
}

func NewRootUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command(st), err
}

func ReadRootUnix_Command(msg *capnp.Message) (Unix_Command, error) {
	root, err := msg.Root()
	return Unix_Command(root.Struct()), err
}

func (s Unix_Command) String() string {
	str, _ := text.Marshal(0x8e898dedb95cdee4, capnp.Struct(s))
	return str
}

func (s Unix_Command) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Command) DecodeFromPtr(p capnp.Ptr) Unix_Command {
	return Unix_Command(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Command) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Command) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Command) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Command) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unix_Command) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Unix_Command) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Unix_Command) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Unix_Command) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Unix_Command) Dir() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Unix_Command) HasDir() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Unix_Command) DirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Unix_Command) SetDir(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Unix_Command) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Unix_Command) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Unix_Command) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

func (s Unix_Command) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Unix_Command) HasEnv() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Unix_Command) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

func (s Unix_Command) Stdin() iostream.Provider {
	p, _ := capnp.Struct(s).Ptr(4)
	return iostream.Provider(p.Interface().Client())
}

func (s Unix_Command) HasStdin() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Unix_Command) SetStdin(v iostream.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Unix_Command) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(5)
	return iostream.Stream(p.Interface().Client())
}

func (s Unix_Command) HasStdout() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Unix_Command) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(5, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(5, in.ToPtr())
}

func (s Unix_Command) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(6)
	return iostream.Stream(p.Interface().Client())
}

func (s Unix_Command) HasStderr() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Unix_Command) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(6, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(6, in.ToPtr())
}

// Unix_Command_List is a list of Unix_Command.
type Unix_Command_List = capnp.StructList[Unix_Command]

// NewUnix_Command creates a new list of Unix_Command.
func NewUnix_Command_List(s *capnp.Segment, sz int32) (Unix_Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Unix_Command](l), err
}

// Unix_Command_Future is a wrapper for a Unix_Command promised by a client call.
type Unix_Command_Future struct{ *capnp.Future }

func (p Unix_Command_Future) Struct() (Unix_Command, error) {
	s, err := p.Future.Struct()
	return Unix_Command(s), err
}

func (p Unix_Command_Future) Stdin() iostream.Provider {
	return iostream.Provider(p.Future.Field(4, nil).Client())
}

func (p Unix_Command_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(5, nil).Client())
}

func (p Unix_Command_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(6, nil).Client())
}

type Unix_Proc capnp.Client

// Unix_Proc_TypeID is the unique identifier for the type Unix_Proc.
const Unix_Proc_TypeID = 0xa56f29d54a3673af

func (c Unix_Proc) Signal(ctx context.Context, params func(Unix_Proc_signal_Params) error) (Unix_Proc_signal_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Unix_Proc_signal_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Unix_Proc_signal_Results_Future{Future: ans.Future()}, release
}
func (c Unix_Proc) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Unix_Proc) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Unix_Proc) AddRef() Unix_Proc {
	return Unix_Proc(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Unix_Proc) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Unix_Proc) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Unix_Proc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Unix_Proc) DecodeFromPtr(p capnp.Ptr) Unix_Proc {
	return Unix_Proc(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Unix_Proc) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Unix_Proc) IsSame(other Unix_Proc) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Unix_Proc) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Unix_Proc) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Unix_Proc_Server is a Unix_Proc with a local implementation.
type Unix_Proc_Server interface {
	Signal(context.Context, Unix_Proc_signal) error

	Wait(context.Context, Waiter_wait) error
}

// Unix_Proc_NewServer creates a new Server from an implementation of Unix_Proc_Server.
func Unix_Proc_NewServer(s Unix_Proc_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Proc_Methods(nil, s), s, c)
}

// Unix_Proc_ServerToClient creates a new Client from an implementation of Unix_Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_Proc_ServerToClient(s Unix_Proc_Server) Unix_Proc {
	return Unix_Proc(capnp.NewClient(Unix_Proc_NewServer(s)))
}

// Unix_Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Proc_Methods(methods []server.Method, s Unix_Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Signal(ctx, Unix_Proc_signal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Unix_Proc_signal holds the state for a server call to Unix_Proc.signal.
// See server.Call for documentation.
type Unix_Proc_signal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Unix_Proc_signal) Args() Unix_Proc_signal_Params {
	return Unix_Proc_signal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Unix_Proc_signal) AllocResults() (Unix_Proc_signal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(r), err
}

// Unix_Proc_List is a list of Unix_Proc.
type Unix_Proc_List = capnp.CapList[Unix_Proc]

// NewUnix_Proc creates a new list of Unix_Proc.
func NewUnix_Proc_List(s *capnp.Segment, sz int32) (Unix_Proc_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Unix_Proc](l), err
}

type Unix_Proc_Signal uint16

// Unix_Proc_Signal_TypeID is the unique identifier for the type Unix_Proc_Signal.
const Unix_Proc_Signal_TypeID = 0x8441e8c774575aac

// Values of Unix_Proc_Signal.
const (
	Unix_Proc_Signal_sigINT  Unix_Proc_Signal = 0
	Unix_Proc_Signal_sigTERM Unix_Proc_Signal = 1
	Unix_Proc_Signal_sigKILL Unix_Proc_Signal = 2
)

// String returns the enum's constant name.
func (c Unix_Proc_Signal) String() string {
	switch c {
	case Unix_Proc_Signal_sigINT:
		return "sigINT"
	case Unix_Proc_Signal_sigTERM:
		return "sigTERM"
	case Unix_Proc_Signal_sigKILL:
		return "sigKILL"

	default:
		return ""
	}
}

// Unix_Proc_SignalFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Unix_Proc_SignalFromString(c string) Unix_Proc_Signal {
	switch c {
	case "sigINT":
		return Unix_Proc_Signal_sigINT
	case "sigTERM":
		return Unix_Proc_Signal_sigTERM
	case "sigKILL":
		return Unix_Proc_Signal_sigKILL

	default:
		return 0
	}
}

type Unix_Proc_Signal_List = capnp.EnumList[Unix_Proc_Signal]

func NewUnix_Proc_Signal_List(s *capnp.Segment, sz int32) (Unix_Proc_Signal_List, error) {
	return capnp.NewEnumList[Unix_Proc_Signal](s, sz)
}

type Unix_Proc_signal_Params capnp.Struct

// Unix_Proc_signal_Params_TypeID is the unique identifier for the type Unix_Proc_signal_Params.
const Unix_Proc_signal_Params_TypeID = 0x9080163041c90a87

func NewUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params(st), err
}

func NewRootUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params(st), err
}

func ReadRootUnix_Proc_signal_Params(msg *capnp.Message) (Unix_Proc_signal_Params, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Params(root.Struct()), err
}

func (s Unix_Proc_signal_Params) String() string {
	str, _ := text.Marshal(0x9080163041c90a87, capnp.Struct(s))
	return str
}

func (s Unix_Proc_signal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Proc_signal_Params) DecodeFromPtr(p capnp.Ptr) Unix_Proc_signal_Params {
	return Unix_Proc_signal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Proc_signal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Proc_signal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Proc_signal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Proc_signal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unix_Proc_signal_Params) Signal() Unix_Proc_Signal {
	return Unix_Proc_Signal(capnp.Struct(s).Uint16(0))
}

func (s Unix_Proc_signal_Params) SetSignal(v Unix_Proc_Signal) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Unix_Proc_signal_Params_List is a list of Unix_Proc_signal_Params.
type Unix_Proc_signal_Params_List = capnp.StructList[Unix_Proc_signal_Params]

// NewUnix_Proc_signal_Params creates a new list of Unix_Proc_signal_Params.
func NewUnix_Proc_signal_Params_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Params](l), err
}

// Unix_Proc_signal_Params_Future is a wrapper for a Unix_Proc_signal_Params promised by a client call.
type Unix_Proc_signal_Params_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Params_Future) Struct() (Unix_Proc_signal_Params, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Params(s), err
}

type Unix_Proc_signal_Results capnp.Struct

// Unix_Proc_signal_Results_TypeID is the unique identifier for the type Unix_Proc_signal_Results.
const Unix_Proc_signal_Results_TypeID = 0xfeda57ee26ad6825

func NewUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(st), err
}

func NewRootUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results(st), err
}

func ReadRootUnix_Proc_signal_Results(msg *capnp.Message) (Unix_Proc_signal_Results, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Results(root.Struct()), err
}

func (s Unix_Proc_signal_Results) String() string {
	str, _ := text.Marshal(0xfeda57ee26ad6825, capnp.Struct(s))
	return str
}

func (s Unix_Proc_signal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unix_Proc_signal_Results) DecodeFromPtr(p capnp.Ptr) Unix_Proc_signal_Results {
	return Unix_Proc_signal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unix_Proc_signal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unix_Proc_signal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unix_Proc_signal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unix_Proc_signal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Unix_Proc_signal_Results_List is a list of Unix_Proc_signal_Results.
type Unix_Proc_signal_Results_List = capnp.StructList[Unix_Proc_signal_Results]

// NewUnix_Proc_signal_Results creates a new list of Unix_Proc_signal_Results.
func NewUnix_Proc_signal_Results_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Results](l), err
}

// Unix_Proc_signal_Results_Future is a wrapper for a Unix_Proc_signal_Results promised by a client call.
type Unix_Proc_signal_Results_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Results_Future) Struct() (Unix_Proc_signal_Results, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Results(s), err
}

const schema_d78885a0de56b292 = "x\xda|U_h\x1c\xd5\x17>\xdf\xdc\xb9;\xd3&" +
	"\xe9\xee\xcd\xdd\xfc\xc2O\xa2\x81\x90Z\x8c4$\x96(" +
	"\xac\x0f\x9bM-\xa1\xb5\xd6\x9d\xfc1\xd4\x7f0$\xeb" +
	"v`\xb3\x1bg&5o\x09b\xd0\"U)\xfa\xa0" +
	"\x12\xd1b\x1f*J\x83T\xb0\xf8\x07\x11T\x0a\xbe\x08" +
	"V\xb1`\xa9\xa5B\x94\xa6\xb5\xb5PPt\xe4\xcef" +
	"wg7i_\x92\xe1\x9c{\xcf\xf7}\xe7|\xf7l" +
	"\xdfW\xda\xa0\xde\xdfb4\x91f-\xf0X\xf0\xfe\xa3" +
	"\x13\xfe7+\x99\xe7H\xb4i\xc1\x09\xef\xde=g\xee" +
	"*\x1d#\x82t\xf8\x059\xcb\x0d\"\xf94\x7f\x98\x10" +
	"\\)\xec\x1f}c\xec\xc6\"\x89&\x16\x1c\xf9\xf0\x91" +
	"so/\xbe\xf0\xa3:\xb8\xc8\x9f\x95\x87\xf86\"\xb9" +
	"\xc4\x0d\xb9\xc4\xdb\x89\x82\xfb\xf4W\xff\x19\x18l=L" +
	"\"\x09\"\x0e#\x81\x1dg\xf8f\x10\xe4\xcf<M\x08" +
	".\x9e{\xfc\xd4\xea\xe1C/\x91HDJsC\xe1" +
	"m\x8f})\x07b\x06\xd1\x8e\xfe\xd8\xcb \x04\xcfo" +
	">\x9d\xe9\xfb\xdf\xc2+d\xb5\x01D\xbaJ\xfdd\xdc" +
	"\xa6\xaa\xfdb\xa8jS\x89\xc7\xf6\x9d\x1e\x9f}\x8dD" +
	"k\x05N\xc2\xfc\x8b \xb9\xa9\xf2\x7f\xbe\xc8>\xdf\xd3" +
	"q\xf0\xf5r^W\xe9\xad\xe65\xd2k\x82E\x82\xd5" +
	"h\x10\xe4&\xf3=)\xccv\"\xf9\x7fsXf\xd4" +
	"W\xf0\xfb\xdd\x1dM\xef.\xe7ODE\xf5\x9b\x9a\xa2" +
	"1\x10\xc2\xbcumY?\xfbf\xe1\xeb\x86\x16Q\x02" +
	"r\xdc<\"\x9f0\x95\xba\xfd\xe6\xb0<n\x1a\xf2\xb8" +
	"\x19\x0f\xfe\x8e]?:\xdf\xf7\xc9\xca\x06\x17\x96\xcc\xa3" +
	"\xf2Xx\xe1\x1dsX^5\x0dy\xd5l\x0f\xb6\x1e" +
	"\xf8\xe0\xce\xcb\x13g\xff%\xd1Vi\xc4\xaa\xd9\x05:" +
	"\x1f\xcc\xb8\xa5\xc9\xdeI{F+\xce\xa4\xc6\x8b\xce\\" +
	"oV\x05F\x9d\xbcQ\xb4\x0bY\xc0j\x86F$n" +
	"O\x11\x01\xa2m\x88\x08\x9ah\x19\"J{N~\xf7" +
	"\xbe\xb1y\xcf\xc9\x8f\xed\x1ayH\xfd\x7fp\xf7\xde\xbd" +
	"\xd5\x82X+H\x96\x89\xe8\xdc6\x0dE\xba\xc7{\xe6" +
	"w\x96\xa6\xa7\xed\xe2T\\\xe1f\x19\xb7t\xa0\xa6o" +
	"\x10\x02\x9d\x96\xaeEBD\x02\xdbTM\xc02\x99\xfa" +
	"\x9b`@\xa2\x86\xa0xF\x1dYe\xc4\x8a3\xa9]" +
	"s\xb9\xc9Y\xbf\xe4\xf6\xe6\xe6r\x93\xdd#9o\xb6" +
	"\xe0{D\x96\xcet\"\x1dD\xa2\xa5\x87H\x15\xb6\x1e" +
	"\xd0\x10WW!j\x03\xa2\x08\xa3HP\xa0]\xf1\x06" +
	"\xb2\x0ch\xe5\xa8\xa3\x0b\x11\xe1Pm\xf3\x9alR-" +
	"\xee\xa8\x82\x7f\xa4\xc0\x97\x19\xacO5\x08 \xa9l+" +
	"Nu\x11Y'\x19\xac/4\x08MK\x86\x03\xf9L" +
	"\x9d\xfc\x98\xc1\xfa^\x83`,\x09F$\xbeS'\xbf" +
	"e\xb0V4\x08]OB'\x12\xbf\xdeCd\x9dg" +
	"\xb0.i\x10\x9c'\xc1\x89\xc4o)\"\xeb\"\x83\xf5" +
	"\x87\x06\x11\x8b%\x11#\x12\xab*\xb8\xc2`]W\xd2" +
	"m\xff\x00\x9aIC3\xc1\x98r\xdc\xcaw\xdcv\xf3" +
	"\x1e\xb6P\xa8U\xc5\xb6\x10\x8c\\\xf1`C\xa8\xd3\xf3" +
	"\xa7\x9c\"\xc4\x8d\xf1\xfb\xaf\xcc?\xd9uIM\x85\x90" +
	"\xf6\xfc\xa9\xd2\xac\x0f\x11\\\xc8\x9c\xfc\xe1\x8e\xcb\xf1\x05" +
	"\xaa%r\xae\xbb>Q7\xbd\x9aA='_\xb4\x0b" +
	"\xddY\xdb\xb5\xd9\xb4\x17\x1d_jm|I\x0d\xe9\xf2" +
	")\xc4k\xdb\x8a\x80x\xc38&l\xc7\xcf\xb9\xbd\xcf" +
	"\xd8\x8e\xdf=\x92.;\xe2f\x05\xdd0\x8dV\xd4\x8d" +
	"\x1f\xad\xb7(\x99\xed\xb4]{\xda[\xf7.zC\xc7" +
	"\x87v\xaf\xedR\xa4\xd2\xa3!gKg\x9c\xa8\xba\xc1" +
	"Py\xc0B\xa4H\x13\xdcX\x936\x88\xb0@\x84\xcb" +
	"-\xdc\x9e\x0d\x89\xd0\xcd\xb4M\x96\x8aO9\xf9P[" +
	"\xd4\xbdQm\xa8h\x83\xab|[\xe6XY\x92\xa8l" +
	"S!z\x882\xcd\xc8t@l7\xe2\xaa\x0b\xeb\xde" +
	"Lh\xec\x8d\x82\x83\xc8\x02\x19\x1d\xaa\x15\xe5\xe7Y\x87" +
	"\x1e*2\xfcR\x04\xbf\xb2^Q\xf9\xf1h\xc0W\xda" +
	"\xd7m\x91(~]\xb0\x8coB\xf0\x94\xe0\xa9\xf4\xce" +
	"\xb0)\x8dL6\xf4\xa2:c\x14|\xef\xbf\x00\x00\x00" +
	"\xff\xffJ\xa4\xfeg"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x8441e8c774575aac,
		0x85f7549a53596cef,
		0x8d124035fd940437,
		0x8e898dedb95cdee4,
		0x9080163041c90a87,
		0x957555c94e5b1064,
		0x99761c4abe038bf3,
		0xa56f29d54a3673af,
		0xaf67b0a40b1c2bea,
		0xc66c9bda04b0f29e,
		0xe8bb307fa2f406fb,
		0xfeda57ee26ad6825)
}
