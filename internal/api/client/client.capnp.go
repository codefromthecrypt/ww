// Code generated by capnpc-go. DO NOT EDIT.

package client

import (
	capnp "capnproto.org/go/capnp/v3"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
)

type Host struct{ Client *capnp.Client }

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0xcfc7bb789b7be886

func (c Host) AddRef() Host {
	return Host{
		Client: c.Client.AddRef(),
	}
}

func (c Host) Release() {
	c.Client.Release()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c, policy)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server, policy *server.Policy) Host {
	return Host{Client: capnp.NewClient(Host_NewServer(s, policy))}
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

const schema_f9d8a0180405d9ed = "x\xda\x12pt`2d\xdd\xcf\xc8\xc0\x10(\xc2\xca" +
	"\xf6\xbf\xedE\xf5\xec\x8a\xdd\xc7\xcf3\x08\xf22\xff\x7f" +
	"{\x93\x95Eb\xc1\x8d\x9f\x0c\x0c\x8c\x82G'\x09\x9e" +
	"eg`\x10<\xc9.x\x92\x9dA\xe7\x7frNf" +
	"j^\x89^2cbA^\x81\x95G~1cI" +
	"\x00#c\x003k\x00## \x00\x00\xff\xff\xa5\xb3" +
	"\x1a\x8e"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0xcfc7bb789b7be886)
}
