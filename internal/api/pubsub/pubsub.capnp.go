// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
)

type Topic capnp.Client

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) (Topic_publish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_publish_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Topic) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Topic) AddRef() Topic {
	return Topic(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Topic) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Topic) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Topic) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Topic) DecodeFromPtr(p capnp.Ptr) Topic {
	return Topic(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Topic) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Topic) IsSame(other Topic) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Topic) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Topic) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server) Topic {
	return Topic(capnp.NewClient(Topic_NewServer(s)))
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (Topic_publish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(r), err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(r), err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(r), err
}

// Topic_List is a list of Topic.
type Topic_List = capnp.CapList[Topic]

// NewTopic creates a new list of Topic.
func NewTopic_List(s *capnp.Segment, sz int32) (Topic_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Topic](l), err
}

type Topic_publish_Params capnp.Struct

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params(root.Struct()), err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, capnp.Struct(s))
	return str
}

func (s Topic_publish_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_publish_Params) DecodeFromPtr(p capnp.Ptr) Topic_publish_Params {
	return Topic_publish_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_publish_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_publish_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_publish_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_publish_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params](l), err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (p Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Params(s), err
}

type Topic_publish_Results capnp.Struct

// Topic_publish_Results_TypeID is the unique identifier for the type Topic_publish_Results.
const Topic_publish_Results_TypeID = 0x9d3775c65b79b54c

func NewTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(st), err
}

func NewRootTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results(st), err
}

func ReadRootTopic_publish_Results(msg *capnp.Message) (Topic_publish_Results, error) {
	root, err := msg.Root()
	return Topic_publish_Results(root.Struct()), err
}

func (s Topic_publish_Results) String() string {
	str, _ := text.Marshal(0x9d3775c65b79b54c, capnp.Struct(s))
	return str
}

func (s Topic_publish_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_publish_Results) DecodeFromPtr(p capnp.Ptr) Topic_publish_Results {
	return Topic_publish_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_publish_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_publish_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_publish_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_publish_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_publish_Results_List is a list of Topic_publish_Results.
type Topic_publish_Results_List = capnp.StructList[Topic_publish_Results]

// NewTopic_publish_Results creates a new list of Topic_publish_Results.
func NewTopic_publish_Results_List(s *capnp.Segment, sz int32) (Topic_publish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_publish_Results](l), err
}

// Topic_publish_Results_Future is a wrapper for a Topic_publish_Results promised by a client call.
type Topic_publish_Results_Future struct{ *capnp.Future }

func (p Topic_publish_Results_Future) Struct() (Topic_publish_Results, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Results(s), err
}

type Topic_subscribe_Params capnp.Struct

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params(root.Struct()), err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Params) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Params {
	return Topic_subscribe_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_subscribe_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Topic_subscribe_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_subscribe_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Topic_subscribe_Params) Buf() uint16 {
	return capnp.Struct(s).Uint16(0) ^ 16
}

func (s Topic_subscribe_Params) SetBuf(v uint16) {
	capnp.Struct(s).SetUint16(0, v^16)
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Topic_subscribe_Params](l), err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (p Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Params(s), err
}

func (p Topic_subscribe_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Topic_subscribe_Results capnp.Struct

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results(root.Struct()), err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Results) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Results {
	return Topic_subscribe_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results](l), err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (p Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Results(s), err
}

type Topic_name_Params capnp.Struct

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params(root.Struct()), err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, capnp.Struct(s))
	return str
}

func (s Topic_name_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Params) DecodeFromPtr(p capnp.Ptr) Topic_name_Params {
	return Topic_name_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params](l), err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (p Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	s, err := p.Future.Struct()
	return Topic_name_Params(s), err
}

type Topic_name_Results capnp.Struct

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results(root.Struct()), err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, capnp.Struct(s))
	return str
}

func (s Topic_name_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Results) DecodeFromPtr(p capnp.Ptr) Topic_name_Results {
	return Topic_name_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_name_Results) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results](l), err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (p Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	s, err := p.Future.Struct()
	return Topic_name_Results(s), err
}

type PubSub capnp.Client

// PubSub_TypeID is the unique identifier for the type PubSub.
const PubSub_TypeID = 0xf1cc149f1c06e50e

func (c PubSub) Join(ctx context.Context, params func(PubSub_join_Params) error) (PubSub_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PubSub_join_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PubSub_join_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PubSub) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PubSub) AddRef() PubSub {
	return PubSub(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PubSub) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PubSub) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PubSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PubSub) DecodeFromPtr(p capnp.Ptr) PubSub {
	return PubSub(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PubSub) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PubSub) IsSame(other PubSub) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PubSub) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PubSub) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A PubSub_Server is a PubSub with a local implementation.
type PubSub_Server interface {
	Join(context.Context, PubSub_join) error
}

// PubSub_NewServer creates a new Server from an implementation of PubSub_Server.
func PubSub_NewServer(s PubSub_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PubSub_Methods(nil, s), s, c)
}

// PubSub_ServerToClient creates a new Client from an implementation of PubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func PubSub_ServerToClient(s PubSub_Server) PubSub {
	return PubSub(capnp.NewClient(PubSub_NewServer(s)))
}

// PubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PubSub_Methods(methods []server.Method, s PubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, PubSub_join{call})
		},
	})

	return methods
}

// PubSub_join holds the state for a server call to PubSub.join.
// See server.Call for documentation.
type PubSub_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PubSub_join) Args() PubSub_join_Params {
	return PubSub_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PubSub_join) AllocResults() (PubSub_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results(r), err
}

// PubSub_List is a list of PubSub.
type PubSub_List = capnp.CapList[PubSub]

// NewPubSub creates a new list of PubSub.
func NewPubSub_List(s *capnp.Segment, sz int32) (PubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PubSub](l), err
}

type PubSub_join_Params capnp.Struct

// PubSub_join_Params_TypeID is the unique identifier for the type PubSub_join_Params.
const PubSub_join_Params_TypeID = 0xfb4016d002794da7

func NewPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params(st), err
}

func NewRootPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params(st), err
}

func ReadRootPubSub_join_Params(msg *capnp.Message) (PubSub_join_Params, error) {
	root, err := msg.Root()
	return PubSub_join_Params(root.Struct()), err
}

func (s PubSub_join_Params) String() string {
	str, _ := text.Marshal(0xfb4016d002794da7, capnp.Struct(s))
	return str
}

func (s PubSub_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PubSub_join_Params) DecodeFromPtr(p capnp.Ptr) PubSub_join_Params {
	return PubSub_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PubSub_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PubSub_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PubSub_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PubSub_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PubSub_join_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PubSub_join_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PubSub_join_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PubSub_join_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PubSub_join_Params_List is a list of PubSub_join_Params.
type PubSub_join_Params_List = capnp.StructList[PubSub_join_Params]

// NewPubSub_join_Params creates a new list of PubSub_join_Params.
func NewPubSub_join_Params_List(s *capnp.Segment, sz int32) (PubSub_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Params](l), err
}

// PubSub_join_Params_Future is a wrapper for a PubSub_join_Params promised by a client call.
type PubSub_join_Params_Future struct{ *capnp.Future }

func (p PubSub_join_Params_Future) Struct() (PubSub_join_Params, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Params(s), err
}

type PubSub_join_Results capnp.Struct

// PubSub_join_Results_TypeID is the unique identifier for the type PubSub_join_Results.
const PubSub_join_Results_TypeID = 0x9f6c50fbc67b1d88

func NewPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results(st), err
}

func NewRootPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results(st), err
}

func ReadRootPubSub_join_Results(msg *capnp.Message) (PubSub_join_Results, error) {
	root, err := msg.Root()
	return PubSub_join_Results(root.Struct()), err
}

func (s PubSub_join_Results) String() string {
	str, _ := text.Marshal(0x9f6c50fbc67b1d88, capnp.Struct(s))
	return str
}

func (s PubSub_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PubSub_join_Results) DecodeFromPtr(p capnp.Ptr) PubSub_join_Results {
	return PubSub_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PubSub_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PubSub_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PubSub_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PubSub_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PubSub_join_Results) Topic() Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return Topic(p.Interface().Client())
}

func (s PubSub_join_Results) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PubSub_join_Results) SetTopic(v Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// PubSub_join_Results_List is a list of PubSub_join_Results.
type PubSub_join_Results_List = capnp.StructList[PubSub_join_Results]

// NewPubSub_join_Results creates a new list of PubSub_join_Results.
func NewPubSub_join_Results_List(s *capnp.Segment, sz int32) (PubSub_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Results](l), err
}

// PubSub_join_Results_Future is a wrapper for a PubSub_join_Results promised by a client call.
type PubSub_join_Results_Future struct{ *capnp.Future }

func (p PubSub_join_Results_Future) Struct() (PubSub_join_Results, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Results(s), err
}

func (p PubSub_join_Results_Future) Topic() Topic {
	return Topic(p.Future.Field(0, nil).Client())
}

const schema_f9d8a0180405d9ed = "x\xda\x8cS\xcdKT]\x1c\xfe=\xe7\x9c\xf1\xc8\x8b" +
	"\xf3\x8e\xe7\xbd\xa3o\x85!\x88E\xcd\xc2\xd2\xa0\xafE" +
	"3\x14\xd1\xa6\xe0^\x95\x88$h\xee4\xe5\xd4|1" +
	"\xd7SX\x8b6\x06\xee#(A\xac *\xdaD\xd0" +
	"*Z\xb4H\x91\x0cZ\x14\xe4\x1f D`!\xb41" +
	"\x8b\x1bg\xa6{g\xca\xb2\xb6s\x9ey>\x7fw\xfb" +
	"#\xa4Do4)\x899\x83\x91&\xbfo\xaesv" +
	"bgy\x8c\x94\x05\"!\x89v\\\xe1\x09\x90\xf0\x0f" +
	"\x8c\xbd\x18\x1d\xbf\xda:^{\x89\xc0<\x15\xf8\x7f " +
	"X\x9a'\x09\xfe\xc3s\xad\xdb\xb6\xdc/^'\x15\xe5" +
	"\xfe\xe2|D\xac\xbb\xf9v\x99\x08\xd65>aMr" +
	"Id\xdd\xe03V\x9b!\xf5\x0f?\x1e\x1d\x9a\xd6\xbb" +
	"&\x1bt\xbe\xf2\x0dFg|\xe3\xa5\xe9\x15;?E" +
	"*\x1e\xea,\xf0\x7f\x8c\xcebU\xe7\xde\xd0\xc7\x92\x9e" +
	"\xae\xcc\x90c!DDE\x97A\xb4\x89\x0b\x04?\xb9" +
	"\xf9h\xc7\x83\xe3\xe7\xdf4Z\xbd%\x98\x01\xdc\x11\x86" +
	"\xe2\xdf\x85\xa6\x8e\xa9\xf8\xdc\xd2*\xab\xcf\xc5m\xeb\xa5" +
	"qc\xcd\x8aC\xd6R\xd5\xaa\xdc\xf7\xfa\xd3r\xe9\xcb" +
	"R\xdd\xaa5/>\x93\xf0\xef\x1e\x19e\xaf\xdaS+" +
	"\x8dN\x9f\xd6d\x9e\x89$]\xf4\xcb\xda\xf5\xb4\xdb\x93" +
	"\xe1\xe9r\xb1\xbcw\xb0T\xceez<\xedz\x99J" +
	"\xce\xcdv\xf7g\xbd\x98\xce\x8fx\xbf\x84\x95\xb5\x9b\xcf" +
	"y\xc3\xddv\xba\x92.\xc0s\x04\x17D\x02D*\xda" +
	"E\xe44s8q\x06Y\xf0\xce J\x0cQBH" +
	"\x83\x80\x86\xe726\xe0\xb4\xf0\x08Q8\x1f\x82\xe6\x95" +
	"\xb3\x9f\x98:(Qo\x14\xc1\xfajO?1\xd5+" +
	"\xc1\xc2\xf4\x08JU\x9b\x12\xc4\xd4zy\xf9\xbb\xc5\x14" +
	"\xfc \x13!\x9bB\xac\x98.dS\xb0\x815\x83\xf5" +
	"g=\x9d\xe7\xab\xd2\xdb\xda\x1d\xd0n\xcf\xd9R\xaeX" +
	"\x83\x8cxD\x8d\xe9\xfb\xea\xe9;G\x0c#T\xfd\xf2" +
	"\x08P\x84?\xf4n\xa7+2]\xf0\x9c\xe6\x90tk" +
	"\x82\xc8\xe9\xe6pN2\x00q\x00P'L\xcd\xc78" +
	"\x9cS\x0c\xb1\xccp\xba\x08\xe5\x7fh\x7f\xbf;\xbe\xf8" +
	"\xe4\x1d\x11\xa5\xa0\xd0\xe9\x08\x86\xc6\x1f\x15\xfew\x84\xf9" +
	"\xb7\xcdQ\x9dE\x11\xa4\xabOC\x12\x8b\xc8\xd6\xdf8" +
	"3}\x85Y\x1b\xa3&\xeaQ\xab\xa5\xa2\x85\x18ZV" +
	"-mkW\x0eh\xd7L-\xaaS\x07w\x89\xe0S" +
	"R\xcaL\x16\x911S\xeb\x8f\xd3\xb0\x9f\x8d$\xab\x17" +
	"\xb7\xd6,5\xc0_9\xfd\x16\x00\x00\xff\xff\xf8\xc4/" +
	"\xcb"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0x8470369ac91fcc32,
		0x8810938879cb8443,
		0x986ea9282f106bb0,
		0x9d3775c65b79b54c,
		0x9f6c50fbc67b1d88,
		0xc772c6756fef5ba8,
		0xd5765aab1c56263f,
		0xf1cc149f1c06e50e,
		0xf1fc6ff9f4d43e07,
		0xfb4016d002794da7)
}
