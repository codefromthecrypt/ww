// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wetware/ww/pkg/runtime (interfaces: ServiceFactory,EventProducer,EventConsumer,Service)

// Package mock_runtime is a generated GoMock package.
package mock_runtime

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	runtime "github.com/wetware/ww/pkg/runtime"
	reflect "reflect"
)

// MockServiceFactory is a mock of ServiceFactory interface
type MockServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServiceFactoryMockRecorder
}

// MockServiceFactoryMockRecorder is the mock recorder for MockServiceFactory
type MockServiceFactoryMockRecorder struct {
	mock *MockServiceFactory
}

// NewMockServiceFactory creates a new mock instance
func NewMockServiceFactory(ctrl *gomock.Controller) *MockServiceFactory {
	mock := &MockServiceFactory{ctrl: ctrl}
	mock.recorder = &MockServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceFactory) EXPECT() *MockServiceFactoryMockRecorder {
	return m.recorder
}

// NewService mocks base method
func (m *MockServiceFactory) NewService() (runtime.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewService")
	ret0, _ := ret[0].(runtime.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewService indicates an expected call of NewService
func (mr *MockServiceFactoryMockRecorder) NewService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewService", reflect.TypeOf((*MockServiceFactory)(nil).NewService))
}

// MockEventProducer is a mock of EventProducer interface
type MockEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockEventProducerMockRecorder
}

// MockEventProducerMockRecorder is the mock recorder for MockEventProducer
type MockEventProducerMockRecorder struct {
	mock *MockEventProducer
}

// NewMockEventProducer creates a new mock instance
func NewMockEventProducer(ctrl *gomock.Controller) *MockEventProducer {
	mock := &MockEventProducer{ctrl: ctrl}
	mock.recorder = &MockEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventProducer) EXPECT() *MockEventProducerMockRecorder {
	return m.recorder
}

// Produces mocks base method
func (m *MockEventProducer) Produces() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produces")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Produces indicates an expected call of Produces
func (mr *MockEventProducerMockRecorder) Produces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produces", reflect.TypeOf((*MockEventProducer)(nil).Produces))
}

// MockEventConsumer is a mock of EventConsumer interface
type MockEventConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockEventConsumerMockRecorder
}

// MockEventConsumerMockRecorder is the mock recorder for MockEventConsumer
type MockEventConsumerMockRecorder struct {
	mock *MockEventConsumer
}

// NewMockEventConsumer creates a new mock instance
func NewMockEventConsumer(ctrl *gomock.Controller) *MockEventConsumer {
	mock := &MockEventConsumer{ctrl: ctrl}
	mock.recorder = &MockEventConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventConsumer) EXPECT() *MockEventConsumerMockRecorder {
	return m.recorder
}

// Consumes mocks base method
func (m *MockEventConsumer) Consumes() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumes")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Consumes indicates an expected call of Consumes
func (mr *MockEventConsumerMockRecorder) Consumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumes", reflect.TypeOf((*MockEventConsumer)(nil).Consumes))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Loggable mocks base method
func (m *MockService) Loggable() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loggable")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Loggable indicates an expected call of Loggable
func (mr *MockServiceMockRecorder) Loggable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loggable", reflect.TypeOf((*MockService)(nil).Loggable))
}

// Start mocks base method
func (m *MockService) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockServiceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockService) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockServiceMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop), arg0)
}
